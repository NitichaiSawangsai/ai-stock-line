require('dotenv').config();
const NewsAnalysisService = require('./../services/newsAnalysisService');
const GeminiAnalysisService = require('./../services/geminiAnalysisService');

async function testAIFallbackSystem() {
  console.log('üß™ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö AI Fallback (ChatGPT + Gemini)...\n');
  
  try {
    // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö NewsAnalysisService ‡∏ó‡∏µ‡πà‡∏°‡∏µ fallback
    console.log('üìä ‡∏ó‡∏î‡∏™‡∏≠‡∏ö NewsAnalysisService...');
    const newsService = new NewsAnalysisService();
    
    // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
    console.log('üîó ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ AI services...');
    try {
      await newsService.testConnection();
      console.log('‚úÖ AI service connection successful');
    } catch (error) {
      console.log(`‚ùå AI service connection failed: ${error.message}`);
    }
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö
    const mockStock = {
      symbol: 'TEST',
      type: '‡∏´‡∏∏‡πâ‡∏ô',
      amount: 100,
      unit: 'shares'
    };
    
    const mockNews = [
      {
        title: 'Test Company reports strong earnings',
        description: 'The company exceeded expectations in Q3 results',
        source: 'Test News',
        url: 'https://example.com/news1'
      },
      {
        title: 'New partnership announcement',
        description: 'Strategic alliance with major technology firm',
        source: 'Tech Today',
        url: 'https://example.com/news2'
      }
    ];
    
    // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á
    console.log('\nüö® ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á...');
    try {
      const riskAnalysis = await newsService.analyzeRiskWithAI(mockStock, mockNews);
      
      console.log('üìã ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á:');
      console.log(`   - ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏™‡∏π‡∏á: ${riskAnalysis.isHighRisk ? '‡πÉ‡∏ä‡πà' : '‡πÑ‡∏°‡πà'}`);
      console.log(`   - ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á: ${riskAnalysis.riskLevel}`);
      console.log(`   - ‡∏™‡∏£‡∏∏‡∏õ: ${riskAnalysis.summary}`);
      console.log(`   - ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏±‡πà‡∏ô: ${riskAnalysis.confidenceScore}`);
      console.log(`   - ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥: ${riskAnalysis.recommendation}`);
      
    } catch (error) {
      console.error(`‚ùå Risk analysis failed: ${error.message}`);
    }
    
    // ‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÇ‡∏≠‡∏Å‡∏≤‡∏™
    console.log('\nüî• ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÇ‡∏≠‡∏Å‡∏≤‡∏™...');
    try {
      const opportunityAnalysis = await newsService.analyzeOpportunityWithAI(mockStock, mockNews);
      
      console.log('üìã ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÇ‡∏≠‡∏Å‡∏≤‡∏™:');
      console.log(`   - ‡∏°‡∏µ‡πÇ‡∏≠‡∏Å‡∏≤‡∏™: ${opportunityAnalysis.isOpportunity ? '‡πÉ‡∏ä‡πà' : '‡πÑ‡∏°‡πà'}`);
      console.log(`   - ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡πÇ‡∏≠‡∏Å‡∏≤‡∏™: ${opportunityAnalysis.opportunityLevel}`);
      console.log(`   - ‡∏™‡∏£‡∏∏‡∏õ: ${opportunityAnalysis.summary}`);
      console.log(`   - ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏±‡πà‡∏ô: ${opportunityAnalysis.confidenceScore}`);
      console.log(`   - ‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤: ${opportunityAnalysis.timeframe}`);
      
    } catch (error) {
      console.error(`‚ùå Opportunity analysis failed: ${error.message}`);
    }
    
    // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Gemini ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
    console.log('\nü§ñ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Gemini AI ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á...');
    const geminiService = new GeminiAnalysisService();
    
    try {
      await geminiService.testConnection();
      console.log('‚úÖ Gemini direct connection successful');
      
      const geminiRisk = await geminiService.analyzeRiskWithAI(mockStock, mockNews);
      console.log('üìã Gemini risk analysis result:');
      console.log(`   - Risk Level: ${geminiRisk.riskLevel}`);
      console.log(`   - Summary: ${geminiRisk.summary}`);
      
    } catch (error) {
      console.log(`‚ö†Ô∏è Gemini direct test: ${error.message}`);
    }
    
    // ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ fallback
    console.log('\nüìä ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏∞‡∏ö‡∏ö:');
    console.log(`   - ‡πÉ‡∏ä‡πâ Fallback: ${newsService.usingFallback ? '‡πÉ‡∏ä‡πà' : '‡πÑ‡∏°‡πà'}`);
    console.log(`   - Primary AI: ${newsService.usingFallback ? 'Gemini' : 'ChatGPT'}`);
    
    console.log('\n‚úÖ ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö Fallback ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!');
    console.log('\nüí° ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏:');
    console.log('   - ‡∏ñ‡πâ‡∏≤ ChatGPT ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡∏™‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÉ‡∏ä‡πâ Gemini ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥');
    console.log('   - Gemini ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏ö‡∏ö‡∏ü‡∏£‡∏µ‡πÑ‡∏î‡πâ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ API key');
    console.log('   - ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏™‡∏•‡∏±‡∏ö AI service');
    
  } catch (error) {
    console.error('‚ùå ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö Fallback ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:', error.message);
    console.error('Stack:', error.stack);
  }
}

// ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏î‡∏™‡∏≠‡∏ö
testAIFallbackSystem();