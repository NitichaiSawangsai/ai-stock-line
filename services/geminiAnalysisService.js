const axios = require('axios');
const winston = require('winston');
const CostTrackingService = require('./costTrackingService');

const logger = winston.createLogger({
  level: 'info',
  format: winston.format.combine(
    winston.format.timestamp(),
    winston.format.printf(({ timestamp, level, message }) => {
      return `${timestamp} [GEMINI-AI] [${level.toUpperCase()}]: ${message}`;
    })
  ),
  transports: [
    new winston.transports.Console()
  ]
});

class GeminiAnalysisService {
  constructor() {
    this.geminiApiKey = process.env.GEMINI_API_KEY || 'free'; // ‡πÉ‡∏ä‡πâ‡∏ü‡∏£‡∏µ
    this.baseUrl = 'https://generativelanguage.googleapis.com/v1beta';
    this.model = process.env.GEMINI_MODEL || 'gemini-2.5-flash';
    this.maxRetries = parseInt(process.env.RETRY_MAX_ATTEMPTS) || 3;
    this.retryDelay = parseInt(process.env.RETRY_DELAY_MS) || 2000;
    this.backoffMultiplier = parseFloat(process.env.RETRY_BACKOFF_MULTIPLIER) || 2;
    
    // ‡πÄ‡∏û‡∏¥‡πà‡∏° Cost Tracking Service
    this.costTracker = new CostTrackingService();
  }





  async withRetry(operation, operationName) {
    let lastError;
    
    for (let attempt = 1; attempt <= this.maxRetries; attempt++) {
      try {
        const result = await operation();
        if (attempt > 1) {
          logger.info(`‚úÖ ${operationName} succeeded on attempt ${attempt}`);
        }
        return result;
      } catch (error) {
        lastError = error;
        
        // For Gemini API calls, handle specific error types
        if (operationName.includes('Gemini API call')) {
          // Don't retry on auth errors
          if (error.response?.status === 401 || error.response?.status === 403) {
            logger.warn(`‚ö†Ô∏è ${operationName} failed with auth error: ${error.message}, will use fallback`);
            throw error;
          }
          
          // Don't retry on quota exceeded
          if (error.response?.status === 429) {
            logger.warn(`‚ö†Ô∏è ${operationName} failed with quota exceeded: ${error.message}`);
            throw error;
          }
          
          // Retry on server errors and response structure issues
          if (error.response?.status >= 500 || error.message.includes('Invalid response structure')) {
            logger.warn(`‚ö†Ô∏è ${operationName} failed with server error, will retry: ${error.message}`);
            // Continue to retry logic
          }
        }
        
        // Don't retry on other API key errors
        if (error.response?.status === 401 || error.response?.status === 403) {
          logger.error(`‚ùå ${operationName} failed with auth error: ${error.message}`);
          throw error;
        }
        
        if (attempt === this.maxRetries) {
          logger.error(`‚ùå ${operationName} failed after ${this.maxRetries} attempts: ${error.message}`);
          throw error;
        }
        
        const delay = this.retryDelay * Math.pow(this.backoffMultiplier, attempt - 1);
        logger.warn(`‚ö†Ô∏è ${operationName} failed (attempt ${attempt}/${this.maxRetries}): ${error.message}. Retrying in ${delay}ms...`);
        
        await this.delay(delay);
      }
    }
    
    throw lastError;
  }

  async testConnection() {
    try {
      // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ API key ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏õ‡πá‡∏ô 'free'
      if (!this.geminiApiKey || this.geminiApiKey === 'free') {
        logger.info(`üÜì Using Gemini free mode with model: ${this.model}`);
        return true;
      }

      // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Gemini API ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
      const endpoint = `${this.baseUrl}/models/${this.model}:generateContent?key=${this.geminiApiKey}`;
      
      const response = await axios.post(endpoint, {
        contents: [{
          parts: [{
            text: "‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ"
          }]
        }],
        generationConfig: {
          maxOutputTokens: 100, // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏∂‡πâ‡∏ô‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö test
          temperature: 0.1
        }
      }, {
        headers: {
          'Content-Type': 'application/json'
        },
        timeout: 10000
      });

      if (response.data && response.data.candidates && response.data.candidates.length > 0) {
        logger.info(`‚úÖ Gemini API connection successful with model: ${this.model}`);
        logger.info(`ü§ñ Test response: ${response.data.candidates[0].content.parts[0].text}`);
        return true;
      } else {
        throw new Error('Invalid response from Gemini API');
      }

    } catch (error) {
      logger.error(`‚ùå Gemini API test failed: ${error.message}`);
      if (error.response?.status === 403) {
        logger.error('üîë API Key authentication failed - Check GEMINI_API_KEY');
      }
      logger.info(`üÜì Falling back to mock responses with model: ${this.model}`);
      return true;
    }
  }

  async analyzeRiskWithAI(stock, news) {
    try {
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ Free Mode ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      const shouldUseFree = await this.costTracker.shouldUseFreeMode();
      
      if (shouldUseFree) {
        logger.info(`üÜì Using FREE mode for risk analysis of ${stock.symbol}`);
        return this.createFallbackRiskAnalysis(stock, "‡πÉ‡∏ä‡πâ‡πÇ‡∏´‡∏°‡∏î‡∏ü‡∏£‡∏µ - ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå AI");
      }
      
      const newsTexts = news.map(n => `${n.title}: ${n.description}`).join('\n\n');
      
      const prompt = `‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏´‡∏∏‡πâ‡∏ô ${stock.symbol}:

‡∏Ç‡πà‡∏≤‡∏ß: ${newsTexts}

‡∏ï‡∏≠‡∏ö JSON ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô:
{
  "isHighRisk": false,
  "riskLevel": "low",
  "summary": "‡∏™‡∏£‡∏∏‡∏õ",
  "threats": ["‡∏†‡∏±‡∏¢‡∏Ñ‡∏∏‡∏Å‡∏Ñ‡∏≤‡∏°"],
  "confidenceScore": 0.8,
  "recommendation": "‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥",
  "keyNews": "‡∏Ç‡πà‡∏≤‡∏ß‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç",
  "sourceUrl": "url"
}`;

      logger.info(`ü§ñ Using Gemini API model: ${this.model}`);
      
      const response = await this.callGeminiAPI(prompt, 0, 1024);
      
      // Track API usage cost
      const cost = this.costTracker.calculateApiCost('gemini', this.model);
      await this.costTracker.trackApiUsage('gemini', this.model, cost);
      
      // ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î response ‡πÅ‡∏•‡∏∞ parse JSON
      let content = '';
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡πÅ‡∏õ‡∏•‡∏á response ‡πÄ‡∏õ‡πá‡∏ô string
      if (typeof response === 'string') {
        content = response;
      } else if (response && typeof response === 'object') {
        // If already parsed object
        if (response.isHighRisk !== undefined) {
          return response;
        }
        content = JSON.stringify(response);
      } else {
        throw new Error('Invalid response type from Gemini API');
      }
      
      // ‡∏•‡∏ö markdown code blocks ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
      content = content.replace(/```json\s*/gi, '').replace(/```\s*/gi, '');
      
      // ‡∏•‡∏ö whitespace ‡πÅ‡∏•‡∏∞ newlines ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
      content = content.trim();
      
      // ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏° extract JSON ‡∏à‡∏≤‡∏Å response ‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ô‡∏ö‡∏°‡∏≤
      const jsonMatch = content.match(/\{[\s\S]*\}/);
      if (jsonMatch) {
        content = jsonMatch[0];
      }
      
      try {
        const parsed = JSON.parse(content);
        logger.info(`‚úÖ Successfully parsed Gemini risk analysis for ${stock.symbol}`);
        return parsed;
      } catch (parseError) {
        // ‡∏•‡∏î‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ debug level
        logger.debug(`üîß JSON parse failed for ${stock.symbol}, using fallback`);
        return this.createFallbackRiskAnalysis(stock, content);
      }
      
    } catch (error) {
      logger.error(`‚ùå Gemini risk analysis failed for ${stock.symbol}: ${error.message}`);
      return this.createFallbackRiskAnalysis(stock, "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÑ‡∏î‡πâ");
    }
  }

  async analyzeOpportunityWithAI(stock, news) {
    try {
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ Free Mode ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      const shouldUseFree = await this.costTracker.shouldUseFreeMode();
      
      if (shouldUseFree) {
        logger.info(`üÜì Using FREE mode for opportunity analysis of ${stock.symbol}`);
        return this.createFallbackOpportunityAnalysis(stock, "‡πÉ‡∏ä‡πâ‡πÇ‡∏´‡∏°‡∏î‡∏ü‡∏£‡∏µ - ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå AI");
      }
      
      const newsTexts = news.map(n => `${n.title}: ${n.description}`).join('\n\n');
      
      const prompt = `‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏´‡∏∏‡πâ‡∏ô ${stock.symbol}:

‡∏Ç‡πà‡∏≤‡∏ß: ${newsTexts}

‡∏ï‡∏≠‡∏ö JSON ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô:
{
  "isOpportunity": false,
  "opportunityLevel": "medium",
  "summary": "‡∏™‡∏£‡∏∏‡∏õ",
  "positiveFactors": ["‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢‡∏ö‡∏ß‡∏Å"],
  "confidenceScore": 0.8,
  "timeframe": "2-3 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô",
  "priceTarget": "‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢",
  "keyNews": "‡∏Ç‡πà‡∏≤‡∏ß‡∏î‡∏µ",
  "sourceUrl": "url"
}`;

      logger.info(`ü§ñ Using Gemini API model: ${this.model}`);

      const response = await this.callGeminiAPI(prompt, 0, 1024);
      
      // Track API usage cost
      const cost = this.costTracker.calculateApiCost('gemini', this.model);
      await this.costTracker.trackApiUsage('gemini', this.model, cost);
      
      // ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î response ‡πÅ‡∏•‡∏∞ parse JSON
      let content = '';
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡πÅ‡∏õ‡∏•‡∏á response ‡πÄ‡∏õ‡πá‡∏ô string
      if (typeof response === 'string') {
        content = response;
      } else if (response && typeof response === 'object') {
        // If already parsed object
        if (response.isOpportunity !== undefined) {
          return response;
        }
        content = JSON.stringify(response);
      } else {
        throw new Error('Invalid response type from Gemini API');
      }
      
      content = content.replace(/```json\s*/gi, '').replace(/```\s*/gi, '').trim();
      
      // ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏° extract JSON ‡∏à‡∏≤‡∏Å response ‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ô‡∏ö‡∏°‡∏≤
      const jsonMatch = content.match(/\{[\s\S]*\}/);
      if (jsonMatch) {
        content = jsonMatch[0];
      }
      
      try {
        const parsed = JSON.parse(content);
        logger.info(`‚úÖ Successfully parsed Gemini opportunity analysis for ${stock.symbol}`);
        return parsed;
      } catch (parseError) {
        // ‡∏•‡∏î‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ debug level
        logger.debug(`üîß JSON parse failed for ${stock.symbol}, using fallback`);
        return this.createFallbackOpportunityAnalysis(stock, content);
      }
      
    } catch (error) {
      logger.error(`‚ùå Gemini opportunity analysis failed for ${stock.symbol}: ${error.message}`);
      return this.createFallbackOpportunityAnalysis(stock, "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÑ‡∏î‡πâ");
    }
  }

  async callGeminiAPI(prompt, retryCount = 0, maxTokens = 1024) {
    try {
      return await this.withRetry(async () => {
        // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ API key ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ‡∏ü‡∏£‡∏µ ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ mock response
        if (!this.geminiApiKey || this.geminiApiKey === 'free') {
          logger.info(`üÜì Using Gemini free mock response (model: ${this.model})`);
          return this.generateMockResponse(prompt);
        }

        logger.info(`ü§ñ Using Gemini API model: ${this.model}`);
        const endpoint = `${this.baseUrl}/models/${this.model}:generateContent?key=${this.geminiApiKey}`;
        
        const response = await axios.post(endpoint, {
          contents: [{
            parts: [{
              text: prompt
            }]
          }],
          generationConfig: {
            temperature: 0.3,
            topK: 40,
            topP: 0.95,
            maxOutputTokens: Math.min(maxTokens, 1024), // Limit to prevent truncation
            stopSequences: ["}"], // Stop at JSON end to prevent truncation
          }
        }, {
          headers: {
            'Content-Type': 'application/json'
          },
          timeout: 30000
        });

        if (!response.data.candidates || response.data.candidates.length === 0) {
          throw new Error('No response from Gemini API');
        }
        
        const candidate = response.data.candidates[0];
        
        // Check for content safety or blocking
        if (candidate.finishReason === 'SAFETY' || candidate.finishReason === 'BLOCKED') {
          throw new Error('Response blocked by safety filter');
        }
        
        // Handle MAX_TOKENS case with enhanced handling
        if (candidate.finishReason === 'MAX_TOKENS') {
          logger.debug(`üîß Response truncated, attempting to parse partial content`);
          // Try to extract partial content if available
          const partialContent = this.extractPartialContent(response.data);
          if (partialContent) {
            return this.parsePartialResponse(partialContent, retryCount);
          }
        }
        
        // Handle different response structures from Gemini 2.5
        let text = '';
        if (candidate.content && candidate.content.parts && candidate.content.parts.length > 0) {
          text = candidate.content.parts[0].text;
        } else if (candidate.content && typeof candidate.content === 'string') {
          text = candidate.content;
        } else if (candidate.text) {
          text = candidate.text;
        } else {
          // Enhanced error handling - try simplified prompt before giving up
          if (retryCount < 2) {
            logger.debug(`üîß Invalid response structure, trying simplified prompt`);
            return this.callWithSimplifiedPrompt(prompt, retryCount + 1);
          }
          logger.error(`‚ùå Invalid response structure: content=${!!candidate.content}, parts=${!!candidate.content?.parts}, partsLength=${candidate.content?.parts?.length}`);
          throw new Error('Invalid response structure from Gemini API');
        }
        
        return text;
      }, `Gemini API call (${this.model})`);
    } catch (error) {
      // If API call fails (including auth errors), fall back to mock response
      if (error.response?.status === 401 || error.response?.status === 403) {
        logger.info(`üÜì Gemini API auth failed, using free mock response (model: ${this.model})`);
      } else {
        logger.warn(`‚ö†Ô∏è Gemini API call failed: ${error.message}, using mock response`);
      }
      return this.generateMockResponse(prompt);
    }
  }

  generateMockResponse(prompt) {
    // ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå prompt ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ response ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
    if (prompt.includes('‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á')) {
      return JSON.stringify({
        isHighRisk: false,
        riskLevel: "low",
        summary: "‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πà‡∏≤‡∏ß‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏î‡πâ‡∏ß‡∏¢ AI ‡∏ü‡∏£‡∏µ ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏™‡∏π‡∏á‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏´‡∏∏‡πâ‡∏ô‡∏õ‡∏¥‡∏î‡∏ï‡∏±‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏™‡∏µ‡∏¢‡πÄ‡∏á‡∏¥‡∏ô‡∏•‡∏á‡∏ó‡∏∏‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ‡πÅ‡∏ï‡πà‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏õ‡∏Å‡∏ï‡∏¥‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∏‡∏ô‡πÉ‡∏ô‡∏ï‡∏•‡∏≤‡∏î‡∏´‡∏∏‡πâ‡∏ô",
        threats: [
          "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏±‡∏ô‡∏ú‡∏ß‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥‡∏Ç‡∏≠‡∏á‡∏ï‡∏•‡∏≤‡∏î‡∏´‡∏∏‡πâ‡∏ô", 
          "‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢‡πÄ‡∏®‡∏£‡∏©‡∏ê‡∏Å‡∏¥‡∏à‡∏°‡∏´‡∏†‡∏≤‡∏Ñ", 
          "‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô‡πÉ‡∏ô‡∏≠‡∏∏‡∏ï‡∏™‡∏≤‡∏´‡∏Å‡∏£‡∏£‡∏°",
          "‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏°‡πà‡πÅ‡∏ô‡πà‡∏ô‡∏≠‡∏ô‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏°‡∏∑‡∏≠‡∏á‡πÇ‡∏•‡∏Å"
        ],
        confidenceScore: 0.70,
        recommendation: "‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏Ç‡πà‡∏≤‡∏ß‡∏™‡∏≤‡∏£‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á ‡πÅ‡∏•‡∏∞‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡πÉ‡∏ô‡∏û‡∏≠‡∏£‡πå‡∏ï",
        keyNews: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πà‡∏≤‡∏ß‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏™‡πà‡∏á‡∏ú‡∏•‡∏Å‡∏£‡∏∞‡∏ó‡∏ö‡∏£‡∏∏‡∏ô‡πÅ‡∏£‡∏á‡∏ï‡πà‡∏≠‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∏‡∏ô‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ",
        sourceUrl: "https://free-ai-analysis.example.com/risk-assessment"
      });
    } 
    else if (prompt.includes('‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÇ‡∏≠‡∏Å‡∏≤‡∏™')) {
      return JSON.stringify({
        isOpportunity: true,
        opportunityLevel: "medium",
        summary: "‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πà‡∏≤‡∏ß‡πÅ‡∏•‡∏∞‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏ï‡∏•‡∏≤‡∏î‡∏î‡πâ‡∏ß‡∏¢ AI ‡∏ü‡∏£‡∏µ ‡∏û‡∏ö‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡πÄ‡∏ä‡∏¥‡∏á‡∏ö‡∏ß‡∏Å‡∏´‡∏•‡∏≤‡∏¢‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏£ ‡∏£‡∏ß‡∏°‡∏ñ‡∏∂‡∏á‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏¥‡∏ö‡πÇ‡∏ï‡∏Ç‡∏≠‡∏á‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à‡∏Ç‡∏≠‡∏á‡∏ô‡∏±‡∏Å‡∏•‡∏á‡∏ó‡∏∏‡∏ô ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏°‡∏µ‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏ó‡∏µ‡πà‡∏£‡∏≤‡∏Ñ‡∏≤‡∏à‡∏∞‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏±‡∏ß‡∏Ç‡∏∂‡πâ‡∏ô‡πÉ‡∏ô‡∏£‡∏∞‡∏¢‡∏∞‡∏Å‡∏•‡∏≤‡∏á",
        positiveFactors: [
          "‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏¥‡∏ö‡πÇ‡∏ï‡∏Ç‡∏≠‡∏á‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏±‡∏ö‡∏™‡∏ô‡∏∏‡∏ô", 
          "‡∏™‡∏†‡∏≤‡∏û‡∏Ñ‡∏•‡πà‡∏≠‡∏á‡πÉ‡∏ô‡∏ï‡∏•‡∏≤‡∏î‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏î‡∏µ", 
          "‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏±‡πà‡∏ô‡∏Ç‡∏≠‡∏á‡∏ô‡∏±‡∏Å‡∏•‡∏á‡∏ó‡∏∏‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ü‡∏∑‡πâ‡∏ô‡∏ï‡∏±‡∏ß",
          "‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡πÅ‡∏Ç‡πá‡∏á‡πÅ‡∏Å‡∏£‡πà‡∏á",
          "‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏±‡∏ö‡∏™‡∏ô‡∏∏‡∏ô‡∏à‡∏≤‡∏Å‡∏ô‡πÇ‡∏¢‡∏ö‡∏≤‡∏¢‡∏†‡∏≤‡∏Ñ‡∏£‡∏±‡∏ê"
        ],
        confidenceScore: 0.75,
        timeframe: "2-4 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô",
        priceTarget: "‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏±‡∏ß‡∏Ç‡∏∂‡πâ‡∏ô 10-18% ‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô",
        keyNews: "‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏¥‡∏ö‡πÇ‡∏ï‡∏Ç‡∏≠‡∏á‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏±‡πà‡∏ô‡∏Ç‡∏≠‡∏á‡∏ï‡∏•‡∏≤‡∏î‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ü‡∏∑‡πâ‡∏ô‡∏ï‡∏±‡∏ß",
        sourceUrl: "https://free-ai-analysis.example.com/opportunity-analysis"
      });
    }
    else {
      // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö LINE chat
      return `‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏Ñ‡πà‡∏∞ ü§ñ

‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏ä‡πâ AI ‡∏ü‡∏£‡∏µ 100% ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢ ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏•‡∏∞‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì

üìä ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏à‡∏∞‡∏≠‡∏¥‡∏á‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏ï‡∏•‡∏≤‡∏î‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ

üí° ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥: 
- ‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏Ç‡πà‡∏≤‡∏ß‡∏™‡∏≤‡∏£‡∏à‡∏≤‡∏Å‡πÅ‡∏´‡∏•‡πà‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏ñ‡∏∑‡∏≠‡πÑ‡∏î‡πâ
- ‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á
- ‡∏•‡∏á‡∏ó‡∏∏‡∏ô‡πÉ‡∏ô‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡πÑ‡∏î‡πâ

‚ö†Ô∏è ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∏‡∏ô

üÜì ‡∏£‡∏∞‡∏ö‡∏ö AI ‡∏ü‡∏£‡∏µ - ‡∏õ‡∏£‡∏∞‡∏´‡∏¢‡∏±‡∏î‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô‡πÉ‡∏´‡πâ‡∏Ñ‡∏∏‡∏ì`;
    }
  }

  createFallbackRiskAnalysis(stock, summary) {
    return {
      isHighRisk: false,
      riskLevel: "unknown",
      summary: summary || `‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏Ç‡∏≠‡∏á ${stock.symbol} ‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ`,
      threats: ["‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏£‡∏∞‡∏ö‡∏∏‡πÑ‡∏î‡πâ"],
      confidenceScore: 0.1,
      recommendation: "‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏Ç‡πà‡∏≤‡∏ß‡∏™‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°",
      keyNews: "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•",
      sourceUrl: "unavailable"
    };
  }

  createFallbackOpportunityAnalysis(stock, summary) {
    return {
      isOpportunity: false,
      opportunityLevel: "unknown",
      summary: summary || `‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏Ç‡∏≠‡∏á ${stock.symbol} ‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ`,
      positiveFactors: ["‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏£‡∏∞‡∏ö‡∏∏‡πÑ‡∏î‡πâ"],
      confidenceScore: 0.1,
      timeframe: "‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö",
      priceTarget: "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•",
      keyNews: "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•",
      sourceUrl: "unavailable"
    };
  }

  delay(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
  }

  // Extract partial content from truncated response
  extractPartialContent(responseData) {
    try {
      if (responseData.candidates && responseData.candidates[0] && 
          responseData.candidates[0].content && responseData.candidates[0].content.parts) {
        const parts = responseData.candidates[0].content.parts;
        if (parts.length > 0 && parts[0].text) {
          return parts[0].text;
        }
      }
    } catch (error) {
      logger.warn(`‚ö†Ô∏è Failed to extract partial content: ${error.message}`);
    }
    return null;
  }

  // Parse partial response and create fallback
  parsePartialResponse(partialContent, retryCount) {
    logger.info(`üîÑ Processing partial response (${partialContent.length} chars)`);
    
    // Try to extract JSON from partial content
    try {
      const jsonMatch = partialContent.match(/\{[\s\S]*\}/g);
      if (jsonMatch && jsonMatch[0]) {
        const parsed = JSON.parse(jsonMatch[0]);
        logger.info(`‚úÖ Successfully parsed partial JSON response`);
        return parsed;
      }
    } catch (error) {
      // JSON parsing failed, create fallback
    }
    
    // Create fallback response based on partial content
    logger.debug(`üîß Creating fallback response from partial content`);
    return {
      isHighRisk: false,
      riskLevel: "unknown",
      summary: "‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÑ‡∏°‡πà‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Ç‡∏≠‡∏á‡πÇ‡∏ó‡πÄ‡∏Ñ‡πá‡∏ô",
      threats: ["‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå"],
      confidenceScore: 0.3,
      recommendation: "‡∏Ñ‡∏ß‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°",
      keyNews: "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå",
      sourceUrl: "N/A",
      _partial: true
    };
  }

  // Call with simplified prompt when main prompt fails
  async callWithSimplifiedPrompt(originalPrompt, retryCount) {
    logger.info(`üîÑ Trying simplified prompt (attempt ${retryCount})`);
    
    // Create a much shorter, focused prompt
    const simplifiedPrompt = `‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡πÅ‡∏ö‡∏ö‡∏™‡∏±‡πâ‡∏ô:

‡∏ï‡∏≠‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞ JSON:
{
  "isHighRisk": boolean,
  "riskLevel": "low|medium|high",
  "summary": "‡∏™‡∏£‡∏∏‡∏õ 1 ‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏Ñ",
  "confidenceScore": 0.0-1.0
}`;
    
    try {
      return await this.callGeminiAPI(simplifiedPrompt, retryCount, 512); // Much smaller token limit
    } catch (error) {
      // Final fallback
      logger.warn(`‚ö†Ô∏è Simplified prompt also failed, using emergency fallback`);
      return {
        isHighRisk: false,
        riskLevel: "unknown",
        summary: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÑ‡∏î‡πâ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏ó‡∏≤‡∏á‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ",
        confidenceScore: 0.2,
        _fallback: true
      };
    }
  }
}

module.exports = GeminiAnalysisService;