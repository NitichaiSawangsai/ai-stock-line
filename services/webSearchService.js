const axios = require('axios');
const logger = require('./logger');
const fs = require('fs');
const path = require('path');
const CostTracker = require('./costTracker');

class WebSearchService {
    constructor(googleApiKey, searchEngineId, newsApiKey, dailyLimit = 200, freeDailyLimit = 100) {
        this.googleApiKey = googleApiKey;
        this.searchEngineId = searchEngineId;
        this.newsApiKey = newsApiKey;
        this.dailyLimit = parseInt(dailyLimit) || 200;
        this.freeDailyLimit = parseInt(freeDailyLimit) || 100;
        this.costPer1000 = 5; // $5 per 1,000 requests
        this.exchangeRate = 35; // Default fallback rate
        this.costTracker = new CostTracker();
        
        // Initialize exchange rate asynchronously
        this.initializeExchangeRate();
        this.isGoogleEnabled = googleApiKey && googleApiKey !== 'disabled' && searchEngineId && searchEngineId !== 'disabled';
        this.isNewsEnabled = newsApiKey && newsApiKey !== 'disabled';
        
        // ‡πÑ‡∏ü‡∏•‡πå‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô quota ‡πÅ‡∏•‡∏∞‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢
        this.quotaFile = path.join(__dirname, '../data/google_search_quota.json');
        this.costFile = path.join(__dirname, '../data/google_search_costs.json');
        this.todayUsage = this.loadTodayUsage();
        this.costData = this.loadCostData();
        
        // Log API status
        if (this.isGoogleEnabled) {
            const remaining = this.dailyLimit - this.todayUsage;
            logger.info(`‚úÖ Google Search API ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô (‡πÄ‡∏´‡∏•‡∏∑‡∏≠ ${remaining}/${this.dailyLimit} ‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô)`);
            // Cost information will be logged after exchange rate is initialized
        } else {
            logger.warn('‚ö†Ô∏è Google Search API ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô');
        }
        
        if (this.isNewsEnabled) {
            logger.info('‚úÖ News API ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô');
        } else {
            logger.warn('‚ö†Ô∏è News API ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô');
        }
    }

    // Initialize exchange rate from CostTracker
    async initializeExchangeRate() {
        try {
            this.exchangeRate = await this.costTracker.getExchangeRate();
            logger.info(`üí± ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡πÅ‡∏•‡∏Å‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô Google Search: 1 USD = ${this.exchangeRate} THB`);
            
            // Log cost information after exchange rate is available
            if (this.isGoogleEnabled) {
                const { todayCost, monthlyCost } = await this.calculateCosts();
                logger.money(`‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ: ${todayCost.toFixed(2)} ‡∏ö‡∏≤‡∏ó, ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ô‡∏µ‡πâ: ${monthlyCost.toFixed(2)} ‡∏ö‡∏≤‡∏ó`);
            }
        } catch (error) {
            logger.warn(`‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡πÅ‡∏•‡∏Å‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÑ‡∏î‡πâ ‡πÉ‡∏ä‡πâ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô ${this.exchangeRate} ‡∏ö‡∏≤‡∏ó`);
        }
    }

    // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ
    loadTodayUsage() {
        try {
            if (fs.existsSync(this.quotaFile)) {
                const data = JSON.parse(fs.readFileSync(this.quotaFile, 'utf8'));
                const today = new Date().toISOString().split('T')[0]; // YYYY-MM-DD
                
                if (data.date === today) {
                    return data.usage || 0;
                }
            }
            
            // ‡∏ß‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏°‡πà‡∏°‡∏µ - reset ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
            return 0;
        } catch (error) {
            logger.warn(`‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• quota: ${error.message}`);
            return 0;
        }
    }

    // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢
    loadCostData() {
        try {
            if (fs.existsSync(this.costFile)) {
                const data = JSON.parse(fs.readFileSync(this.costFile, 'utf8'));
                return data;
            }
            
            // ‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏°‡πà‡∏°‡∏µ - ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
            return {
                daily: {},
                monthly: {},
                total: {
                    requests: 0,
                    costUSD: 0,
                    costTHB: 0
                }
            };
        } catch (error) {
            logger.warn(`‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢: ${error.message}`);
            return {
                daily: {},
                monthly: {},
                total: { requests: 0, costUSD: 0, costTHB: 0 }
            };
        }
    }

    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢
    saveCostData() {
        try {
            const dataDir = path.dirname(this.costFile);
            if (!fs.existsSync(dataDir)) {
                fs.mkdirSync(dataDir, { recursive: true });
            }
            
            fs.writeFileSync(this.costFile, JSON.stringify(this.costData, null, 2));
        } catch (error) {
            logger.warn(`‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢: ${error.message}`);
        }
    }

    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢
    async calculateCosts() {
        // Update exchange rate only if it's still the default value
        if (this.exchangeRate === 35) {
            try {
                this.exchangeRate = await this.costTracker.getExchangeRate();
            } catch (error) {
                // Use existing rate if update fails
            }
        }
        
        const today = new Date().toISOString().split('T')[0];
        const thisMonth = today.substring(0, 7); // YYYY-MM
        
        // ‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ
        const todayRequests = this.costData.daily[today]?.requests || 0;
        const freeToday = Math.min(todayRequests, this.freeDailyLimit);
        const paidToday = Math.max(0, todayRequests - this.freeDailyLimit);
        const todayCostUSD = (paidToday / 1000) * this.costPer1000;
        const todayCostTHB = todayCostUSD * this.exchangeRate;
        
        // ‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ô‡∏µ‡πâ
        const monthlyData = this.costData.monthly[thisMonth];
        let monthlyCostUSD = 0;
        let monthlyCostTHB = 0;
        
        if (monthlyData) {
            monthlyCostUSD = monthlyData.costUSD || 0;
            monthlyCostTHB = monthlyData.costTHB || 0;
        }
        
        return {
            todayCost: todayCostTHB,
            monthlyCost: monthlyCostTHB,
            todayFree: freeToday,
            todayPaid: paidToday,
            todayCostUSD: todayCostUSD
        };
    }

    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢
    async updateCostTracking() {
        const today = new Date().toISOString().split('T')[0];
        const thisMonth = today.substring(0, 7);
        
        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô
        if (!this.costData.daily[today]) {
            this.costData.daily[today] = { requests: 0, costUSD: 0, costTHB: 0 };
        }
        this.costData.daily[today].requests = this.todayUsage;
        
        // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢‡πÉ‡∏´‡∏°‡πà
        const { todayCostUSD, todayCost } = await this.calculateCosts();
        this.costData.daily[today].costUSD = todayCostUSD;
        this.costData.daily[today].costTHB = todayCost;
        
        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
        if (!this.costData.monthly[thisMonth]) {
            this.costData.monthly[thisMonth] = { requests: 0, costUSD: 0, costTHB: 0 };
        }
        
        // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
        let monthlyRequests = 0;
        let monthlyCostUSD = 0;
        let monthlyCostTHB = 0;
        
        Object.keys(this.costData.daily).forEach(date => {
            if (date.startsWith(thisMonth)) {
                const dayData = this.costData.daily[date];
                monthlyRequests += dayData.requests;
                monthlyCostUSD += dayData.costUSD;
                monthlyCostTHB += dayData.costTHB;
            }
        });
        
        this.costData.monthly[thisMonth] = {
            requests: monthlyRequests,
            costUSD: monthlyCostUSD,
            costTHB: monthlyCostTHB
        };
        
        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        this.costData.total.requests += 1;
        this.costData.total.costUSD = Object.values(this.costData.monthly).reduce((sum, month) => sum + month.costUSD, 0);
        this.costData.total.costTHB = Object.values(this.costData.monthly).reduce((sum, month) => sum + month.costTHB, 0);
        
        this.saveCostData();
    }

    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
    saveTodayUsage() {
        try {
            const today = new Date().toISOString().split('T')[0];
            const data = {
                date: today,
                usage: this.todayUsage,
                limit: this.dailyLimit,
                lastUpdated: new Date().toISOString()
            };
            
            // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå data ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ
            const dataDir = path.dirname(this.quotaFile);
            if (!fs.existsSync(dataDir)) {
                fs.mkdirSync(dataDir, { recursive: true });
            }
            
            fs.writeFileSync(this.quotaFile, JSON.stringify(data, null, 2));
        } catch (error) {
            logger.warn(`‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• quota: ${error.message}`);
        }
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô Google Search ‡πÑ‡∏î‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    canUseGoogleSearch() {
        if (!this.isGoogleEnabled) {
            return false;
        }
        
        if (this.todayUsage >= this.dailyLimit) {
            logger.warn(`‚ö†Ô∏è Google Search API ‡πÄ‡∏Å‡∏¥‡∏ô quota ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ (${this.todayUsage}/${this.dailyLimit}) - ‡∏Ç‡πâ‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤`);
            return false;
        }
        
        return true;
    }

    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
    async incrementUsage() {
        this.todayUsage++;
        this.saveTodayUsage();
        await this.updateCostTracking();
        
        const remaining = this.dailyLimit - this.todayUsage;
        const { todayCost } = await this.calculateCosts();
        
        if (remaining <= 10) {
            logger.warn(`‚ö†Ô∏è Google Search API ‡πÄ‡∏´‡∏•‡∏∑‡∏≠ ${remaining} ‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô`);
        }
        
        if (this.todayUsage > this.freeDailyLimit) {
            logger.money(`üí∞ ‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ: ${todayCost.toFixed(2)} ‡∏ö‡∏≤‡∏ó`);
        }
    }

    // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πà‡∏≤‡∏ß‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ‡∏î‡πâ‡∏ß‡∏¢ Google Search API
    async searchGoogle(query, num = 3) { // ‡∏•‡∏î‡∏à‡∏≤‡∏Å 5 ‡πÄ‡∏õ‡πá‡∏ô 3
        if (!this.canUseGoogleSearch()) {
            return [];
        }

        try {
            logger.api(`‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏î‡πâ‡∏ß‡∏¢ Google: "${query}"`);
            
            const response = await axios.get('https://www.googleapis.com/customsearch/v1', {
                params: {
                    key: this.googleApiKey,
                    cx: this.searchEngineId,
                    q: query,
                    num: num,
                    lr: 'lang_th|lang_en',
                    dateRestrict: 'd1' // ‡∏Ç‡πà‡∏≤‡∏ß‡πÉ‡∏ô 1 ‡∏ß‡∏±‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
                },
                timeout: 8000
            });

            // ‡∏ô‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠ API call ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à)
            await this.incrementUsage();

            if (response.data.items) {
                const results = response.data.items.map(item => ({
                    title: item.title,
                    snippet: item.snippet,
                    url: item.link,
                    source: item.displayLink
                }));
                
                logger.success(`‡∏û‡∏ö‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ ${results.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
                return results;
            }
            
            return [];
        } catch (error) {
            if (error.response?.status === 400) {
                logger.warn(`Google Search: Query ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á "${query}" - ${error.response?.data?.error?.message || 'Bad Request'}`);
            } else if (error.response?.status === 403) {
                logger.error('Google Search: API Key ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠ quota ‡∏´‡∏°‡∏î');
                // ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô Google Search ‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
                this.isGoogleEnabled = false;
            } else if (error.response?.status === 429) {
                logger.warn('Google Search: Rate limit exceeded');
                // ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô Google Search ‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
                this.isGoogleEnabled = false;
            } else {
                logger.error(`‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ Google: ${error.message}`);
            }
            return [];
        }
    }

    // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πà‡∏≤‡∏ß‡∏î‡πâ‡∏ß‡∏¢ News API
    async searchNews(query, category = null) {
        if (!this.isNewsEnabled) {
            logger.warn('News API ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô');
            return [];
        }

        try {
            logger.api(`‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πà‡∏≤‡∏ß‡∏î‡πâ‡∏ß‡∏¢ News API: "${query}"`);
            
            // ‡∏õ‡∏£‡∏±‡∏ö query ‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏Å‡∏±‡∏ö News API
            const cleanQuery = query.replace(/[^\w\s]/g, '').substring(0, 100);
            
            const params = {
                apiKey: this.newsApiKey,
                q: cleanQuery,
                language: 'en',
                sortBy: 'publishedAt',
                pageSize: 3, // ‡∏•‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏•‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡∏´‡∏¢‡∏±‡∏î quota
                from: new Date(Date.now() - 24*60*60*1000).toISOString() // ‡∏Ç‡πà‡∏≤‡∏ß 24 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
            };

            // ‡πÑ‡∏°‡πà‡πÉ‡∏™‡πà category ‡πÄ‡∏û‡∏£‡∏≤‡∏∞ News API v2/everything ‡πÑ‡∏°‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö
            // if (category) {
            //     params.category = category;
            // }

            const response = await axios.get('https://newsapi.org/v2/everything', {
                params: params,
                timeout: 8000
            });

            if (response.data.articles) {
                const results = response.data.articles.map(article => ({
                    title: article.title,
                    snippet: article.description || article.content?.substring(0, 200) || '',
                    url: article.url,
                    source: article.source.name,
                    publishedAt: article.publishedAt
                }));
                
                logger.success(`‡∏û‡∏ö‡∏Ç‡πà‡∏≤‡∏ß‡∏™‡∏≤‡∏£ ${results.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
                return results;
            }
            
            return [];
        } catch (error) {
            if (error.response?.status === 400) {
                logger.warn(`News API: Query ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á "${query}" - ${error.response?.data?.message || 'Bad Request'}`);
            } else if (error.response?.status === 401) {
                logger.error('News API: API Key ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á');
            } else if (error.response?.status === 429) {
                logger.warn('News API: Rate limit exceeded');
            } else {
                logger.error(`‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πà‡∏≤‡∏ß: ${error.message}`);
            }
            return [];
        }
    }

    // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πà‡∏≤‡∏ß‡πÄ‡∏®‡∏£‡∏©‡∏ê‡∏Å‡∏¥‡∏à
    async searchEconomicNews() {
        const queries = [
            'Thailand economy GDP inflation',
            'US Federal Reserve interest rate'
        ];

        const allResults = [];
        for (const query of queries) {
            const googleResults = await this.searchGoogle(query);
            allResults.push(...googleResults);
            
            // ‡∏•‡∏≠‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏î‡πâ‡∏ß‡∏¢ News API ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ query ‡πÅ‡∏£‡∏Å
            if (queries.indexOf(query) === 0) {
                const newsResults = await this.searchNews(query);
                allResults.push(...newsResults);
            }
        }

        return this.removeDuplicates(allResults);
    }

    // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πà‡∏≤‡∏ß‡∏™‡∏á‡∏Ñ‡∏£‡∏≤‡∏°/‡∏†‡∏π‡∏°‡∏¥‡∏£‡∏±‡∏ê‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå
    async searchGeopoliticalNews() {
        const queries = [
            'Ukraine Russia war',
            'Middle East conflict'
        ];

        const allResults = [];
        for (const query of queries) {
            const googleResults = await this.searchGoogle(query);
            allResults.push(...googleResults);
            
            // ‡∏•‡∏≠‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏î‡πâ‡∏ß‡∏¢ News API ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ query ‡πÅ‡∏£‡∏Å
            if (queries.indexOf(query) === 0) {
                const newsResults = await this.searchNews(query);
                allResults.push(...newsResults);
            }
        }

        return this.removeDuplicates(allResults);
    }

    // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πà‡∏≤‡∏ß‡∏ó‡∏≠‡∏á‡∏Ñ‡∏≥
    async searchGoldNews() {
        const queries = [
            'gold price today'
        ];

        const allResults = [];
        for (const query of queries) {
            const googleResults = await this.searchGoogle(query);
            const newsResults = await this.searchNews(query);
            allResults.push(...googleResults, ...newsResults);
        }

        return this.removeDuplicates(allResults);
    }

    // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πà‡∏≤‡∏ß‡∏´‡∏∏‡πâ‡∏ô
    async searchStockNews() {
        const queries = [
            'Thailand stock market SET',
            'US stock market S&P 500'
        ];

        const allResults = [];
        for (const query of queries) {
            const googleResults = await this.searchGoogle(query);
            allResults.push(...googleResults);
            
            // ‡∏•‡∏≠‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏î‡πâ‡∏ß‡∏¢ News API ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ query ‡πÅ‡∏£‡∏Å
            if (queries.indexOf(query) === 0) {
                const newsResults = await this.searchNews(query);
                allResults.push(...newsResults);
            }
        }

        return this.removeDuplicates(allResults);
    }

    // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πà‡∏≤‡∏ß‡∏Ñ‡∏£‡∏¥‡∏õ‡πÇ‡∏ï
    async searchCryptoNews() {
        const queries = [
            'Bitcoin price today'
        ];

        const allResults = [];
        for (const query of queries) {
            const googleResults = await this.searchGoogle(query);
            const newsResults = await this.searchNews(query);
            allResults.push(...googleResults, ...newsResults);
        }

        return this.removeDuplicates(allResults);
    }

    // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πà‡∏≤‡∏ß‡∏™‡∏Å‡∏∏‡∏•‡πÄ‡∏á‡∏¥‡∏ô
    async searchCurrencyNews() {
        const queries = [
            'USD THB exchange rate'
        ];

        const allResults = [];
        for (const query of queries) {
            const googleResults = await this.searchGoogle(query);
            const newsResults = await this.searchNews(query);
            allResults.push(...googleResults, ...newsResults);
        }

        return this.removeDuplicates(allResults);
    }

    // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πà‡∏≤‡∏ß‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    async searchAllNews() {
        logger.process('üîç ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πà‡∏≤‡∏ß‡∏à‡∏≤‡∏Å‡∏≠‡∏¥‡∏ô‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÄ‡∏ô‡πá‡∏ï...');
        
        try {
            const [
                economicNews,
                geopoliticalNews,
                goldNews,
                stockNews,
                cryptoNews,
                currencyNews
            ] = await Promise.allSettled([
                this.searchEconomicNews(),
                this.searchGeopoliticalNews(),
                this.searchGoldNews(),
                this.searchStockNews(),
                this.searchCryptoNews(),
                this.searchCurrencyNews()
            ]);

            const newsData = {
                economic: this.getResults(economicNews).slice(0, 3),
                geopolitical: this.getResults(geopoliticalNews).slice(0, 3),
                gold: this.getResults(goldNews).slice(0, 2),
                stock: this.getResults(stockNews).slice(0, 3),
                crypto: this.getResults(cryptoNews).slice(0, 2),
                currency: this.getResults(currencyNews).slice(0, 2)
            };

            const totalNews = Object.values(newsData).reduce((sum, news) => sum + news.length, 0);
            
            if (totalNews > 0) {
                logger.success(`‚úÖ ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πà‡∏≤‡∏ß‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô: ${totalNews} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
            } else {
                logger.warn('‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πà‡∏≤‡∏ß‡πÑ‡∏î‡πâ - ‡∏õ‡∏±‡∏ç‡∏´‡∏≤ API ‡∏´‡∏£‡∏∑‡∏≠ network');
            }

            return newsData;
        } catch (error) {
            logger.error(`‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πà‡∏≤‡∏ß: ${error.message}`);
            return {
                economic: [],
                geopolitical: [],
                gold: [],
                stock: [],
                crypto: [],
                currency: []
            };
        }
    }

    // Helper method ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Promise.allSettled results
    getResults(promiseResult) {
        if (promiseResult.status === 'fulfilled') {
            return promiseResult.value || [];
        } else {
            logger.warn(`Promise rejected: ${promiseResult.reason?.message || 'Unknown error'}`);
            return [];
        }
    }

    // ‡∏•‡∏ö‡∏Ç‡πà‡∏≤‡∏ß‡∏ó‡∏µ‡πà‡∏ã‡πâ‡∏≥
    removeDuplicates(results) {
        const seen = new Set();
        return results.filter(item => {
            const key = item.url || item.title;
            if (seen.has(key)) {
                return false;
            }
            seen.add(key);
            return true;
        });
    }

    // ‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô quota ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
    async getQuotaStatus() {
        const remaining = this.dailyLimit - this.todayUsage;
        const usagePercent = Math.round((this.todayUsage / this.dailyLimit) * 100);
        const { todayCost, monthlyCost, todayFree, todayPaid } = await this.calculateCosts();
        
        return {
            used: this.todayUsage,
            limit: this.dailyLimit,
            remaining: remaining,
            percentage: usagePercent,
            canUse: this.canUseGoogleSearch(),
            resetTime: '‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏á‡∏Ñ‡∏∑‡∏ô (00:00)',
            freeUsed: Math.min(this.todayUsage, this.freeDailyLimit),
            freeLimit: this.freeDailyLimit,
            paidUsed: Math.max(0, this.todayUsage - this.freeDailyLimit),
            todayCost: todayCost,
            monthlyCost: monthlyCost,
            costPerRequest: this.todayUsage > this.freeDailyLimit ? (this.costPer1000 / 1000 * this.exchangeRate) : 0
        };
    }

    // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πà‡∏≤‡∏ß‡πÅ‡∏•‡∏∞‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏´‡∏∏‡πâ‡∏ô
    async searchStockSpecificNews(stockList) {
        logger.process('üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πà‡∏≤‡∏ß‡πÅ‡∏•‡∏∞‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏´‡∏∏‡πâ‡∏ô...');
        
        const stockAnalysis = [];
        
        for (const stock of stockList) {
            if (!stock.symbol || stock.symbol === '-') continue;
            
            try {
                // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πà‡∏≤‡∏ß‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏´‡∏∏‡πâ‡∏ô
                const newsQueries = [
                    `${stock.symbol} stock news today`,
                    `${stock.symbol} financial results earnings`,
                    `${stock.symbol} bankruptcy liquidation risk`,
                    `${stock.symbol} company news update`
                ];
                
                const stockNews = [];
                for (const query of newsQueries) {
                    const googleResults = await this.searchGoogle(query, 2); // ‡∏•‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡∏´‡∏¢‡∏±‡∏î quota
                    stockNews.push(...googleResults);
                    
                    // ‡∏û‡∏±‡∏Å‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô rate limit
                    await new Promise(resolve => setTimeout(resolve, 500));
                }
                
                // ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡∏´‡∏∏‡πâ‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÅ‡∏•‡∏∞‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á
                const priceData = await this.getStockPriceHistory(stock.symbol);
                
                // ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡πÅ‡∏•‡∏∞‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏Å‡∏≥‡πÑ‡∏£
                const analysis = await this.analyzeStockRiskAndOpportunity(stock, priceData, stockNews);
                
                stockAnalysis.push({
                    symbol: stock.symbol,
                    type: stock.type,
                    amount: stock.amount,
                    purchasePrice: stock.purchasePrice,
                    currentPrice: priceData.currentPrice,
                    priceHistory: priceData.history,
                    news: this.removeDuplicates(stockNews).slice(0, 5), // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πà‡∏≤‡∏ß‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç 5 ‡∏Ç‡πà‡∏≤‡∏ß
                    analysis: analysis
                });
                
                logger.success(`‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå ${stock.symbol} ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô`);
                
            } catch (error) {
                logger.warn(`‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå ${stock.symbol}: ${error.message}`);
                
                // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡πÅ‡∏°‡πâ‡∏ß‡πà‡∏≤‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ
                stockAnalysis.push({
                    symbol: stock.symbol,
                    type: stock.type,
                    amount: stock.amount,
                    purchasePrice: stock.purchasePrice,
                    currentPrice: null,
                    priceHistory: [],
                    news: [],
                    analysis: {
                        riskLevel: 'N/A',
                        profitOpportunity: 'N/A',
                        bankruptcyRisk: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏î‡πâ',
                        recommendation: '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠'
                    }
                });
            }
        }
        
        logger.success(`‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏´‡∏∏‡πâ‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô: ${stockAnalysis.length} ‡∏ï‡∏±‡∏ß`);
        return stockAnalysis;
    }
    
    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏Ñ‡∏≤‡∏´‡∏∏‡πâ‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏£‡∏≤‡∏Ñ‡∏≤
    async getStockPriceHistory(symbol) {
        try {
            // ‡πÉ‡∏ä‡πâ Yahoo Finance API ‡∏´‡∏£‡∏∑‡∏≠ Alpha Vantage API
            const response = await axios.get(`https://query1.finance.yahoo.com/v8/finance/chart/${symbol}`, {
                timeout: 10000,
                headers: {
                    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
                }
            });
            
            if (response.data.chart?.result?.[0]) {
                const result = response.data.chart.result[0];
                const meta = result.meta;
                const timestamps = result.timestamp || [];
                const prices = result.indicators?.quote?.[0]?.close || [];
                
                // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏£‡∏≤‡∏Ñ‡∏≤ 3-4 ‡∏ß‡∏±‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
                const history = [];
                const last4Days = Math.min(4, timestamps.length);
                
                for (let i = timestamps.length - last4Days; i < timestamps.length; i++) {
                    if (timestamps[i] && prices[i]) {
                        const date = new Date(timestamps[i] * 1000);
                        history.push({
                            date: date.toLocaleDateString('th-TH'),
                            price: prices[i].toFixed(2),
                            change: i > 0 && prices[i-1] ? 
                                ((prices[i] - prices[i-1]) / prices[i-1] * 100).toFixed(2) : '0.00'
                        });
                    }
                }
                
                return {
                    currentPrice: meta.regularMarketPrice?.toFixed(2) || 'N/A',
                    previousClose: meta.previousClose?.toFixed(2) || 'N/A',
                    changePercent: meta.regularMarketPrice && meta.previousClose ? 
                        (((meta.regularMarketPrice - meta.previousClose) / meta.previousClose) * 100).toFixed(2) : '0.00',
                    currency: meta.currency || 'USD',
                    history: history
                };
            }
            
            return {
                currentPrice: 'N/A',
                previousClose: 'N/A', 
                changePercent: '0.00',
                currency: 'USD',
                history: []
            };
            
        } catch (error) {
            logger.warn(`‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤ ${symbol}: ${error.message}`);
            return {
                currentPrice: 'N/A',
                previousClose: 'N/A',
                changePercent: '0.00', 
                currency: 'USD',
                history: []
            };
        }
    }
    
    // ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡πÅ‡∏•‡∏∞‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏Å‡∏≥‡πÑ‡∏£‡∏Ç‡∏≠‡∏á‡∏´‡∏∏‡πâ‡∏ô
    async analyzeStockRiskAndOpportunity(stock, priceData, news) {
        // ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏Ñ‡∏≤‡πÅ‡∏•‡∏∞‡∏Ç‡πà‡∏≤‡∏ß
        let riskLevel = 5; // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á
        let profitOpportunity = 5;
        let bankruptcyRisk = '‡∏ï‡πà‡∏≥'; // ‡∏ï‡πà‡∏≥/‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á/‡∏™‡∏π‡∏á
        
        // ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤
        if (priceData.history.length > 0) {
            const recentChanges = priceData.history.map(h => parseFloat(h.change));
            const avgChange = recentChanges.reduce((a, b) => a + b, 0) / recentChanges.length;
            
            if (avgChange < -5) {
                riskLevel += 2; // ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏•‡∏î‡∏°‡∏≤‡∏Å = ‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏™‡∏π‡∏á
                profitOpportunity -= 2;
            } else if (avgChange > 5) {
                riskLevel -= 1; // ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏∂‡πâ‡∏ô‡∏°‡∏≤‡∏Å = ‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏î‡∏µ
                profitOpportunity += 2;
            }
        }
        
        // ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏à‡∏≤‡∏Å‡∏Ç‡πà‡∏≤‡∏ß
        if (news.length > 0) {
            const newsText = news.map(n => `${n.title} ${n.snippet}`).join(' ').toLowerCase();
            
            // ‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡∏ö‡πà‡∏á‡∏ö‡∏≠‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏±‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á
            const riskKeywords = ['bankruptcy', 'liquidation', 'debt', 'loss', 'decline', 'lawsuit', 'investigation', '‡∏•‡πâ‡∏°‡∏•‡∏∞‡∏•‡∏≤‡∏¢', '‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô', '‡∏õ‡∏¥‡∏î‡∏ï‡∏±‡∏ß'];
            const opportunityKeywords = ['profit', 'growth', 'expansion', 'acquisition', 'earnings beat', 'dividend', '‡∏Å‡∏≥‡πÑ‡∏£', '‡∏Ç‡∏¢‡∏≤‡∏¢‡∏ï‡∏±‡∏ß', '‡πÄ‡∏ï‡∏¥‡∏ö‡πÇ‡∏ï'];
            const bankruptcyKeywords = ['bankruptcy', 'liquidation', 'closure', 'shut down', 'insolvent', '‡∏•‡πâ‡∏°‡∏•‡∏∞‡∏•‡∏≤‡∏¢', '‡∏õ‡∏¥‡∏î‡∏ï‡∏±‡∏ß', '‡πÄ‡∏á‡∏¥‡∏ô‡∏®‡∏π‡∏ô‡∏¢‡πå'];
            
            // ‡∏ô‡∏±‡∏ö‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡∏û‡∏ö
            const riskCount = riskKeywords.filter(keyword => newsText.includes(keyword)).length;
            const opportunityCount = opportunityKeywords.filter(keyword => newsText.includes(keyword)).length;
            const bankruptcyCount = bankruptcyKeywords.filter(keyword => newsText.includes(keyword)).length;
            
            riskLevel += riskCount * 2;
            profitOpportunity += opportunityCount * 2;
            profitOpportunity -= riskCount;
            
            if (bankruptcyCount > 0) {
                bankruptcyRisk = '‡∏™‡∏π‡∏á';
                riskLevel = Math.min(10, riskLevel + 3);
            } else if (riskCount > 2) {
                bankruptcyRisk = '‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á';
            }
        }
        
        // ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á 1-10
        riskLevel = Math.max(1, Math.min(10, riskLevel));
        profitOpportunity = Math.max(1, Math.min(10, profitOpportunity));
        
        // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Å‡∏≥‡πÑ‡∏£/‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ä‡∏∑‡πâ‡∏≠
        let currentReturn = 'N/A';
        if (stock.purchasePrice && stock.purchasePrice !== '-' && priceData.currentPrice && priceData.currentPrice !== 'N/A') {
            const purchasePrice = parseFloat(stock.purchasePrice);
            const currentPrice = parseFloat(priceData.currentPrice);
            currentReturn = (((currentPrice - purchasePrice) / purchasePrice) * 100).toFixed(2) + '%';
        }
        
        return {
            riskLevel: riskLevel,
            profitOpportunity: profitOpportunity,
            bankruptcyRisk: bankruptcyRisk,
            currentReturn: currentReturn,
            recommendation: this.generateRecommendation(riskLevel, profitOpportunity, bankruptcyRisk)
        };
    }
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥
    generateRecommendation(riskLevel, profitOpportunity, bankruptcyRisk) {
        if (bankruptcyRisk === '‡∏™‡∏π‡∏á') {
            return '‡∏Ç‡∏≤‡∏¢‡∏ó‡∏±‡∏ô‡∏ó‡∏µ - ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏•‡πâ‡∏°‡∏•‡∏∞‡∏•‡∏≤‡∏¢‡∏™‡∏π‡∏á';
        } else if (riskLevel >= 8) {
            return '‡πÑ‡∏°‡πà‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏´‡πâ‡∏ã‡∏∑‡πâ‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏° - ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏™‡∏π‡∏á‡∏°‡∏≤‡∏Å';
        } else if (riskLevel <= 3 && profitOpportunity >= 7) {
            return '‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏´‡πâ‡∏ã‡∏∑‡πâ‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏° - ‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏Å‡∏≥‡πÑ‡∏£‡∏î‡∏µ';
        } else if (profitOpportunity >= 6) {
            return '‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤‡∏ã‡∏∑‡πâ‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏° - ‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á';
        } else {
            return '‡∏ñ‡∏∑‡∏≠‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏Å‡πà‡∏≠‡∏ô - ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡πÅ‡∏•‡∏∞‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á';
        }
    }
    async getMarketData(symbol) {
        try {
            logger.api(`‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏Ñ‡∏≤: ${symbol}`);
            
            const response = await axios.get(`https://query1.finance.yahoo.com/v8/finance/chart/${symbol}`, {
                timeout: 5000
            });

            if (response.data.chart?.result?.[0]) {
                const result = response.data.chart.result[0];
                const meta = result.meta;
                const currentPrice = meta.regularMarketPrice;
                const previousClose = meta.previousClose;
                const change = ((currentPrice - previousClose) / previousClose * 100).toFixed(2);

                return {
                    symbol: symbol,
                    currentPrice: currentPrice,
                    previousClose: previousClose,
                    changePercent: change,
                    currency: meta.currency
                };
            }
            
            return null;
        } catch (error) {
            logger.warn(`‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏Ñ‡∏≤ ${symbol}: ${error.message}`);
            return null;
        }
    }
}

module.exports = WebSearchService;