const OpenAIService = require('./openaiService');
const GeminiService = require('./geminiService');
const WebSearchService = require('./webSearchService');
const CostTracker = require('./costTracker');
const logger = require('./logger');

class AIAnalysisService {
    constructor(config) {
        this.config = config;
        this.costTracker = new CostTracker();
        
        // Initialize AI services
        this.openaiService = new OpenAIService(config.openaiApiKey, config.openaiModel);
        this.geminiService = new GeminiService(config.geminiApiKey, config.geminiModel);
        
        // Initialize Web Search service
        this.webSearchService = new WebSearchService(
            config.googleSearchApiKey, 
            config.googleSearchEngineId, 
            config.newsApiKey,
            config.googleSearchDailyLimit,
            config.googleSearchFreeDaily
        );
    }

    createAnalysisPrompt(stockData, newsData = null) {
        const today = new Date();
        const todayThai = today.toLocaleDateString('th-TH', {
            year: 'numeric',
            month: 'long',
            day: 'numeric'
        });
        const todayEng = today.toLocaleDateString('en-US', {
            year: 'numeric',
            month: 'long',
            day: 'numeric'
        });

        let newsContext = '';
        if (newsData) {
            // ‡∏•‡∏î‡∏Ç‡∏ô‡∏≤‡∏î prompt ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡πà‡∏≤‡∏ß‡πÅ‡∏ö‡∏ö‡∏™‡∏±‡∏á‡πÄ‡∏Ç‡∏õ
            const allNews = [
                ...newsData.economic.slice(0, 2),
                ...newsData.geopolitical.slice(0, 1),
                ...newsData.gold.slice(0, 1),
                ...newsData.stock.slice(0, 2),
                ...newsData.crypto.slice(0, 1),
                ...newsData.currency.slice(0, 1)
            ];
            
            newsContext = `‡∏Ç‡πà‡∏≤‡∏ß‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î:\n${allNews.map(news => `‚Ä¢ ${news.title} - ${news.url}`).join('\n')}`;
        } else {
            newsContext = `‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö‡∏≠‡∏¥‡∏ô‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÄ‡∏ô‡πá‡∏ï‡πÑ‡∏î‡πâ`;
        }

        return `‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ: ${todayEng} (${todayThai})

${newsContext}

‡∏´‡∏∏‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏•‡∏á‡∏ó‡∏∏‡∏ô:
${stockData}

‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡∏£‡∏∏‡∏õ‡∏™‡∏±‡πâ‡∏ô‡πÜ ‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö:
üìä ‡∏Ç‡πà‡∏≤‡∏ß‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç (2-3 ‡∏Ç‡πà‡∏≤‡∏ß) ‡∏û‡∏£‡πâ‡∏≠‡∏° URL
üìà ‡∏ú‡∏•‡∏Å‡∏£‡∏∞‡∏ó‡∏ö‡∏ï‡πà‡∏≠‡∏´‡∏∏‡πâ‡∏ô: ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á 1-10, ‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏Å‡∏≥‡πÑ‡∏£ 1-10
üí° ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥`;
    }

    async selectBestAIService(monthlyCostLimit) {
        try {
            // Check budget status
            const budgetStatus = await this.costTracker.checkBudgetLimit(monthlyCostLimit);
            
            if (budgetStatus.isOverBudget) {
                logger.money('‡πÄ‡∏Å‡∏¥‡∏ô‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì! ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÑ‡∏õ‡πÉ‡∏ä‡πâ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ü‡∏£‡∏µ');
                // Switch to free models
                if (this.geminiService.isFree || this.costTracker.isFreeTier('gemini', this.config.geminiModel)) {
                    return { service: this.geminiService, reason: '‡πÄ‡∏Å‡∏¥‡∏ô‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì - ‡πÉ‡∏ä‡πâ Gemini ‡∏ü‡∏£‡∏µ' };
                } else {
                    // Force free mode
                    this.geminiService.isFree = true;
                    return { service: this.geminiService, reason: '‡πÄ‡∏Å‡∏¥‡∏ô‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì - ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÉ‡∏ä‡πâ‡πÇ‡∏´‡∏°‡∏î‡∏ü‡∏£‡∏µ' };
                }
            }

            // Check which service is available
            if (this.openaiService.isEnabled) {
                return { service: this.openaiService, reason: 'OpenAI API ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô' };
            } else if (this.geminiService.isEnabled) {
                return { service: this.geminiService, reason: 'Gemini API ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô' };
            } else {
                console.log('üÜì ‡πÑ‡∏°‡πà‡∏°‡∏µ API Key ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÑ‡∏õ‡πÉ‡∏ä‡πâ‡πÇ‡∏´‡∏°‡∏î‡∏ü‡∏£‡∏µ');
                this.geminiService.isFree = true;
                return { service: this.geminiService, reason: '‡πÑ‡∏°‡πà‡∏°‡∏µ API Key - ‡πÉ‡∏ä‡πâ‡πÇ‡∏´‡∏°‡∏î‡∏ü‡∏£‡∏µ' };
            }

        } catch (error) {
            console.error('‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å AI Service:', error.message);
            // Fallback to free mode
            this.geminiService.isFree = true;
            return { service: this.geminiService, reason: '‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î - ‡πÉ‡∏ä‡πâ‡πÇ‡∏´‡∏°‡∏î‡∏ü‡∏£‡∏µ' };
        }
    }

    async generateAnalysis(stockData, monthlyCostLimit = 100) {
        try {
            console.log('üîç ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå...');
            
            // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πà‡∏≤‡∏ß‡∏à‡∏≤‡∏Å‡∏≠‡∏¥‡∏ô‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÄ‡∏ô‡πá‡∏ï‡∏Å‡πà‡∏≠‡∏ô
            let newsData = null;
            if (this.webSearchService.isGoogleEnabled || this.webSearchService.isNewsEnabled) {
                newsData = await this.webSearchService.searchAllNews();
            } else {
                logger.warn('‚ö†Ô∏è Web Search APIs ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô - ‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≥‡∏•‡∏≠‡∏á');
            }
            
            // Select best AI service based on budget
            const { service, reason } = await this.selectBestAIService(monthlyCostLimit);
            logger.info(`‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÉ‡∏ä‡πâ: ${service.constructor.name} (${reason})`);

            // Create prompt with news data
            const prompt = this.createAnalysisPrompt(stockData, newsData);
            logger.process(`‡∏™‡∏£‡πâ‡∏≤‡∏á Prompt ‡πÄ‡∏™‡∏£‡πá‡∏à (${prompt.length} ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£)`);

            // Generate response
            let response;
            if (prompt.length > 4000) {
                logger.process('Prompt ‡∏¢‡∏≤‡∏ß‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ ‡πÅ‡∏ö‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏™‡πà‡∏ß‡∏ô...');
                response = await service.generateResponseInChunks(prompt);
            } else {
                response = await service.generateResponse(prompt);
            }

            // Track costs if not free
            if (!service.isFree) {
                const exchangeRate = await this.costTracker.getExchangeRate();
                await this.costTracker.updateCostTracking(
                    response.provider,
                    response.model,
                    response.usage.inputTokens,
                    response.usage.outputTokens,
                    exchangeRate
                );
            }

            logger.success('‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô');
            return response;

        } catch (error) {
            logger.error('‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå', error.message);
            throw error;
        }
    }

    async generateCostSummary() {
        try {
            const summary = await this.costTracker.generateCostSummary();
            const quotaStatus = await this.webSearchService.getQuotaStatus();
            
            const summaryText = `
üí∞ ‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢

üìä ‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ô‡∏µ‡πâ:
‚Ä¢ Token ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ: ${summary.currentSession.tokens.toLocaleString()} tokens
‚Ä¢ ‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢: $${summary.currentSession.costUSD.toFixed(4)} (${summary.currentSession.costTHB.toFixed(2)} ‡∏ö‡∏≤‡∏ó)
‚Ä¢ ‡πÇ‡∏°‡πÄ‡∏î‡∏•: ${summary.currentSession.provider}/${summary.currentSession.model}

üìà ‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡∏≠‡∏á‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ô‡∏µ‡πâ:
‚Ä¢ Token ‡∏£‡∏ß‡∏°: ${summary.monthlyTotal.tokens.toLocaleString()} tokens
‚Ä¢ ‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢‡∏£‡∏ß‡∏°: $${summary.monthlyTotal.costUSD.toFixed(4)} (${summary.monthlyTotal.costTHB.toFixed(2)} ‡∏ö‡∏≤‡∏ó)
‚Ä¢ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ: ${summary.monthlyTotal.sessions} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á

üîç Google Search Quota ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ:
‚Ä¢ ‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡πâ‡∏ß: ${quotaStatus.used}/${quotaStatus.limit} ‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô (${quotaStatus.percentage}%)
‚Ä¢ ‡∏ü‡∏£‡∏µ: ${quotaStatus.freeUsed}/${quotaStatus.freeLimit} ‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô
‚Ä¢ ‡∏Ñ‡∏¥‡∏î‡∏Ñ‡πà‡∏≤: ${quotaStatus.paidUsed} ‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô
‚Ä¢ ‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ: ${quotaStatus.todayCost.toFixed(2)} ‡∏ö‡∏≤‡∏ó
‚Ä¢ ‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ô‡∏µ‡πâ: ${quotaStatus.monthlyCost.toFixed(2)} ‡∏ö‡∏≤‡∏ó
‚Ä¢ ‡πÄ‡∏´‡∏•‡∏∑‡∏≠: ${quotaStatus.remaining} ‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô
‚Ä¢ Reset: ${quotaStatus.resetTime}

‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡πÅ‡∏•‡∏Å‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô: 1 USD = ${summary.currentSession.exchangeRate || 35} THB
`.trim();

            return summaryText;
        } catch (error) {
            logger.error('‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏£‡∏∏‡∏õ‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢', error.message);
            return `
üí∞ ‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢

‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ
`.trim();
        }
    }
}

module.exports = AIAnalysisService;