const fs = require('fs').promises;
const path = require('path');
const winston = require('winston');

// ‡∏™‡∏£‡πâ‡∏≤‡∏á logger ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Cost Tracking
const logger = winston.createLogger({
    level: process.env.LOG_LEVEL || 'info',
    format: winston.format.combine(
        winston.format.timestamp(),
        winston.format.printf(({ timestamp, level, message }) => {
            return `${timestamp} [COST-TRACKER] [${level.toUpperCase()}]: ${message}`;
        })
    ),
    transports: [
        new winston.transports.Console()
    ]
});

class CostTrackingService {
    constructor() {
        this.costFile = process.env.COST_TRACKING_FILE || 'data/monthly-cost.json';
        this.monthlyLimit = parseFloat(process.env.MONTHLY_COST_LIMIT_THB) || 500;
        this.forceFreeModeEnv = process.env.FORCE_FREE_MODE === 'true';
        
        // ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô API (‡∏ö‡∏≤‡∏ó‡∏ï‡πà‡∏≠ request)
        this.apiCosts = {
            openai: {
                'gpt-3.5-turbo': 0.05,      // ~$0.0015/request ‚âà 0.05 ‡∏ö‡∏≤‡∏ó
                'gpt-4': 0.80,              // ~$0.025/request ‚âà 0.80 ‡∏ö‡∏≤‡∏ó
                'gpt-4-turbo': 0.20         // ~$0.006/request ‚âà 0.20 ‡∏ö‡∏≤‡∏ó
            },
            gemini: {
                'gemini-2.5-flash': 0.001,  // ‡∏ü‡∏£‡∏µ‡∏™‡πà‡∏ß‡∏ô‡πÉ‡∏´‡∏ç‡πà
                'gemini-2.5-pro': 0.01      // ~$0.0003/request ‚âà 0.01 ‡∏ö‡∏≤‡∏ó
            }
        };
    }

    /**
     * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ Free Mode ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
     */
    async shouldUseFreeMode() {
        try {
            // ‡∏ñ‡πâ‡∏≤‡πÉ‡∏ô ENV ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÉ‡∏ä‡πâ Free Mode
            if (this.forceFreeModeEnv) {
                logger.info('üÜì Force Free Mode enabled via environment');
                return true;
            }

            const monthlySpent = await this.getMonthlySpent();
            const shouldUseFree = monthlySpent >= this.monthlyLimit;
            
            if (shouldUseFree) {
                logger.warn(`üí∞ Monthly cost limit reached: ${monthlySpent}/${this.monthlyLimit} THB - Switching to FREE mode`);
            } else {
                logger.info(`üí∞ Monthly cost: ${monthlySpent}/${this.monthlyLimit} THB - Paid APIs available`);
            }
            
            return shouldUseFree;
        } catch (error) {
            logger.error(`‚ùå Error checking free mode status: ${error.message}`);
            return true; // Default to free mode on error
        }
    }

    /**
     * ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢ API
     */
    async trackApiUsage(provider, model, costTHB = 0) {
        try {
            const costData = await this.loadCostData();
            const currentMonth = this.getCurrentMonth();
            
            if (!costData[currentMonth]) {
                costData[currentMonth] = {
                    totalCost: 0,
                    apiUsage: {}
                };
            }
            
            if (!costData[currentMonth].apiUsage[provider]) {
                costData[currentMonth].apiUsage[provider] = {};
            }
            
            if (!costData[currentMonth].apiUsage[provider][model]) {
                costData[currentMonth].apiUsage[provider][model] = {
                    calls: 0,
                    cost: 0
                };
            }
            
            // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
            costData[currentMonth].apiUsage[provider][model].calls += 1;
            costData[currentMonth].apiUsage[provider][model].cost += costTHB;
            costData[currentMonth].totalCost += costTHB;
            
            await this.saveCostData(costData);
            
            logger.info(`üí∞ API Usage tracked: ${provider}/${model} - Cost: ${costTHB} THB (Total: ${costData[currentMonth].totalCost} THB)`);
            
            return costData[currentMonth];
        } catch (error) {
            logger.error(`‚ùå Error tracking API usage: ${error.message}`);
            throw error;
        }
    }

    /**
     * ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
     */
    async getMonthlySpent() {
        try {
            const costData = await this.loadCostData();
            const currentMonth = this.getCurrentMonth();
            return costData[currentMonth]?.totalCost || 0;
        } catch (error) {
            logger.error(`‚ùå Error getting monthly spent: ${error.message}`);
            return 0;
        }
    }

    /**
     * ‡∏£‡∏±‡∏ö‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
     */
    async getUsageStats() {
        try {
            const costData = await this.loadCostData();
            const currentMonth = this.getCurrentMonth();
            const monthData = costData[currentMonth] || { totalCost: 0, apiUsage: {} };
            
            return {
                currentMonth,
                totalCost: monthData.totalCost,
                remainingBudget: Math.max(0, this.monthlyLimit - monthData.totalCost),
                apiUsage: monthData.apiUsage,
                isOverBudget: monthData.totalCost >= this.monthlyLimit
            };
        } catch (error) {
            logger.error(`‚ùå Error getting usage stats: ${error.message}`);
            return {
                currentMonth: this.getCurrentMonth(),
                totalCost: 0,
                remainingBudget: this.monthlyLimit,
                apiUsage: {},
                isOverBudget: false
            };
        }
    }

    /**
     * ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢ API
     */
    calculateApiCost(provider, model) {
        try {
            if (this.apiCosts[provider] && this.apiCosts[provider][model]) {
                return this.apiCosts[provider][model];
            }
            return 0; // Free API or unknown
        } catch (error) {
            logger.error(`‚ùå Error calculating API cost: ${error.message}`);
            return 0;
        }
    }

    /**
     * ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡πÉ‡∏´‡∏°‡πà (‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà 1 ‡∏Ç‡∏≠‡∏á‡πÄ‡∏î‡∏∑‡∏≠‡∏ô)
     */
    async resetMonthlyData() {
        try {
            const costData = await this.loadCostData();
            const currentMonth = this.getCurrentMonth();
            
            // ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πà‡∏≤‡∏Å‡∏ß‡πà‡∏≤ 12 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
            const now = new Date();
            Object.keys(costData).forEach(month => {
                const monthDate = new Date(month + '-01');
                const monthsAgo = (now.getFullYear() - monthDate.getFullYear()) * 12 + 
                                  now.getMonth() - monthDate.getMonth();
                if (monthsAgo > 12) {
                    delete costData[month];
                }
            });
            
            await this.saveCostData(costData);
            logger.info(`üîÑ Monthly cost data reset completed for ${currentMonth}`);
            
            return true;
        } catch (error) {
            logger.error(`‚ùå Error resetting monthly data: ${error.message}`);
            return false;
        }
    }

    // ===== Private Methods =====

    getCurrentMonth() {
        const now = new Date();
        return `${now.getFullYear()}-${String(now.getMonth() + 1).padStart(2, '0')}`;
    }

    async loadCostData() {
        try {
            // ‡∏™‡∏£‡πâ‡∏≤‡∏á directory ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
            const dir = path.dirname(this.costFile);
            await fs.mkdir(dir, { recursive: true });
            
            try {
                const data = await fs.readFile(this.costFile, 'utf8');
                return JSON.parse(data);
            } catch (readError) {
                if (readError.code === 'ENOENT') {
                    // ‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏°‡πà‡∏°‡∏µ - ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà
                    return {};
                }
                throw readError;
            }
        } catch (error) {
            logger.error(`‚ùå Error loading cost data: ${error.message}`);
            return {};
        }
    }

    async saveCostData(data) {
        try {
            const dir = path.dirname(this.costFile);
            await fs.mkdir(dir, { recursive: true });
            
            await fs.writeFile(this.costFile, JSON.stringify(data, null, 2), 'utf8');
        } catch (error) {
            logger.error(`‚ùå Error saving cost data: ${error.message}`);
            throw error;
        }
    }
}

module.exports = CostTrackingService;