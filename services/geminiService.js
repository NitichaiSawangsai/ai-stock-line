const axios = require('axios');
const logger = require('./logger');

class GeminiService {
    constructor(apiKey, model) {
        this.apiKey = apiKey;
        this.model = model;
        this.baseUrl = 'https://generativelanguage.googleapis.com/v1beta';
        this.isEnabled = apiKey && apiKey !== 'free';
        this.isFree = apiKey === 'free';
    }

    async generateResponse(prompt, maxTokens = 4000) {
        if (this.isFree) {
            // Return mock response for free tier
            return this.generateMockResponse(prompt);
        }

        if (!this.isEnabled) {
            throw new Error('Gemini API key is not configured');
        }

        try {
            logger.api(`‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ Gemini (${this.model})...`);
            
            const response = await axios.post(
                `${this.baseUrl}/models/${this.model}:generateContent?key=${this.apiKey}`,
                {
                    contents: [{
                        parts: [{
                            text: prompt
                        }]
                    }],
                    generationConfig: {
                        maxOutputTokens: 8000, // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å 4000 ‡πÄ‡∏õ‡πá‡∏ô 8000
                        temperature: 0.7,
                        candidateCount: 1
                    }
                },
                {
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    timeout: 120000 // 2 minutes
                }
            );

            const result = response.data;
            
            // Log raw response for debugging
            if (!result.candidates || result.candidates.length === 0) {
                logger.warn('Gemini API: ‡πÑ‡∏°‡πà‡∏°‡∏µ candidates ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏™‡∏ô‡∏≠‡∏á');
                logger.debug('Gemini Response:', JSON.stringify(result, null, 2));
                
                // Check for blocked content
                if (result.promptFeedback?.blockReason) {
                    throw new Error(`Gemini blocked content: ${result.promptFeedback.blockReason}`);
                }
                
                // Return empty response instead of throwing error
                return {
                    content: '‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢ ‡∏£‡∏∞‡∏ö‡∏ö AI ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á',
                    usage: { inputTokens: 0, outputTokens: 0, totalTokens: 0 },
                    model: this.model,
                    provider: 'gemini'
                };
            }

            const candidate = result.candidates[0];
            const content = candidate?.content?.parts?.[0]?.text;
            
            if (!content || content.trim().length === 0) {
                logger.warn('Gemini API: ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏™‡∏ô‡∏≠‡∏á');
                
                // Check finish reason
                if (candidate?.finishReason) {
                    logger.warn(`Gemini finish reason: ${candidate.finishReason}`);
                    
                    if (candidate.finishReason === 'SAFETY') {
                        throw new Error('Content blocked by Gemini safety filters');
                    } else if (candidate.finishReason === 'MAX_TOKENS') {
                        throw new Error('Response truncated due to max tokens limit');
                    }
                }
                
                // Return fallback response
                return {
                    content: '‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢ ‡∏£‡∏∞‡∏ö‡∏ö AI ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á',
                    usage: { inputTokens: 0, outputTokens: 0, totalTokens: 0 },
                    model: this.model,
                    provider: 'gemini'
                };
            }

            // Estimate token usage (Gemini doesn't always provide exact counts)
            const estimatedInputTokens = Math.ceil(prompt.length / 4);
            const estimatedOutputTokens = Math.ceil(content.length / 4);

            logger.api(`Gemini ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì Input: ${estimatedInputTokens}, Output: ${estimatedOutputTokens})`);
            
            return {
                content: content,
                usage: {
                    inputTokens: estimatedInputTokens,
                    outputTokens: estimatedOutputTokens,
                    totalTokens: estimatedInputTokens + estimatedOutputTokens
                },
                model: this.model,
                provider: 'gemini'
            };

        } catch (error) {
            logger.error('‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î Gemini', error.response?.data || error.message);
            throw new Error(`Gemini API Error: ${error.response?.data?.error?.message || error.message}`);
        }
    }

    generateMockResponse(prompt) {
        logger.info('‡πÉ‡∏ä‡πâ Gemini Free Tier (Mock Response)');
        
        const mockContent = `
üì¢ ‡∏™‡∏£‡∏∏‡∏õ‡∏î‡πà‡∏ß‡∏ô! ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏û‡∏≠‡∏£‡πå‡∏ï‡∏•‡∏á‡∏ó‡∏∏‡∏ô‡πÅ‡∏•‡∏∞‡∏Ç‡πà‡∏≤‡∏ß‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ (27 ‡∏ï.‡∏Ñ. 2568)

‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: 27/10/2568
‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à AI ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå: 7/10 (‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≥‡∏•‡∏≠‡∏á)

==================================================================
üåç ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà 1: ‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πà‡∏≤‡∏ß‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç (5 ‡∏Ç‡πà‡∏≤‡∏ß/‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠)
==================================================================

üìà ‡∏Ç‡πà‡∏≤‡∏ß‡πÄ‡∏®‡∏£‡∏©‡∏ê‡∏Å‡∏¥‡∏à (‡πÑ‡∏ó‡∏¢‡πÅ‡∏•‡∏∞‡∏ï‡πà‡∏≤‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®)
--------------------------------------------------
1. **‡∏ï‡∏•‡∏≤‡∏î‡∏´‡∏∏‡πâ‡∏ô‡πÇ‡∏•‡∏Å‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏±‡∏ß‡πÉ‡∏ô‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏ö‡∏ß‡∏Å**
   * ‡∏™‡∏£‡∏∏‡∏õ: ‡∏ï‡∏•‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏±‡πà‡∏ß‡πÇ‡∏•‡∏Å‡∏°‡∏µ‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡πÄ‡∏ä‡∏¥‡∏á‡∏ö‡∏ß‡∏Å‡∏à‡∏≤‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏≤‡∏î‡∏´‡∏ß‡∏±‡∏á‡∏Å‡∏≤‡∏£‡∏ü‡∏∑‡πâ‡∏ô‡∏ï‡∏±‡∏ß‡∏ó‡∏≤‡∏á‡πÄ‡∏®‡∏£‡∏©‡∏ê‡∏Å‡∏¥‡∏à
   * URL: [‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≥‡∏•‡∏≠‡∏á] | ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏ñ‡∏∑‡∏≠: 7/10

2. **‡πÄ‡∏ü‡∏î‡∏™‡∏´‡∏£‡∏±‡∏ê‡∏Ø ‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏ô‡πÇ‡∏¢‡∏ö‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô**
   * ‡∏™‡∏£‡∏∏‡∏õ: ‡∏ô‡∏±‡∏Å‡∏•‡∏á‡∏ó‡∏∏‡∏ô‡∏à‡∏±‡∏ö‡∏ï‡∏≤‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡∏Å‡∏•‡∏≤‡∏á‡∏™‡∏´‡∏£‡∏±‡∏ê‡∏Ø ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏î‡∏≠‡∏Å‡πÄ‡∏ö‡∏µ‡πâ‡∏¢
   * URL: [‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≥‡∏•‡∏≠‡∏á] | ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏ñ‡∏∑‡∏≠: 8/10

‚öîÔ∏è ‡∏Ç‡πà‡∏≤‡∏ß‡∏™‡∏á‡∏Ñ‡∏£‡∏≤‡∏°/‡∏†‡∏π‡∏°‡∏¥‡∏£‡∏±‡∏ê‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå
--------------------------------------------------
1. **‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏∂‡∏á‡πÄ‡∏Ñ‡∏£‡∏µ‡∏¢‡∏î‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏≤‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®**
   * ‡∏™‡∏£‡∏∏‡∏õ: ‡∏†‡∏≤‡∏ß‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏°‡πà‡πÅ‡∏ô‡πà‡∏ô‡∏≠‡∏ô‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏≤‡∏™‡πà‡∏á‡∏ú‡∏•‡∏ï‡πà‡∏≠‡∏ï‡∏•‡∏≤‡∏î‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÇ‡∏†‡∏Ñ‡∏†‡∏±‡∏ì‡∏ë‡πå
   * URL: [‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≥‡∏•‡∏≠‡∏á] | ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏ñ‡∏∑‡∏≠: 7/10

ü•á ‡∏Ç‡πà‡∏≤‡∏ß‡∏ó‡∏≠‡∏á‡∏Ñ‡∏≥‡πÅ‡∏•‡∏∞‡∏£‡∏≤‡∏Ñ‡∏≤
--------------------------------------------------
* **‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏≠‡∏á‡∏Ñ‡∏≥‡πÅ‡∏ó‡πà‡∏á‡∏Ç‡∏≤‡∏¢‡∏≠‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ: 64,000 ‡∏ö‡∏≤‡∏ó (‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì)**
* ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á 3 ‡∏ß‡∏±‡∏ô: ‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì 63,800 ‡∏ö‡∏≤‡∏ó

üìà ‡∏Ç‡πà‡∏≤‡∏ß‡∏´‡∏∏‡πâ‡∏ô‡πÑ‡∏ó‡∏¢/‡∏™‡∏´‡∏£‡∏±‡∏ê‡∏Ø ‡πÅ‡∏•‡∏∞‡∏£‡∏≤‡∏Ñ‡∏≤
--------------------------------------------------
* VOO ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: $620 (‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì)
* NVDA ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: $185 (‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì)

üíé ‡∏Ç‡πà‡∏≤‡∏ß‡∏Ñ‡∏£‡∏¥‡∏õ‡πÇ‡∏ï ‡πÅ‡∏•‡∏∞‡∏£‡∏≤‡∏Ñ‡∏≤
--------------------------------------------------
* BTC ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: $115,000 (‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì)

üí± ‡∏Ç‡πà‡∏≤‡∏ß‡∏™‡∏Å‡∏∏‡∏•‡πÄ‡∏á‡∏¥‡∏ô ‡πÅ‡∏•‡∏∞‡∏£‡∏≤‡∏Ñ‡∏≤
--------------------------------------------------
* THB ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: 32.70 ‡∏ö‡∏≤‡∏ó/‡∏î‡∏≠‡∏•‡∏•‡∏≤‡∏£‡πå (‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì)

==================================================================
üöÄ ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà 2: ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏û‡∏≠‡∏£‡πå‡∏ï‡∏•‡∏á‡∏ó‡∏∏‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì (‡πÄ‡∏ô‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥)
==================================================================

‚ö†Ô∏è ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ‡∏ô‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö
‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏ä‡πâ API key ‡∏à‡∏£‡∏¥‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡πÅ‡∏•‡∏∞‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î

‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡πÅ‡∏•‡∏∞‡πÇ‡∏≠‡∏Å‡∏≤‡∏™ (‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≥‡∏•‡∏≠‡∏á):
* ‡∏´‡∏∏‡πâ‡∏ô‡∏™‡∏´‡∏£‡∏±‡∏ê‡∏Ø: ‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏Å‡∏≥‡πÑ‡∏£‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á (6/10)
* ‡∏ó‡∏≠‡∏á‡∏Ñ‡∏≥: ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏ï‡πà‡∏≥ (3/10)
* ‡∏Ñ‡∏£‡∏¥‡∏õ‡πÇ‡∏ï: ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏™‡∏π‡∏á (8/10)

==================================================================
`;

        return {
            content: mockContent.trim(),
            usage: {
                inputTokens: Math.ceil(prompt.length / 4),
                outputTokens: Math.ceil(mockContent.length / 4),
                totalTokens: Math.ceil((prompt.length + mockContent.length) / 4)
            },
            model: this.model,
            provider: 'gemini'
        };
    }

    async generateResponseInChunks(prompt, chunkSize = 3000) {
        if (this.isFree) {
            return this.generateMockResponse(prompt);
        }

        // Split prompt into smaller chunks if too long
        const promptChunks = this.splitPrompt(prompt, chunkSize);
        const responses = [];
        
        for (let i = 0; i < promptChunks.length; i++) {
            logger.process(`‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà ${i + 1}/${promptChunks.length}...`);
            const response = await this.generateResponse(promptChunks[i]);
            responses.push(response);
            
            // Small delay between requests
            if (i < promptChunks.length - 1) {
                await new Promise(resolve => setTimeout(resolve, 1000));
            }
        }
        
        return this.combineResponses(responses);
    }

    splitPrompt(prompt, chunkSize) {
        // Simple approach: split by sentences and group into chunks
        const sentences = prompt.split('\n').filter(s => s.trim());
        const chunks = [];
        let currentChunk = '';
        
        for (const sentence of sentences) {
            if ((currentChunk + sentence).length > chunkSize && currentChunk) {
                chunks.push(currentChunk.trim());
                currentChunk = sentence;
            } else {
                currentChunk += (currentChunk ? '\n' : '') + sentence;
            }
        }
        
        if (currentChunk) {
            chunks.push(currentChunk.trim());
        }
        
        return chunks.length > 0 ? chunks : [prompt];
    }

    combineResponses(responses) {
        const combinedContent = responses.map(r => r.content).join('\n\n');
        const totalUsage = responses.reduce((acc, r) => ({
            inputTokens: acc.inputTokens + r.usage.inputTokens,
            outputTokens: acc.outputTokens + r.usage.outputTokens,
            totalTokens: acc.totalTokens + r.usage.totalTokens
        }), { inputTokens: 0, outputTokens: 0, totalTokens: 0 });

        return {
            content: combinedContent,
            usage: totalUsage,
            model: responses[0]?.model || this.model,
            provider: 'gemini'
        };
    }
}

module.exports = GeminiService;