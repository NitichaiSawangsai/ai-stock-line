const axios = require('axios');
const winston = require('winston');
const GeminiAnalysisService = require('./geminiAnalysisService');

const logger = winston.createLogger({
  level: 'info',
  format: winston.format.combine(
    winston.format.timestamp(),
    winston.format.printf(({ timestamp, level, message }) => {
      return `${timestamp} [NEWS-ANALYSIS] [${level.toUpperCase()}]: ${message}`;
    })
  ),
  transports: [
    new winston.transports.Console()
  ]
});

class NewsAnalysisService {
  constructor() {
    this.openaiApiKey = process.env.OPENAI_API_KEY;
    this.newsApiKey = process.env.NEWS_API_KEY;
    this.baseUrl = 'https://api.openai.com/v1';
    this.newsApiUrl = 'https://newsapi.org/v2';
    
    // р╣Ар╕Юр╕┤р╣Ир╕б Gemini service р╣Ар╕Ыр╣Зр╕Щ fallback
    this.geminiService = new GeminiAnalysisService();
    this.usingFallback = false;
  }

  async testConnection() {
    // р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕зр╣Ир╕▓р╕Др╕зр╕гр╣Гр╕Кр╣Й AI р╕Яр╕гр╕╡р╣Ар╕Чр╣Ир╕▓р╕Щр╕▒р╣Йр╕Щ
    if (!this.openaiApiKey || this.openaiApiKey === 'sk-your-openai-api-key-here' || this.openaiApiKey === 'disabled') {
      logger.info('ЁЯЖУ Using FREE AI mode only (no paid services)');
      
      try {
        await this.geminiService.testConnection();
        this.usingFallback = true;
        return true;
      } catch (geminiError) {
        // р╣Др╕бр╣Ир╣Бр╕кр╕Фр╕З error р╣Ар╕Юр╕гр╕▓р╕░р╕вр╕▒р╕Зр╣Гр╕Кр╣Йр╕Зр╕▓р╕Щр╣Др╕Фр╣Йр╕Фр╣Йр╕зр╕в mock
        this.usingFallback = true;
        return true;
      }
    }

    // р╕ер╕нр╕Зр╣Ар╕Кр╕╖р╣Ир╕нр╕бр╕Хр╣Ир╕н ChatGPT р╣Ар╕Йр╕Юр╕▓р╕░р╕Бр╕гр╕Ур╕╡р╕Чр╕╡р╣Ир╕бр╕╡ API key р╕Ир╕гр╕┤р╕З
    try {
      const response = await axios.post(`${this.baseUrl}/chat/completions`, {
        model: "gpt-3.5-turbo",
        messages: [{ role: "user", content: "Test" }],
        max_tokens: 5
      }, {
        headers: {
          'Authorization': `Bearer ${this.openaiApiKey}`,
          'Content-Type': 'application/json'
        },
        timeout: 8000
      });
      
      logger.info('тЬЕ ChatGPT API connection successful');
      this.usingFallback = false;
      return response.status === 200;
      
    } catch (error) {
      // р╣Др╕бр╣Ир╣Бр╕кр╕Фр╕З ChatGPT error р╣Ар╕Юр╕гр╕▓р╕░р╣Ар╕гр╕▓р╕Хр╕▒р╣Йр╕Зр╣Гр╕Ир╣Др╕бр╣Ир╣Гр╕Кр╣Й
      
      // р╕кр╕ер╕▒р╕Ър╣Др╕Ыр╣Гр╕Кр╣Й Gemini р╣Бр╕Ър╕Ър╣Ар╕Зр╕╡р╕вр╕Ър╣Ж
      try {
        await this.geminiService.testConnection();
        this.usingFallback = true;
        return true;
      } catch (geminiError) {
        // р╣Др╕бр╣Ир╣Бр╕кр╕Фр╕З error р╣Ар╕Юр╕гр╕▓р╕░р╕вр╕▒р╕Зр╣Гр╕Кр╣Йр╕Зр╕▓р╕Щр╣Др╕Фр╣Йр╕Фр╣Йр╕зр╕в mock
        this.usingFallback = true;
        return true;
      }
    }
  }

  async analyzeHighRiskStocks(stocks) {
    logger.info(`ЁЯФН Analyzing ${stocks.length} stocks for high-risk scenarios...`);
    
    const highRiskStocks = [];
    
    for (const stock of stocks) {
      try {
        const news = await this.getStockNews(stock.symbol, stock.type);
        if (news.length === 0) continue;
        
        const riskAnalysis = await this.analyzeRiskWithAI(stock, news);
        
        if (riskAnalysis.isHighRisk) {
          highRiskStocks.push({
            ...stock,
            riskAnalysis,
            news: news.slice(0, 3) // Top 3 news items
          });
        }
        
        // Add delay to avoid rate limits
        await this.delay(1000);
        
      } catch (error) {
        logger.error(`тЭМ Error analyzing ${stock.symbol}: ${error.message}`);
      }
    }
    
    logger.info(`ЁЯЪи Found ${highRiskStocks.length} high-risk stocks`);
    return highRiskStocks;
  }

  async analyzeStockOpportunities(stocks) {
    logger.info(`ЁЯУИ Analyzing ${stocks.length} stocks for opportunities...`);
    
    const opportunities = [];
    
    for (const stock of stocks) {
      try {
        const news = await this.getStockNews(stock.symbol, stock.type);
        if (news.length === 0) continue;
        
        const opportunityAnalysis = await this.analyzeOpportunityWithAI(stock, news);
        
        if (opportunityAnalysis.isOpportunity) {
          opportunities.push({
            ...stock,
            opportunityAnalysis,
            news: news.slice(0, 3)
          });
        }
        
        // Add delay to avoid rate limits
        await this.delay(1000);
        
      } catch (error) {
        logger.error(`тЭМ Error analyzing opportunity for ${stock.symbol}: ${error.message}`);
      }
    }
    
    logger.info(`ЁЯФе Found ${opportunities.length} opportunities`);
    return opportunities;
  }

  async getStockNews(symbol, type) {
    try {
      let query = '';
      
      switch (type) {
        case 'р╕лр╕╕р╣Йр╕Щ':
          query = `${symbol} stock news earnings financial`;
          break;
        case 'р╕кр╕Бр╕╕р╕ер╣Ар╕Зр╕┤р╕Щр╕Др╕гр╕┤р╕Ыр╣Вр╕Х':
          query = `${symbol} cryptocurrency bitcoin crypto news`;
          break;
        case 'р╕Чр╕нр╕З':
          query = 'gold price news market analysis';
          break;
        case 'р╕кр╕Бр╕╕р╕ер╣Ар╕Зр╕┤р╕Щ':
          query = `${symbol} currency exchange rate news`;
          break;
        default:
          query = `${symbol} financial news market`;
      }

      // Get news from multiple sources
      const newsData = await Promise.allSettled([
        this.getNewsFromNewsAPI(query),
        this.getNewsFromGoogleTrends(symbol),
        this.getNewsFromFinancialSources(symbol, type)
      ]);

      let allNews = [];
      newsData.forEach(result => {
        if (result.status === 'fulfilled' && result.value) {
          allNews = allNews.concat(result.value);
        }
      });

      // Remove duplicates and sort by relevance
      const uniqueNews = this.removeDuplicateNews(allNews);
      return uniqueNews.slice(0, 10); // Top 10 news items
      
    } catch (error) {
      logger.error(`тЭМ Error getting news for ${symbol}: ${error.message}`);
      return [];
    }
  }

  async getNewsFromNewsAPI(query) {
    try {
      if (!this.newsApiKey) {
        return await this.getNewsFromFreeAPI(query);
      }

      const response = await axios.get(`${this.newsApiUrl}/everything`, {
        params: {
          q: query,
          language: 'en',
          sortBy: 'publishedAt',
          pageSize: 20,
          apiKey: this.newsApiKey
        }
      });

      return response.data.articles.map(article => ({
        title: article.title,
        description: article.description,
        url: article.url,
        source: article.source.name,
        publishedAt: article.publishedAt,
        relevanceScore: 0.8
      }));
      
    } catch (error) {
      // р╣Др╕бр╣Ир╣Бр╕кр╕Фр╕З NewsAPI error р╣Ар╕Юр╕гр╕▓р╕░р╣Ар╕гр╕▓р╕бр╕╡ fallback р╕Чр╕╡р╣Ир╣Гр╕Кр╣Йр╕Зр╕▓р╕Щр╣Др╕Фр╣Й
      return await this.getNewsFromFreeAPI(query);
    }
  }

  async getNewsFromFreeAPI(query) {
    // Free alternative news sources
    try {
      // Using multiple free sources
      const sources = [
        `https://api.rss2json.com/v1/api.json?rss_url=https://feeds.finance.yahoo.com/rss/2.0/headline`,
        `https://api.rss2json.com/v1/api.json?rss_url=https://www.reuters.com/markets/global-markets/rss`
      ];

      const newsPromises = sources.map(async (url) => {
        try {
          const response = await axios.get(url, { timeout: 10000 });
          return response.data.items || [];
        } catch {
          return [];
        }
      });

      const results = await Promise.allSettled(newsPromises);
      let allNews = [];
      
      results.forEach(result => {
        if (result.status === 'fulfilled') {
          allNews = allNews.concat(result.value);
        }
      });

      // Filter news related to the query
      const filteredNews = allNews.filter(item => 
        item.title && item.title.toLowerCase().includes(query.toLowerCase().split(' ')[0])
      );

      return filteredNews.map(item => ({
        title: item.title,
        description: item.description || item.content,
        url: item.link,
        source: 'RSS Feed',
        publishedAt: item.pubDate,
        relevanceScore: 0.6
      }));
      
    } catch (error) {
      logger.error(`тЭМ Free news API failed: ${error.message}`);
      return [];
    }
  }

  async getNewsFromGoogleTrends(symbol) {
    // Placeholder for Google Trends integration
    // In production, you might want to use Google Trends API or web scraping
    return [];
  }

  async getNewsFromFinancialSources(symbol, type) {
    // Placeholder for additional financial news sources
    // Could include Yahoo Finance, Bloomberg RSS, etc.
    return [];
  }

  async analyzeRiskWithAI(stock, news) {
    // р╕Цр╣Йр╕▓р╣Гр╕Кр╣Й fallback р╕лр╕гр╕╖р╕н disable ChatGPT р╣Гр╕лр╣Йр╣Гр╕Кр╣Й Gemini р╣Ар╕ер╕в
    if (this.usingFallback || !this.openaiApiKey || this.openaiApiKey === 'disabled') {
      logger.info(`ЁЯЖУ Using FREE Gemini AI for risk analysis of ${stock.symbol}`);
      return await this.geminiService.analyzeRiskWithAI(stock, news);
    }

    // р╕ер╕нр╕З ChatGPT р╕Бр╣Ир╕нр╕Щ (р╣Ар╕Йр╕Юр╕▓р╕░р╕Бр╕гр╕Ур╕╡р╕Чр╕╡р╣Ир╕бр╕╡ API key р╕Ир╕гр╕┤р╕З)
    try {
      const newsTexts = news.map(n => `${n.title}: ${n.description}`).join('\n\n');
      
      const prompt = `р╕зр╕┤р╣Ар╕Др╕гр╕▓р╕░р╕лр╣Мр╕Др╕зр╕▓р╕бр╣Ар╕кр╕╡р╣Ир╕вр╕Зр╕Вр╕нр╕Зр╕лр╕╕р╣Йр╕Щ/р╕кр╕┤р╕Щр╕Чр╕гр╕▒р╕Юр╕вр╣Мр╕Хр╣Ир╕нр╣Др╕Ыр╕Щр╕╡р╣Й:

р╕кр╕┤р╕Щр╕Чр╕гр╕▒р╕Юр╕вр╣М: ${stock.symbol} (${stock.type})
р╕Ир╕│р╕Щр╕зр╕Щр╕Чр╕╡р╣Ир╕ер╕Зр╕Чр╕╕р╕Щ: ${stock.amount} ${stock.unit}

р╕Вр╣Ир╕▓р╕зр╕ер╣Ир╕▓р╕кр╕╕р╕Ф:
${newsTexts}

р╕Бр╕гр╕╕р╕Ур╕▓р╕зр╕┤р╣Ар╕Др╕гр╕▓р╕░р╕лр╣Мр╣Бр╕ер╕░р╕Хр╕нр╕Ър╣Гр╕Щр╕гр╕╣р╕Ыр╣Бр╕Ър╕Ъ JSON:
{
  "isHighRisk": boolean (true р╕Цр╣Йр╕▓р╕бр╕╡р╕Др╕зр╕▓р╕бр╣Ар╕кр╕╡р╣Ир╕вр╕Зр╕Чр╕╡р╣Ир╣Ар╕Зр╕┤р╕Щр╕Ир╕░р╕лр╕▓р╕вр╕лр╕бр╕Фр╕лр╕гр╕╖р╕нр╕лр╕╕р╣Йр╕Щр╕нр╕▓р╕Ир╕Ыр╕┤р╕Фр╕Хр╕▒р╕з),
  "riskLevel": "low|medium|high|critical",
  "summary": "р╕кр╕гр╕╕р╕Ыр╕кр╕Цр╕▓р╕Щр╕Бр╕▓р╕гр╕Ур╣Мр╣Гр╕Щр╕ар╕▓р╕йр╕▓р╣Др╕Чр╕в",
  "threats": ["р╕гр╕▓р╕вр╕Бр╕▓р╕гр╕ар╕▒р╕вр╕Др╕╕р╕Бр╕Др╕▓р╕б"],
  "confidenceScore": 0.0-1.0,
  "recommendation": "р╕Др╕│р╣Бр╕Щр╕░р╕Щр╕│",
  "keyNews": "р╕Вр╣Ир╕▓р╕зр╕кр╕│р╕Др╕▒р╕Нр╕Чр╕╡р╣Ир╕кр╕╕р╕Ф",
  "sourceUrl": "URL р╕Вр╕нр╕Зр╕Вр╣Ир╕▓р╕зр╕лр╕ер╕▒р╕Б"
}

р╣Вр╕Ыр╕гр╕Фр╣Гр╕лр╣Йр╕Др╕зр╕▓р╕бр╕кр╕│р╕Др╕▒р╕Нр╕Бр╕▒р╕Ъ:
1. р╕Вр╣Ир╕▓р╕зр╕Бр╕▓р╕гр╕ер╣Йр╕бр╕ер╕░р╕ер╕▓р╕в р╕лр╕гр╕╖р╕нр╕Ыр╕┤р╕Фр╕Бр╕┤р╕Ир╕Бр╕▓р╕г
2. р╕Бр╕▓р╕гр╕Цр╕╣р╕Бр╣Бр╕Ър╕Щр╕лр╕гр╕╖р╕нр╕лр╣Йр╕▓р╕бр╕кр╣Ир╕Зр╕нр╕нр╕Б
3. р╕Бр╕▓р╕гр╕Яр╣Йр╕нр╕Зр╕гр╣Йр╕нр╕Зр╕Др╕гр╕▒р╣Йр╕Зр╣Гр╕лр╕Нр╣И
4. р╕Бр╕▓р╕гр╣Ар╕Ыр╕ер╕╡р╣Ир╕вр╕Щр╣Бр╕Ыр╕ер╕Зр╕Бр╕Ор╕гр╕░р╣Ар╕Ър╕╡р╕вр╕Ър╕Чр╕╡р╣Ир╕гр╕╕р╕Щр╣Бр╕гр╕З
5. р╕зр╕┤р╕Бр╕др╕Хр╕Бр╕▓р╕гр╣Ар╕Зр╕┤р╕Щ`;

      const response = await axios.post(`${this.baseUrl}/chat/completions`, {
        model: "gpt-3.5-turbo",
        messages: [{ role: "user", content: prompt }],
        max_tokens: 1000,
        temperature: 0.3
      }, {
        headers: {
          'Authorization': `Bearer ${this.openaiApiKey}`,
          'Content-Type': 'application/json'
        },
        timeout: 15000
      });

      const content = response.data.choices[0].message.content;
      return JSON.parse(content);
      
    } catch (error) {
      // р╣Др╕бр╣Ир╣Бр╕кр╕Фр╕З ChatGPT error р╣Ар╕Юр╕гр╕▓р╕░р╣Ар╕гр╕▓р╕бр╕╡ Gemini fallback
      
      // р╕кр╕ер╕▒р╕Ър╣Др╕Ыр╣Гр╕Кр╣Й Gemini р╣Бр╕Ър╕Ър╣Ар╕Зр╕╡р╕вр╕Ър╣Ж
      try {
        return await this.geminiService.analyzeRiskWithAI(stock, news);
      } catch (geminiError) {
        // р╣Др╕бр╣Ир╣Бр╕кр╕Фр╕З error р╣Ар╕Юр╕гр╕▓р╕░ mock responses р╣Гр╕Кр╣Йр╕Зр╕▓р╕Щр╣Др╕Фр╣Й
        return {
          isHighRisk: false,
          riskLevel: "unknown",
          summary: "р╣Др╕бр╣Ир╕кр╕▓р╕бр╕▓р╕гр╕Цр╕зр╕┤р╣Ар╕Др╕гр╕▓р╕░р╕лр╣Мр╣Др╕Фр╣Йр╣Гр╕Щр╕Вр╕Ур╕░р╕Щр╕╡р╣Й р╣Ар╕Щр╕╖р╣Ир╕нр╕Зр╕Ир╕▓р╕Бр╕гр╕░р╕Ър╕Ъ AI р╕Чр╕▒р╣Йр╕Зр╕лр╕бр╕Фр╕бр╕╡р╕Ыр╕▒р╕Нр╕лр╕▓",
          threats: ["р╣Др╕бр╣Ир╕кр╕▓р╕бр╕▓р╕гр╕Цр╕гр╕░р╕Ър╕╕р╣Др╕Фр╣Й"],
          confidenceScore: 0,
          recommendation: "р╕Хр╕┤р╕Фр╕Хр╕▓р╕бр╕Вр╣Ир╕▓р╕зр╕кр╕▓р╕гр╕Фр╣Йр╕зр╕вр╕Хр╕Щр╣Ар╕нр╕З",
          keyNews: "р╕гр╕░р╕Ър╕Ър╕зр╕┤р╣Ар╕Др╕гр╕▓р╕░р╕лр╣Мр╕Вр╕▒р╕Фр╕Вр╣Йр╕нр╕З",
          sourceUrl: "unavailable"
        };
      }
    }
  }

  async analyzeOpportunityWithAI(stock, news) {
    // р╕Цр╣Йр╕▓р╣Гр╕Кр╣Й fallback р╕лр╕гр╕╖р╕н disable ChatGPT р╣Гр╕лр╣Йр╣Гр╕Кр╣Й Gemini р╣Ар╕ер╕в
    if (this.usingFallback || !this.openaiApiKey || this.openaiApiKey === 'disabled') {
      logger.info(`ЁЯЖУ Using FREE Gemini AI for opportunity analysis of ${stock.symbol}`);
      return await this.geminiService.analyzeOpportunityWithAI(stock, news);
    }

    // р╕ер╕нр╕З ChatGPT р╕Бр╣Ир╕нр╕Щ (р╣Ар╕Йр╕Юр╕▓р╕░р╕Бр╕гр╕Ур╕╡р╕Чр╕╡р╣Ир╕бр╕╡ API key р╕Ир╕гр╕┤р╕З)
    try {
      const newsTexts = news.map(n => `${n.title}: ${n.description}`).join('\n\n');
      
      const prompt = `р╕зр╕┤р╣Ар╕Др╕гр╕▓р╕░р╕лр╣Мр╣Вр╕нр╕Бр╕▓р╕кр╕Бр╕▓р╕гр╕ер╕Зр╕Чр╕╕р╕Щр╕Вр╕нр╕Зр╕лр╕╕р╣Йр╕Щ/р╕кр╕┤р╕Щр╕Чр╕гр╕▒р╕Юр╕вр╣Мр╕Хр╣Ир╕нр╣Др╕Ыр╕Щр╕╡р╣Й:

р╕кр╕┤р╕Щр╕Чр╕гр╕▒р╕Юр╕вр╣М: ${stock.symbol} (${stock.type})
р╕Ир╕│р╕Щр╕зр╕Щр╕Чр╕╡р╣Ир╕ер╕Зр╕Чр╕╕р╕Щ: ${stock.amount} ${stock.unit}

р╕Вр╣Ир╕▓р╕зр╕ер╣Ир╕▓р╕кр╕╕р╕Ф:
${newsTexts}

р╕Бр╕гр╕╕р╕Ур╕▓р╕зр╕┤р╣Ар╕Др╕гр╕▓р╕░р╕лр╣Мр╣Бр╕ер╕░р╕Хр╕нр╕Ър╣Гр╕Щр╕гр╕╣р╕Ыр╣Бр╕Ър╕Ъ JSON:
{
  "isOpportunity": boolean (true р╕Цр╣Йр╕▓р╕бр╕╡р╣Вр╕нр╕Бр╕▓р╕кр╕гр╕▓р╕Др╕▓р╕Ир╕░р╕Вр╕╢р╣Йр╕Щ),
  "opportunityLevel": "low|medium|high|excellent",
  "summary": "р╕кр╕гр╕╕р╕Ыр╣Вр╕нр╕Бр╕▓р╕кр╣Гр╕Щр╕ар╕▓р╕йр╕▓р╣Др╕Чр╕в",
  "positiveFactors": ["р╕Ыр╕▒р╕Ир╕Ир╕▒р╕вр╕Ър╕зр╕Б"],
  "confidenceScore": 0.0-1.0,
  "timeframe": "р╕гр╕░р╕вр╕░р╣Ар╕зр╕ер╕▓р╕Чр╕╡р╣Ир╕Др╕▓р╕Фр╕зр╣Ир╕▓р╕Ир╕░р╣Ар╕лр╣Зр╕Щр╕Ьр╕е",
  "priceTarget": "р╣Ар╕Ыр╣Йр╕▓р╕лр╕бр╕▓р╕вр╕гр╕▓р╕Др╕▓р╕Чр╕╡р╣Ир╕Др╕▓р╕Фр╕лр╕зр╕▒р╕З",
  "keyNews": "р╕Вр╣Ир╕▓р╕зр╕Фр╕╡р╕Чр╕╡р╣Ир╕кр╕│р╕Др╕▒р╕Нр╕Чр╕╡р╣Ир╕кр╕╕р╕Ф",
  "sourceUrl": "URL р╕Вр╕нр╕Зр╕Вр╣Ир╕▓р╕зр╕лр╕ер╕▒р╕Б"
}

р╣Вр╕Ыр╕гр╕Фр╣Гр╕лр╣Йр╕Др╕зр╕▓р╕бр╕кр╕│р╕Др╕▒р╕Нр╕Бр╕▒р╕Ъ:
1. р╕Бр╕▓р╕гр╣Ар╕Ыр╕┤р╕Фр╣Ар╕Ьр╕вр╕Бр╕│р╣Др╕гр╕Чр╕╡р╣Ир╕Фр╕╡р╕Бр╕зр╣Ир╕▓р╕Др╕▓р╕Ф
2. р╕Вр╣Ир╕▓р╕зр╕Бр╕▓р╕гр╣Ар╕Вр╣Йр╕▓р╕Лр╕╖р╣Йр╕нр╕Бр╕┤р╕Ир╕Бр╕▓р╕гр╕лр╕гр╕╖р╕нр╕Юр╕▒р╕Щр╕Шр╕бр╕┤р╕Хр╕гр╣Гр╕лр╕бр╣И
3. р╕Бр╕▓р╕гр╣Др╕Фр╣Йр╕кр╕▒р╕Нр╕Нр╕▓р╣Гр╕лр╕Нр╣Ир╕лр╕гр╕╖р╕нр╕ер╕╣р╕Бр╕Др╣Йр╕▓р╣Гр╕лр╕бр╣И
4. р╕Щр╕зр╕▒р╕Хр╕Бр╕гр╕гр╕бр╕лр╕гр╕╖р╕нр╕Ьр╕ер╕┤р╕Хр╕ар╕▒р╕Ур╕Ср╣Мр╣Гр╕лр╕бр╣И
5. р╕Бр╕▓р╕гр╣Ар╕Ыр╕ер╕╡р╣Ир╕вр╕Щр╣Бр╕Ыр╕ер╕Зр╕Щр╣Вр╕вр╕Ър╕▓р╕вр╕Чр╕╡р╣Ир╣Ар╕Ыр╣Зр╕Щр╕Ыр╕гр╕░р╣Вр╕вр╕Кр╕Щр╣М`;

      const response = await axios.post(`${this.baseUrl}/chat/completions`, {
        model: "gpt-3.5-turbo",
        messages: [{ role: "user", content: prompt }],
        max_tokens: 1000,
        temperature: 0.3
      }, {
        headers: {
          'Authorization': `Bearer ${this.openaiApiKey}`,
          'Content-Type': 'application/json'
        },
        timeout: 15000
      });

      const content = response.data.choices[0].message.content;
      return JSON.parse(content);
      
    } catch (error) {
      // р╣Др╕бр╣Ир╣Бр╕кр╕Фр╕З ChatGPT error р╣Ар╕Юр╕гр╕▓р╕░р╣Ар╕гр╕▓р╕бр╕╡ Gemini fallback
      
      // р╕кр╕ер╕▒р╕Ър╣Др╕Ыр╣Гр╕Кр╣Й Gemini р╣Бр╕Ър╕Ър╣Ар╕Зр╕╡р╕вр╕Ър╣Ж
      try {
        return await this.geminiService.analyzeOpportunityWithAI(stock, news);
      } catch (geminiError) {
        // р╣Др╕бр╣Ир╣Бр╕кр╕Фр╕З error р╣Ар╕Юр╕гр╕▓р╕░ mock responses р╣Гр╕Кр╣Йр╕Зр╕▓р╕Щр╣Др╕Фр╣Й
        return {
          isOpportunity: false,
          opportunityLevel: "unknown",
          summary: "р╣Др╕бр╣Ир╕кр╕▓р╕бр╕▓р╕гр╕Цр╕зр╕┤р╣Ар╕Др╕гр╕▓р╕░р╕лр╣Мр╣Др╕Фр╣Йр╣Гр╕Щр╕Вр╕Ур╕░р╕Щр╕╡р╣Й р╣Ар╕Щр╕╖р╣Ир╕нр╕Зр╕Ир╕▓р╕Бр╕гр╕░р╕Ър╕Ъ AI р╕Чр╕▒р╣Йр╕Зр╕лр╕бр╕Фр╕бр╕╡р╕Ыр╕▒р╕Нр╕лр╕▓",
          positiveFactors: ["р╣Др╕бр╣Ир╕кр╕▓р╕бр╕▓р╕гр╕Цр╕гр╕░р╕Ър╕╕р╣Др╕Фр╣Й"],
          confidenceScore: 0,
          timeframe: "р╣Др╕бр╣Ир╕Чр╕гр╕▓р╕Ъ",
          priceTarget: "р╣Др╕бр╣Ир╕бр╕╡р╕Вр╣Йр╕нр╕бр╕╣р╕е",
          keyNews: "р╕гр╕░р╕Ър╕Ър╕зр╕┤р╣Ар╕Др╕гр╕▓р╕░р╕лр╣Мр╕Вр╕▒р╕Фр╕Вр╣Йр╕нр╕З",
          sourceUrl: "unavailable"
        };
      }
    }
  }

  removeDuplicateNews(news) {
    const seen = new Set();
    return news.filter(item => {
      const key = item.title?.toLowerCase() || '';
      if (seen.has(key)) {
        return false;
      }
      seen.add(key);
      return true;
    });
  }

  delay(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
  }
}

module.exports = NewsAnalysisService;