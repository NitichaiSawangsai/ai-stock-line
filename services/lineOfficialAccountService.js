const axios = require('axios');
const winston = require('winston');

const logger = winston.createLogger({
  level: 'info',
  format: winston.format.combine(
    winston.format.timestamp(),
    winston.format.printf(({ timestamp, level, message }) => {
      return `${timestamp} [LINE-API] [${level.toUpperCase()}]: ${message}`;
    })
  ),
  transports: [
    new winston.transports.Console()
  ]
});

class LineOfficialAccountService {
  constructor() {
    this.channelAccessToken = process.env.LINE_CHANNEL_ACCESS_TOKEN;
    this.channelSecret = process.env.LINE_CHANNEL_SECRET;
    this.userId = process.env.LINE_USER_ID;
    this.messagingApiUrl = 'https://api.line.me/v2/bot';
    this.timeout = 30000; // 30 seconds timeout
    this.maxRetries = parseInt(process.env.RETRY_MAX_ATTEMPTS) || 3;
    this.retryDelay = parseInt(process.env.RETRY_DELAY_MS) || 2000;
    this.backoffMultiplier = parseFloat(process.env.RETRY_BACKOFF_MULTIPLIER) || 2;
  }

  async withRetry(operation, operationName) {
    const maxRetries = 2; // ‡∏•‡∏î‡∏à‡∏≤‡∏Å 3 ‡πÄ‡∏õ‡πá‡∏ô 2
    let lastError;
    
    for (let attempt = 1; attempt <= maxRetries; attempt++) {
      try {
        const result = await operation();
        if (attempt > 1) {
          logger.info(`‚úÖ ${operationName} succeeded on attempt ${attempt}`);
        }
        return result;
      } catch (error) {
        lastError = error;
        
        // Don't retry on authentication errors
        if (error.response?.status === 401 || error.response?.status === 403) {
          logger.error(`‚ùå ${operationName} failed with auth error: ${error.message}`);
          throw error;
        }
        
        // ‡∏´‡∏¢‡∏∏‡∏î retry ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô rate limit
        if (error.response?.status === 429) {
          logger.error(`‚ùå ${operationName} failed due to rate limit: ${error.message}`);
          throw error;
        }
        
        if (attempt === maxRetries) {
          logger.error(`‚ùå ${operationName} failed after ${maxRetries} attempts: ${error.message}`);
          throw error;
        }
        
        const delay = this.retryDelay * Math.pow(this.backoffMultiplier, attempt - 1);
        logger.warn(`‚ö†Ô∏è ${operationName} failed (attempt ${attempt}/${maxRetries}): ${error.message}. Retrying in ${delay}ms...`);
        
        await this.delay(delay);
      }
    }
    
    throw lastError;
  }

  async testConnection() {
    if (!this.channelAccessToken || this.channelAccessToken === 'your-line-channel-access-token-here') {
      throw new Error('LINE Channel Access Token not configured');
    }
    
    return await this.withRetry(async () => {
      const response = await axios.get(`${this.messagingApiUrl}/info`, {
        headers: {
          'Authorization': `Bearer ${this.channelAccessToken}`
        },
        timeout: this.timeout
      });
      
      if (response.status !== 200) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }
      
      logger.info('‚úÖ LINE Official Account connection successful');
      return true;
    }, 'LINE connection test');
  }

  async sendRiskAlert(highRiskStocks) {
    logger.info(`üö® Sending risk alert for ${highRiskStocks.length} stocks`);
    
    for (const stock of highRiskStocks) {
      try {
        const message = this.formatRiskMessage(stock);
        await this.sendPushMessage(message);
        
        // Add delay between messages
        await this.delay(2000);
        
      } catch (error) {
        logger.error(`‚ùå Failed to send risk alert for ${stock.symbol}: ${error.message}`);
      }
    }
  }

  async sendOpportunityAlert(opportunities) {
    logger.info(`üî• Sending opportunity alert for ${opportunities.length} stocks`);
    
    for (const stock of opportunities) {
      try {
        const message = this.formatOpportunityMessage(stock);
        await this.sendPushMessage(message);
        
        // Add delay between messages
        await this.delay(2000);
        
      } catch (error) {
        logger.error(`‚ùå Failed to send opportunity alert for ${stock.symbol}: ${error.message}`);
      }
    }
  }

  async sendAllNewsAlert(allNewsData) {
    logger.info(`üì∞ Sending comprehensive news for ${allNewsData.length} stocks with AI translation`);
    
    try {
      // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏£‡∏ß‡∏°
      const headerMessage = `üì∞ ‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πà‡∏≤‡∏ß‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∏‡∏ô‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏±‡∏ô
      
üïí ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: ${new Date().toLocaleDateString('th-TH', { timeZone: 'Asia/Bangkok' })}
üìä ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏∏‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ç‡πà‡∏≤‡∏ß: ${allNewsData.length} ‡∏ï‡∏±‡∏ß
‚è∞ ‡πÄ‡∏ß‡∏•‡∏≤: ${new Date().toLocaleTimeString('th-TH', { timeZone: 'Asia/Bangkok' })}

üìö ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏´‡∏∏‡πâ‡∏ô:`;

      await this.sendPushMessage(headerMessage);
      await this.delay(2000);
      
      // ‡∏™‡πà‡∏á‡∏Ç‡πà‡∏≤‡∏ß‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏´‡∏∏‡πâ‡∏ô
      for (const stockData of allNewsData) {
        try {
          logger.info(`üì§ Processing news for ${stockData.stock.symbol}...`);
          
          // ‡πÅ‡∏õ‡∏•‡πÅ‡∏•‡∏∞‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πà‡∏≤‡∏ß‡∏î‡πâ‡∏ß‡∏¢ AI
          const translatedNews = await this.translateAndSummarizeNews(stockData);
          
          if (translatedNews && translatedNews.length > 0) {
            // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏•‡∏±‡∏Å‡∏Ç‡∏≠‡∏á‡∏´‡∏∏‡πâ‡∏ô
            const mainMessage = this.formatMainStockNewsMessage(stockData.stock, translatedNews);
            await this.sendPushMessage(mainMessage);
            await this.delay(2000);
            
            // ‡∏™‡πà‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ç‡πà‡∏≤‡∏ß‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ç‡πà‡∏≤‡∏ß (‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 3 ‡∏Ç‡πà‡∏≤‡∏ß)
            const topNews = translatedNews.slice(0, 3);
            for (let i = 0; i < topNews.length; i++) {
              const newsMessage = this.formatDetailedNewsMessage(stockData.stock.symbol, topNews[i], i + 1);
              await this.sendPushMessage(newsMessage);
              await this.delay(2000);
            }
            
            logger.info(`‚úÖ Sent ${topNews.length} news items for ${stockData.stock.symbol}`);
          } else {
            logger.info(`‚ÑπÔ∏è No translated news available for ${stockData.stock.symbol}`);
          }
          
        } catch (error) {
          logger.error(`‚ùå Failed to process news for ${stockData.stock.symbol}: ${error.message}`);
        }
      }
      
      // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏¥‡∏î‡∏ó‡πâ‡∏≤‡∏¢
      const footerMessage = `‚úÖ ‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πà‡∏≤‡∏ß‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô‡πÅ‡∏•‡πâ‡∏ß

‚ö†Ô∏è ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: 
- ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πà‡∏≤‡∏ß‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∏‡∏ô
- ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏Å‡πà‡∏≠‡∏ô‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡∏•‡∏á‡∏ó‡∏∏‡∏ô
- ‡∏ú‡∏•‡∏ï‡∏≠‡∏ö‡πÅ‡∏ó‡∏ô‡πÉ‡∏ô‡∏≠‡∏î‡∏µ‡∏ï‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏ú‡∏•‡∏ï‡∏≠‡∏ö‡πÅ‡∏ó‡∏ô‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï

ü§ñ ‡∏£‡∏∞‡∏ö‡∏ö AI Stock News by AOM`;

      await this.sendPushMessage(footerMessage);
      
    } catch (error) {
      logger.error(`‚ùå Error in sendAllNewsAlert: ${error.message}`);
      await this.sendPushMessage(`‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πà‡∏≤‡∏ß: ${error.message}`);
    }
  }

  async translateAndSummarizeNews(stockData) {
    try {
      const { stock, news } = stockData;
      const newsItems = news.combined || [];
      
      if (!newsItems || newsItems.length === 0) {
        return [];
      }

      logger.info(`ü§ñ Translating ${newsItems.length} news items for ${stock.symbol} with AI`);
      
      const translatedNews = [];
      
      // ‡πÅ‡∏õ‡∏•‡∏Ç‡πà‡∏≤‡∏ß‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ç‡πà‡∏≤‡∏ß (‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 5 ‡∏Ç‡πà‡∏≤‡∏ß)
      const newsToTranslate = newsItems.slice(0, 5);
      
      for (const newsItem of newsToTranslate) {
        try {
          const translatedItem = await this.translateSingleNews(newsItem, stock);
          if (translatedItem) {
            translatedNews.push(translatedItem);
          }
        } catch (error) {
          logger.error(`‚ùå Failed to translate news: ${error.message}`);
        }
      }
      
      return translatedNews;
      
    } catch (error) {
      logger.error(`‚ùå Error in translateAndSummarizeNews: ${error.message}`);
      return [];
    }
  }

  async translateSingleNews(newsItem, stock) {
    try {
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á prompt ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡πÅ‡∏•‡∏∞‡∏™‡∏£‡∏∏‡∏õ
      const prompt = `‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πà‡∏≤‡∏ß‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡πÉ‡∏´‡πâ‡∏Å‡∏£‡∏∞‡∏ä‡∏±‡∏ö‡πÅ‡∏•‡∏∞‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏á‡πà‡∏≤‡∏¢:

‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠: ${newsItem.title}
‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤: ${newsItem.description || newsItem.content || '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î'}
‡πÅ‡∏´‡∏•‡πà‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏≤: ${newsItem.source}

‡∏´‡∏∏‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á: ${stock.symbol} (${stock.type})

‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏≠‡∏ö‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö JSON:
{
  "headline": "‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡∏™‡∏±‡πâ‡∏ô‡πÜ (‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 50 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£)",
  "summary": "‡∏™‡∏£‡∏∏‡∏õ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢ (‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 150 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£)",
  "impact": "‡∏ú‡∏•‡∏Å‡∏£‡∏∞‡∏ó‡∏ö‡∏ï‡πà‡∏≠‡∏´‡∏∏‡πâ‡∏ô ${stock.symbol} (‡∏ö‡∏ß‡∏Å/‡∏•‡∏ö/‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏•‡∏≤‡∏á)",
  "relevance": "‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö ${stock.symbol} (‡∏™‡∏π‡∏á/‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á/‡∏ï‡πà‡∏≥)"
}

‡πÉ‡∏´‡πâ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏Å‡∏±‡∏ö:
1. ‡πÅ‡∏õ‡∏•‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤ ‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏á‡πà‡∏≤‡∏¢
2. ‡∏£‡∏∞‡∏ö‡∏∏‡∏ú‡∏•‡∏Å‡∏£‡∏∞‡∏ó‡∏ö‡∏ï‡πà‡∏≠‡∏´‡∏∏‡πâ‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô
3. ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πâ‡∏ô‡πÜ ‡∏Å‡∏£‡∏∞‡∏ä‡∏±‡∏ö
4. ‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡∏Ñ‡∏≥‡∏®‡∏±‡∏û‡∏ó‡πå‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ‡∏ó‡∏µ‡πà‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô`;

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ñ‡∏ß‡∏£‡πÉ‡∏ä‡πâ ChatGPT ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      const shouldUseChatGPT = process.env.OPENAI_API_KEY && 
                              process.env.OPENAI_API_KEY !== 'disabled' && 
                              process.env.OPENAI_API_KEY !== 'sk-your-openai-api-key-here';

      let aiResponse = '';

      if (!shouldUseChatGPT) {
        logger.info('üÜì Using FREE Gemini AI for news translation');
        
        // ‡πÉ‡∏ä‡πâ Gemini ‡∏ü‡∏£‡∏µ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
        const GeminiAnalysisService = require('./geminiAnalysisService');
        const geminiService = new GeminiAnalysisService();
        
        aiResponse = await geminiService.callGeminiAPI(prompt, 0, 800);
        
      } else {
        // ‡∏•‡∏≠‡∏á ChatGPT ‡∏Å‡πà‡∏≠‡∏ô
        try {
          const axios = require('axios');
          const response = await axios.post('https://api.openai.com/v1/chat/completions', {
            model: "gpt-3.5-turbo",
            messages: [{ role: "user", content: prompt }],
            max_tokens: 600,
            temperature: 0.3
          }, {
            headers: {
              'Authorization': `Bearer ${process.env.OPENAI_API_KEY}`,
              'Content-Type': 'application/json'
            },
            timeout: 20000
          });

          aiResponse = response.data.choices[0].message.content;
          
        } catch (chatgptError) {
          logger.warn(`‚ö†Ô∏è ChatGPT failed, switching to FREE Gemini: ${chatgptError.message}`);
          
          // ‡∏™‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÉ‡∏ä‡πâ Gemini ‡∏ü‡∏£‡∏µ
          const GeminiAnalysisService = require('./geminiAnalysisService');
          const geminiService = new GeminiAnalysisService();
          
          aiResponse = await geminiService.callGeminiAPI(prompt, 0, 800);
        }
      }

      // ‡∏•‡∏≠‡∏á‡πÅ‡∏õ‡∏•‡∏á JSON
      try {
        // ‡∏•‡∏ö markdown formatting ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
        const cleanResponse = aiResponse.replace(/```json\s*/g, '').replace(/```/g, '').trim();
        const parsed = JSON.parse(cleanResponse);
        
        return {
          headline: parsed.headline || '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡∏∏‡∏õ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡πÑ‡∏î‡πâ',
          summary: parsed.summary || '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡∏∏‡∏õ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡πÑ‡∏î‡πâ',
          impact: parsed.impact || '‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏ú‡∏•‡∏Å‡∏£‡∏∞‡∏ó‡∏ö',
          relevance: parsed.relevance || '‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö',
          originalTitle: newsItem.title,
          url: newsItem.url || newsItem.link,
          source: newsItem.source,
          publishedAt: newsItem.publishedAt || newsItem.pubDate
        };
        
      } catch (parseError) {
        logger.warn(`‚ö†Ô∏è Failed to parse AI response as JSON, using fallback: ${parseError.message}`);
        
        // Fallback: ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏õ‡∏•‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤
        return {
          headline: newsItem.title?.substring(0, 50) || '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠',
          summary: aiResponse.substring(0, 150) || '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡∏∏‡∏õ‡πÑ‡∏î‡πâ',
          impact: '‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö',
          relevance: '‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á',
          originalTitle: newsItem.title,
          url: newsItem.url || newsItem.link,
          source: newsItem.source,
          publishedAt: newsItem.publishedAt || newsItem.pubDate
        };
      }
      
    } catch (error) {
      logger.error(`‚ùå Failed to translate news with AI: ${error.message}`);
      
      // Fallback: ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö
      return {
        headline: newsItem.title?.substring(0, 50) || '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠',
        summary: newsItem.description?.substring(0, 150) || '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î',
        impact: '‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö',
        relevance: '‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á',
        originalTitle: newsItem.title,
        url: newsItem.url || newsItem.link,
        source: newsItem.source,
        publishedAt: newsItem.publishedAt || newsItem.pubDate
      };
    }
  }

  formatMainStockNewsMessage(stock, translatedNews) {
    const impactEmoji = this.getImpactEmoji(translatedNews);
    const relevantNewsCount = translatedNews.filter(n => n.relevance === '‡∏™‡∏π‡∏á').length;
    
    let message = `üìà ${stock.symbol} (${stock.type})

${impactEmoji} ‡∏Ç‡πà‡∏≤‡∏ß‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏±‡∏ô: ${translatedNews.length} ‡∏Ç‡πà‡∏≤‡∏ß
üéØ ‡∏Ç‡πà‡∏≤‡∏ß‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏™‡∏π‡∏á: ${relevantNewsCount} ‡∏Ç‡πà‡∏≤‡∏ß

üìä ‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏ú‡∏•‡∏Å‡∏£‡∏∞‡∏ó‡∏ö:`;

    // ‡∏ô‡∏±‡∏ö‡∏ú‡∏•‡∏Å‡∏£‡∏∞‡∏ó‡∏ö
    const impacts = { ‡∏ö‡∏ß‡∏Å: 0, ‡∏•‡∏ö: 0, ‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏•‡∏≤‡∏á: 0 };
    translatedNews.forEach(news => {
      if (news.impact.includes('‡∏ö‡∏ß‡∏Å')) impacts.‡∏ö‡∏ß‡∏Å++;
      else if (news.impact.includes('‡∏•‡∏ö')) impacts.‡∏•‡∏ö++;
      else impacts.‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏•‡∏≤‡∏á++;
    });

    if (impacts.‡∏ö‡∏ß‡∏Å > 0) message += `\nüü¢ ‡∏ú‡∏•‡∏Å‡∏£‡∏∞‡∏ó‡∏ö‡∏ö‡∏ß‡∏Å: ${impacts.‡∏ö‡∏ß‡∏Å} ‡∏Ç‡πà‡∏≤‡∏ß`;
    if (impacts.‡∏•‡∏ö > 0) message += `\nüî¥ ‡∏ú‡∏•‡∏Å‡∏£‡∏∞‡∏ó‡∏ö‡∏•‡∏ö: ${impacts.‡∏•‡∏ö} ‡∏Ç‡πà‡∏≤‡∏ß`;
    if (impacts.‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏•‡∏≤‡∏á > 0) message += `\nüü° ‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏•‡∏≤‡∏á: ${impacts.‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏•‡∏≤‡∏á} ‡∏Ç‡πà‡∏≤‡∏ß`;

    message += `\n\nüì∞ ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ç‡πà‡∏≤‡∏ß‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏ô‡∏µ‡πâ...`;

    return message;
  }

  formatDetailedNewsMessage(stockSymbol, newsItem, index) {
    const impactEmoji = this.getSingleImpactEmoji(newsItem.impact);
    const relevanceEmoji = this.getRelevanceEmoji(newsItem.relevance);
    
    let message = `üì∞ ‡∏Ç‡πà‡∏≤‡∏ß‡∏ó‡∏µ‡πà ${index}: ${stockSymbol}

${impactEmoji} ${newsItem.headline}

üìù ‡∏™‡∏£‡∏∏‡∏õ: ${newsItem.summary}

${relevanceEmoji} ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á: ${newsItem.relevance}
üìä ‡∏ú‡∏•‡∏Å‡∏£‡∏∞‡∏ó‡∏ö: ${newsItem.impact}`;

    if (newsItem.source) {
      message += `\nüì° ‡πÅ‡∏´‡∏•‡πà‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏≤: ${newsItem.source}`;
    }

    if (newsItem.url && newsItem.url !== 'undefined' && !newsItem.url.includes('mock')) {
      message += `\nüîó ‡∏≠‡πà‡∏≤‡∏ô‡∏ï‡πà‡∏≠: ${newsItem.url}`;
    }

    if (newsItem.publishedAt) {
      const publishDate = new Date(newsItem.publishedAt);
      if (!isNaN(publishDate.getTime())) {
        message += `\nüïí ‡πÄ‡∏ß‡∏•‡∏≤: ${publishDate.toLocaleDateString('th-TH')} ${publishDate.toLocaleTimeString('th-TH', { hour: '2-digit', minute: '2-digit' })}`;
      }
    }

    return message;
  }

  getImpactEmoji(translatedNews) {
    const positiveCount = translatedNews.filter(n => n.impact.includes('‡∏ö‡∏ß‡∏Å')).length;
    const negativeCount = translatedNews.filter(n => n.impact.includes('‡∏•‡∏ö')).length;
    
    if (positiveCount > negativeCount) return 'üìà';
    if (negativeCount > positiveCount) return 'üìâ';
    return 'üìä';
  }

  getSingleImpactEmoji(impact) {
    if (impact.includes('‡∏ö‡∏ß‡∏Å')) return 'üü¢';
    if (impact.includes('‡∏•‡∏ö')) return 'üî¥';
    return 'üü°';
  }

  getRelevanceEmoji(relevance) {
    if (relevance === '‡∏™‡∏π‡∏á') return 'üéØ';
    if (relevance === '‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á') return 'üìå';
    return 'üìç';
  }

  async sendAllNewsAlert(allNewsData) {
    logger.info(`üì∞ Sending all news alert for ${allNewsData.length} stocks with news`);
    
    try {
      // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡πà‡∏≠‡∏ô
      const summaryMessage = this.formatNewsalSummaryMessage(allNewsData);
      await this.sendPushMessage(summaryMessage);
      await this.delay(2000);
      
      // ‡∏™‡πà‡∏á‡∏Ç‡πà‡∏≤‡∏ß‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏´‡∏∏‡πâ‡∏ô‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÅ‡∏õ‡∏•‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏ó‡∏¢
      for (const stockNews of allNewsData) {
        try {
          const message = await this.formatAllNewsMessage(stockNews);
          await this.sendPushMessage(message);
          
          // Add delay between messages
          await this.delay(3000);
          
        } catch (error) {
          logger.error(`‚ùå Failed to send news for ${stockNews.stock.symbol}: ${error.message}`);
        }
      }
      
      logger.info('‚úÖ All news alerts sent successfully');
      
    } catch (error) {
      logger.error(`‚ùå Error sending all news alerts: ${error.message}`);
      throw error;
    }
  }

  async sendAllNewsAlert(allNewsData) {
    logger.info(`üì∞ Sending all news for ${allNewsData.length} stocks to LINE...`);
    
    try {
      // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡πà‡∏≠‡∏ô
      const summaryMessage = this.formatNewsSummary(allNewsData);
      await this.sendPushMessage(summaryMessage);
      
      // ‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏™‡πà‡∏á‡∏Ç‡πà‡∏≤‡∏ß‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏´‡∏∏‡πâ‡∏ô
      await this.delay(3000);
      
      for (const stockData of allNewsData) {
        try {
          // ‡πÅ‡∏õ‡∏•‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ç‡πà‡∏≤‡∏ß‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏´‡∏∏‡πâ‡∏ô
          const newsMessages = await this.formatStockNewsMessages(stockData);
          
          for (const message of newsMessages) {
            await this.sendPushMessage(message);
            await this.delay(2000); // ‡∏´‡∏ô‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
          }
          
        } catch (error) {
          logger.error(`‚ùå Failed to send news for ${stockData.stock.symbol}: ${error.message}`);
        }
      }
      
      // ‡∏™‡πà‡∏á‡∏Ç‡πà‡∏≤‡∏ß‡∏™‡∏á‡∏Ñ‡∏£‡∏≤‡∏°‡πÅ‡∏•‡∏∞‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡πÅ‡∏¢‡∏Å‡∏ï‡πà‡∏≤‡∏á‡∏´‡∏≤‡∏Å
      await this.sendGlobalNewsAlert();
      
    } catch (error) {
      logger.error(`‚ùå Failed to send all news alert: ${error.message}`);
      throw error;
    }
  }

  async sendGlobalNewsAlert() {
    try {
      logger.info('üåç Collecting global news affecting markets...');
      
      const ReliableDataService = require('./services/reliableDataService');
      const reliableDataService = new ReliableDataService();
      
      // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πà‡∏≤‡∏ß‡∏™‡∏á‡∏Ñ‡∏£‡∏≤‡∏°‡πÅ‡∏•‡∏∞‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
      const globalTopics = [
        'war ukraine russia', 'israel palestine conflict', 'china taiwan',
        'fed interest rate', 'inflation', 'oil price crisis',
        'bank collapse', 'recession economy', 'market crash'
      ];
      
      let globalNews = [];
      
      for (const topic of globalTopics) {
        try {
          const news = await reliableDataService.getReutersNews(topic);
          if (news && news.length > 0) {
            globalNews = globalNews.concat(news.slice(0, 2)); // ‡πÄ‡∏≠‡∏≤‡πÅ‡∏Ñ‡πà 2 ‡∏Ç‡πà‡∏≤‡∏ß‡∏ï‡πà‡∏≠‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠
          }
          await this.delay(1000);
        } catch (error) {
          logger.warn(`‚ö†Ô∏è Failed to get news for topic: ${topic}`);
        }
      }
      
      if (globalNews.length > 0) {
        logger.info(`üåç Found ${globalNews.length} global news items`);
        
        // ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á‡∏Ç‡πà‡∏≤‡∏ß‡πÇ‡∏•‡∏Å
        const globalMessage = await this.formatGlobalNewsMessage(globalNews);
        await this.sendPushMessage(globalMessage);
      }
      
    } catch (error) {
      logger.warn(`‚ö†Ô∏è Failed to send global news: ${error.message}`);
    }
  }

  formatNewsSummary(allNewsData) {
    const totalStocks = allNewsData.length;
    const totalNews = allNewsData.reduce((sum, data) => sum + data.totalNews, 0);
    const totalToday = allNewsData.reduce((sum, data) => sum + data.todayNews, 0);
    const totalYesterday = allNewsData.reduce((sum, data) => sum + data.yesterdayNews, 0);
    
    let message = `üìä [‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πà‡∏≤‡∏ß‡∏´‡∏∏‡πâ‡∏ô‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ] ${new Date().toLocaleDateString('th-TH')}

üéØ ‡∏´‡∏∏‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ç‡πà‡∏≤‡∏ß: ${totalStocks} ‡∏ï‡∏±‡∏ß
üì∞ ‡∏Ç‡πà‡∏≤‡∏ß‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: ${totalNews} ‡∏Ç‡πà‡∏≤‡∏ß
üìÖ ‡∏Ç‡πà‡∏≤‡∏ß‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ: ${totalToday} ‡∏Ç‡πà‡∏≤‡∏ß
üìÖ ‡∏Ç‡πà‡∏≤‡∏ß‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ß‡∏≤‡∏ô: ${totalYesterday} ‡∏Ç‡πà‡∏≤‡∏ß

üìã ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏´‡∏∏‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ç‡πà‡∏≤‡∏ß:`;

    allNewsData.forEach((data, index) => {
      message += `\n${index + 1}. ${data.stock.symbol} (${data.totalNews} ‡∏Ç‡πà‡∏≤‡∏ß)`;
    });

    message += `\n\nüì± ‡∏Ç‡πà‡∏≤‡∏ß‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏´‡∏∏‡πâ‡∏ô‡∏à‡∏∞‡∏™‡πà‡∏á‡∏ï‡∏≤‡∏°‡∏°‡∏≤‡∏ó‡∏µ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°...`;
    
    return message;
  }

  async formatStockNewsMessages(stockData) {
    const messages = [];
    const { stock, news } = stockData;
    
    // ‡πÅ‡∏¢‡∏Å‡∏Ç‡πà‡∏≤‡∏ß‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏•‡∏∏‡∏° (‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 5 ‡∏Ç‡πà‡∏≤‡∏ß‡∏ï‡πà‡∏≠‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°)
    const newsGroups = [];
    const newsItems = news.combined || [];
    
    for (let i = 0; i < newsItems.length; i += 3) {
      newsGroups.push(newsItems.slice(i, i + 3));
    }
    
    for (let groupIndex = 0; groupIndex < newsGroups.length; groupIndex++) {
      const newsGroup = newsGroups[groupIndex];
      let message = `üìà [${stock.symbol}] ‡∏Ç‡πà‡∏≤‡∏ß‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∏‡∏ô`;
      
      if (newsGroups.length > 1) {
        message += ` (${groupIndex + 1}/${newsGroups.length})`;
      }
      
      message += `\n`;
      
      for (let i = 0; i < newsGroup.length; i++) {
        const newsItem = newsGroup[i];
        
        // ‡πÅ‡∏õ‡∏•‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏Ç‡πà‡∏≤‡∏ß‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏ó‡∏¢
        const translatedTitle = await this.translateToThai(newsItem.title);
        
        message += `\nüì∞ ‡∏Ç‡πà‡∏≤‡∏ß‡∏ó‡∏µ‡πà ${(groupIndex * 3) + i + 1}:`;
        message += `\nüè∑Ô∏è ${translatedTitle}`;
        
        if (newsItem.description) {
          const translatedDesc = await this.translateToThai(newsItem.description.substring(0, 100));
          message += `\nüìù ${translatedDesc}${newsItem.description.length > 100 ? '...' : ''}`;
        }
        
        message += `\nüóìÔ∏è ${this.formatPublishDate(newsItem.publishedAt)}`;
        message += `\nüì° ‡πÅ‡∏´‡∏•‡πà‡∏á: ${newsItem.source}`;
        
        if (newsItem.url && !newsItem.url.includes('mock') && !newsItem.url.includes('example')) {
          message += `\nüîó ${newsItem.url}`;
        }
        
        if (i < newsGroup.length - 1) {
          message += `\n${'‚îÄ'.repeat(30)}`;
        }
      }
      
      message += `\n\n‚è∞ ${new Date().toLocaleString('th-TH', { timeZone: 'Asia/Bangkok' })}`;
      
      messages.push(message);
    }
    
    return messages;
  }

  formatNewsalSummaryMessage(allNewsData) {
    const totalStocks = allNewsData.length;
    const totalNews = allNewsData.reduce((sum, item) => sum + item.totalNews, 0);
    const totalToday = allNewsData.reduce((sum, item) => sum + item.todayNews, 0);
    const totalYesterday = allNewsData.reduce((sum, item) => sum + item.yesterdayNews, 0);
    
    let message = `üì∞ [‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πà‡∏≤‡∏ß‡∏™‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏±‡∏ô]

üéØ ‡∏´‡∏∏‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ç‡πà‡∏≤‡∏ß: ${totalStocks} ‡∏ï‡∏±‡∏ß
üìä ‡∏Ç‡πà‡∏≤‡∏ß‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: ${totalNews} ‡∏Ç‡πà‡∏≤‡∏ß
üìÖ ‡∏Ç‡πà‡∏≤‡∏ß‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ: ${totalToday} ‡∏Ç‡πà‡∏≤‡∏ß
üìÖ ‡∏Ç‡πà‡∏≤‡∏ß‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ß‡∏≤‡∏ô: ${totalYesterday} ‡∏Ç‡πà‡∏≤‡∏ß

üìà ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏´‡∏∏‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ç‡πà‡∏≤‡∏ß:`;

    allNewsData.forEach((item, index) => {
      message += `
${index + 1}. ${item.stock.symbol} (${item.totalNews} ‡∏Ç‡πà‡∏≤‡∏ß)`;
    });

    message += `

‚è∞ ‡πÄ‡∏ß‡∏•‡∏≤: ${new Date().toLocaleString('th-TH', { timeZone: 'Asia/Bangkok' })}

üì± ‡∏Ç‡πà‡∏≤‡∏ß‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏à‡∏∞‡∏™‡πà‡∏á‡∏ï‡∏≤‡∏°‡∏°‡∏≤...`;

    return message;
  }

  async formatAllNewsMessage(stockNewsData) {
    const { stock, news } = stockNewsData;
    const todayNews = news.today || [];
    const yesterdayNews = news.yesterday || [];
    
    let message = `üì∞ [‡∏Ç‡πà‡∏≤‡∏ß ${stock.symbol}]

üìä ‡∏Ç‡πà‡∏≤‡∏ß‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ: ${todayNews.length} ‡∏Ç‡πà‡∏≤‡∏ß
üìä ‡∏Ç‡πà‡∏≤‡∏ß‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ß‡∏≤‡∏ô: ${yesterdayNews.length} ‡∏Ç‡πà‡∏≤‡∏ß`;

    // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πà‡∏≤‡∏ß‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ
    if (todayNews.length > 0) {
      message += `

üìÖ ‡∏Ç‡πà‡∏≤‡∏ß‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ:`;
      
      for (let i = 0; i < Math.min(3, todayNews.length); i++) {
        const newsItem = todayNews[i];
        const translatedTitle = await this.translateToThai(newsItem.title);
        const translatedDesc = await this.translateToThai(newsItem.description);
        
        message += `

üî∏ ‡∏Ç‡πà‡∏≤‡∏ß‡∏ó‡∏µ‡πà ${i + 1}:
${translatedTitle}

üìù ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î:
${translatedDesc}`;

        if (newsItem.url && !newsItem.url.includes('mock') && !newsItem.url.includes('example')) {
          message += `

üîó ‡∏≠‡πà‡∏≤‡∏ô‡∏ï‡πà‡∏≠: ${newsItem.url}`;
        }
        
        if (newsItem.source) {
          message += `
üì∞ ‡πÅ‡∏´‡∏•‡πà‡∏á: ${newsItem.source}`;
        }
      }
    }

    // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πà‡∏≤‡∏ß‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ß‡∏≤‡∏ô (‡πÅ‡∏Ñ‡πà 1-2 ‡∏Ç‡πà‡∏≤‡∏ß)
    if (yesterdayNews.length > 0) {
      message += `

üìÖ ‡∏Ç‡πà‡∏≤‡∏ß‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ß‡∏≤‡∏ô:`;
      
      for (let i = 0; i < Math.min(2, yesterdayNews.length); i++) {
        const newsItem = yesterdayNews[i];
        const translatedTitle = await this.translateToThai(newsItem.title);
        
        message += `

üî∏ ${translatedTitle}`;
        
        if (newsItem.url && !newsItem.url.includes('mock') && !newsItem.url.includes('example')) {
          message += `
üîó ${newsItem.url}`;
        }
      }
    }

    message += `

‚è∞ ‡πÄ‡∏ß‡∏•‡∏≤: ${new Date().toLocaleString('th-TH', { timeZone: 'Asia/Bangkok' })}`;

    return message;
  }

  async translateToThai(text) {
    try {
      if (!text) return '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•';
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      const thaiRegex = /[\u0E00-\u0E7F]/;
      if (thaiRegex.test(text)) {
        return text; // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡πÅ‡∏•‡πâ‡∏ß‡∏Å‡πá return ‡πÄ‡∏•‡∏¢
      }
      
      // ‡πÉ‡∏ä‡πâ AI ‡πÅ‡∏õ‡∏•‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏ó‡∏¢ (‡πÉ‡∏ä‡πâ Gemini ‡∏ü‡∏£‡∏µ)
      const GeminiAnalysisService = require('./geminiAnalysisService');
      const geminiService = new GeminiAnalysisService();
      
      const prompt = `‡πÅ‡∏õ‡∏•‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡πÉ‡∏´‡πâ‡∏Å‡∏£‡∏∞‡∏ä‡∏±‡∏ö‡πÅ‡∏•‡∏∞‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏á‡πà‡∏≤‡∏¢ (‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 100 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£):

"${text}"

‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÅ‡∏õ‡∏•‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏®‡∏±‡∏û‡∏ó‡πå‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô‡πÅ‡∏•‡∏∞‡∏´‡∏∏‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°`;

      const translatedText = await geminiService.callGeminiAPI(prompt, 0, 150);
      
      // ‡∏•‡∏ö markdown ‡∏´‡∏£‡∏∑‡∏≠ formatting ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
      return translatedText.replace(/```\w*\s*/g, '').replace(/```/g, '').trim();
      
    } catch (error) {
      logger.warn(`‚ö†Ô∏è Translation failed for "${text}": ${error.message}`);
      
      // ‡∏ñ‡πâ‡∏≤‡πÅ‡∏õ‡∏•‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏ï‡∏±‡∏î‡πÉ‡∏´‡πâ‡∏™‡∏±‡πâ‡∏ô
      return text.length > 80 ? text.substring(0, 80) + '...' : text;
    }
  }

  async formatGlobalNewsMessage(globalNews) {
    let message = `üåç [‡∏Ç‡πà‡∏≤‡∏ß‡πÇ‡∏•‡∏Å‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡∏Å‡∏£‡∏∞‡∏ó‡∏ö‡∏ï‡∏•‡∏≤‡∏î] ${new Date().toLocaleDateString('th-TH')}

‚ö†Ô∏è ‡∏Ç‡πà‡∏≤‡∏ß‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏ó‡∏µ‡πà‡∏ô‡∏±‡∏Å‡∏•‡∏á‡∏ó‡∏∏‡∏ô‡∏Ñ‡∏ß‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°:`;

    // ‡πÄ‡∏≠‡∏≤‡πÅ‡∏Ñ‡πà 5 ‡∏Ç‡πà‡∏≤‡∏ß‡πÅ‡∏£‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
    const importantNews = globalNews.slice(0, 5);
    
    for (let i = 0; i < importantNews.length; i++) {
      const newsItem = importantNews[i];
      
      // ‡πÅ‡∏õ‡∏•‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏Ç‡πà‡∏≤‡∏ß‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏ó‡∏¢
      const translatedTitle = await this.translateToThai(newsItem.title);
      
      message += `\n\nüî• ‡∏Ç‡πà‡∏≤‡∏ß‡∏ó‡∏µ‡πà ${i + 1}:`;
      message += `\nüì¢ ${translatedTitle}`;
      
      if (newsItem.description) {
        const translatedDesc = await this.translateToThai(newsItem.description.substring(0, 80));
        message += `\nüí≠ ${translatedDesc}${newsItem.description.length > 80 ? '...' : ''}`;
      }
      
      message += `\nüìÖ ${this.formatPublishDate(newsItem.publishedAt)}`;
      message += `\nüì° ${newsItem.source}`;
      
      if (newsItem.url && !newsItem.url.includes('mock')) {
        message += `\nüîó ${newsItem.url}`;
      }
    }

    message += `\n\nüí° ‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡πÄ‡∏´‡∏•‡πà‡∏≤‡∏ô‡∏µ‡πâ‡∏≠‡∏≤‡∏à‡∏™‡πà‡∏á‡∏ú‡∏•‡∏ï‡πà‡∏≠:`;
    message += `\n‚Ä¢ üìà ‡∏ï‡∏•‡∏≤‡∏î‡∏´‡∏∏‡πâ‡∏ô‡∏ó‡∏±‡πà‡∏ß‡πÇ‡∏•‡∏Å`;
    message += `\n‚Ä¢ üí± ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡πÅ‡∏•‡∏Å‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô`;
    message += `\n‚Ä¢ üèÖ ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏≠‡∏á`;
    message += `\n‚Ä¢ üõ¢Ô∏è ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ô‡πâ‡∏≥‡∏°‡∏±‡∏ô`;
    
    return message;
  }

  async translateToThai(text) {
    try {
      // ‡πÉ‡∏ä‡πâ AI ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏ó‡∏¢‡πÅ‡∏ö‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏á‡πà‡∏≤‡∏¢
      const shouldUseChatGPT = process.env.OPENAI_API_KEY && 
                              process.env.OPENAI_API_KEY !== 'disabled' && 
                              process.env.OPENAI_API_KEY !== 'sk-your-openai-api-key-here';

      const prompt = `‡πÅ‡∏õ‡∏•‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡πÉ‡∏´‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏á‡πà‡∏≤‡∏¢ ‡∏Å‡∏£‡∏∞‡∏ä‡∏±‡∏ö ‡πÅ‡∏•‡∏∞‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ô‡∏±‡∏Å‡∏•‡∏á‡∏ó‡∏∏‡∏ô:

"${text}"

‡∏ï‡∏≠‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°`;

      if (!shouldUseChatGPT) {
        // ‡πÉ‡∏ä‡πâ Gemini ‡∏ü‡∏£‡∏µ
        const GeminiAnalysisService = require('./services/geminiAnalysisService');
        const geminiService = new GeminiAnalysisService();
        
        const translation = await geminiService.callGeminiAPI(prompt, 0, 150);
        return translation.trim();
      }

      // ‡∏•‡∏≠‡∏á ChatGPT ‡∏Å‡πà‡∏≠‡∏ô
      try {
        const response = await axios.post('https://api.openai.com/v1/chat/completions', {
          model: "gpt-3.5-turbo",
          messages: [{ role: "user", content: prompt }],
          max_tokens: 150,
          temperature: 0.3
        }, {
          headers: {
            'Authorization': `Bearer ${process.env.OPENAI_API_KEY}`,
            'Content-Type': 'application/json'
          },
          timeout: 10000
        });

        return response.data.choices[0].message.content.trim();
        
      } catch (chatgptError) {
        // ‡∏™‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÉ‡∏ä‡πâ Gemini ‡∏ü‡∏£‡∏µ
        const GeminiAnalysisService = require('./services/geminiAnalysisService');
        const geminiService = new GeminiAnalysisService();
        
        const translation = await geminiService.callGeminiAPI(prompt, 0, 150);
        return translation.trim();
      }
      
    } catch (error) {
      logger.warn(`‚ö†Ô∏è Translation failed: ${error.message}, using original text`);
      // ‡∏ñ‡πâ‡∏≤‡πÅ‡∏õ‡∏•‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö
      return text;
    }
  }

  formatPublishDate(dateString) {
    try {
      if (!dateString) return '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà';
      
      const date = new Date(dateString);
      const now = new Date();
      const diffHours = Math.floor((now - date) / (1000 * 60 * 60));
      
      if (diffHours < 1) {
        return '‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà';
      } else if (diffHours < 24) {
        return `${diffHours} ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß`;
      } else if (diffHours < 48) {
        return '‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ß‡∏≤‡∏ô';
      } else {
        return date.toLocaleDateString('th-TH', { 
          year: 'numeric', 
          month: 'short', 
          day: 'numeric' 
        });
      }
    } catch (error) {
      return '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà';
    }
  }

  async sendErrorNotification(error) {
    try {
      const message = `üö® [‡∏£‡∏∞‡∏ö‡∏ö‡∏Ç‡∏±‡∏î‡∏Ç‡πâ‡∏≠‡∏á] AOM Stock Notification

‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${error.message}

‡πÄ‡∏ß‡∏•‡∏≤: ${new Date().toLocaleString('th-TH', { timeZone: 'Asia/Bangkok' })}

‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö`;

      await this.sendPushMessage(message);
      
    } catch (lineError) {
      logger.error(`‚ùå Failed to send error notification: ${lineError.message}`);
    }
  }

  async handleIncomingMessage(event) {
    try {
      if (event.type === 'message' && event.message.type === 'text') {
        const userMessage = event.message.text;
        const userId = event.source.userId;
        
        logger.info(`üì® Received message from ${userId}: ${userMessage}`);
        
        // Analyze user query with AI
        const response = await this.analyzeUserQuery(userMessage);
        
        // Send response back to user
        await this.replyToUser(event.replyToken, response);
      }
      
    } catch (error) {
      logger.error(`‚ùå Error handling incoming message: ${error.message}`);
    }
  }

  async analyzeUserQuery(userMessage) {
    try {
      // Get stock context from Stock Data Service
      const StockDataService = require('./stockDataService');
      const stockDataService = new StockDataService();
      const stockContext = await stockDataService.getStockContext();
      
      // ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ ChatGPT ‡∏Å‡πà‡∏≠‡∏ô
      const NewsAnalysisService = require('./newsAnalysisService');
      const newsAnalysis = new NewsAnalysisService();
      
      const prompt = `‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ñ‡∏≤‡∏°: "${userMessage}"

‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏∏‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ:
${stockContext}

‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∏‡∏ô‡πÅ‡∏•‡∏∞‡∏´‡∏∏‡πâ‡∏ô‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ ‡πÇ‡∏î‡∏¢:
1. ‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå
2. ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á
3. ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£ (‡∏´‡∏≤‡∏Å‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°)
4. ‡∏ï‡∏≠‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡πÉ‡∏´‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏á‡πà‡∏≤‡∏¢
5. ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 500 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£

‡∏´‡∏≤‡∏Å‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∏‡∏ô ‡πÉ‡∏´‡πâ‡πÅ‡∏à‡πâ‡∏á‡∏ß‡πà‡∏≤‡∏£‡∏∞‡∏ö‡∏ö‡∏ô‡∏µ‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏∏‡πâ‡∏ô‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô`;

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ñ‡∏ß‡∏£‡πÉ‡∏ä‡πâ ChatGPT ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      const shouldUseChatGPT = process.env.OPENAI_API_KEY && 
                              process.env.OPENAI_API_KEY !== 'disabled' && 
                              process.env.OPENAI_API_KEY !== 'sk-your-openai-api-key-here';

      if (!shouldUseChatGPT) {
        logger.info('üÜì Using FREE Gemini AI for LINE chat response');
        
        // ‡πÉ‡∏ä‡πâ Gemini ‡∏ü‡∏£‡∏µ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
        const GeminiAnalysisService = require('./geminiAnalysisService');
        const geminiService = new GeminiAnalysisService();
        
        const geminiResponse = await geminiService.callGeminiAPI(prompt);
        
        // ‡∏•‡∏ö markdown formatting ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
        return geminiResponse.replace(/```\w*\s*/g, '').replace(/```/g, '').trim();
      }

      // ‡∏•‡∏≠‡∏á ChatGPT ‡∏Å‡πà‡∏≠‡∏ô (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà‡∏°‡∏µ API key ‡∏à‡∏£‡∏¥‡∏á)
      try {
        const response = await axios.post('https://api.openai.com/v1/chat/completions', {
          model: "gpt-3.5-turbo",
          messages: [{ role: "user", content: prompt }],
          max_tokens: 800,
          temperature: 0.7
        }, {
          headers: {
            'Authorization': `Bearer ${process.env.OPENAI_API_KEY}`,
            'Content-Type': 'application/json'
          },
          timeout: this.timeout
        });

        return response.data.choices[0].message.content;
        
      } catch (chatgptError) {
        logger.warn(`‚ö†Ô∏è ChatGPT failed, switching to FREE Gemini: ${chatgptError.message}`);
        
        // ‡∏™‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÉ‡∏ä‡πâ Gemini ‡∏ü‡∏£‡∏µ
        const GeminiAnalysisService = require('./geminiAnalysisService');
        const geminiService = new GeminiAnalysisService();
        
        const geminiResponse = await geminiService.callGeminiAPI(prompt);
        
        // ‡∏•‡∏ö markdown formatting ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
        return geminiResponse.replace(/```\w*\s*/g, '').replace(/```/g, '').trim();
      }
      
    } catch (error) {
      logger.error(`‚ùå Failed to analyze user query with both AI services: ${error.message}`);
      return `‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢ ‡∏£‡∏∞‡∏ö‡∏ö AI ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏∞

üìû ‡∏´‡∏≤‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏î‡πà‡∏ß‡∏ô ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏Ç‡πà‡∏≤‡∏ß‡∏™‡∏≤‡∏£‡∏î‡πâ‡∏ß‡∏¢‡∏ï‡∏ô‡πÄ‡∏≠‡∏á

Error: ${error.message}`;
    }
  }

  formatRiskMessage(stock) {
    const risk = stock.riskAnalysis;
    const emoji = this.getRiskEmoji(risk.riskLevel);
    
    let message = `üö® [‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏™‡∏π‡∏á] ${stock.symbol}

${emoji} ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á: ${this.translateRiskLevel(risk.riskLevel)}

üì∞ ‡∏Ç‡πà‡∏≤‡∏ß: "${risk.keyNews || '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πà‡∏≤‡∏ß‡πÄ‡∏â‡∏û‡∏≤‡∏∞'}"

üìù ‡∏™‡∏£‡∏∏‡∏õ: ${risk.summary}

üìä ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏ñ‡∏∑‡∏≠: ${risk.confidenceScore.toFixed(2)}

üìà ‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°: üîª ${risk.recommendation}`;

    // ‡πÅ‡∏™‡∏î‡∏á‡∏†‡∏±‡∏¢‡∏Ñ‡∏∏‡∏Å‡∏Ñ‡∏≤‡∏°‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
    if (risk.threats && risk.threats.length > 0) {
      message += `

‚ö†Ô∏è ‡∏†‡∏±‡∏¢‡∏Ñ‡∏∏‡∏Å‡∏Ñ‡∏≤‡∏°:`;
      risk.threats.slice(0, 3).forEach((threat, index) => {
        message += `
${index + 1}. ${threat}`;
      });
    }

    // ‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏´‡∏•‡πà‡∏á‡∏Ç‡πà‡∏≤‡∏ß‡∏´‡∏•‡∏≤‡∏¢‡∏≠‡∏±‡∏ô
    if (stock.news && stock.news.length > 0) {
      message += `

üì∞ ‡πÅ‡∏´‡∏•‡πà‡∏á‡∏Ç‡πà‡∏≤‡∏ß‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á:`;
      
      stock.news.slice(0, 3).forEach((newsItem, index) => {
        message += `

üîó ‡∏Ç‡πà‡∏≤‡∏ß‡∏ó‡∏µ‡πà ${index + 1}: ${newsItem.source}`;
        if (newsItem.title) {
          message += `
‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠: ${newsItem.title.substring(0, 80)}${newsItem.title.length > 80 ? '...' : ''}`;
        }
        if (newsItem.url && newsItem.url !== 'undefined' && !newsItem.url.includes('mock') && !newsItem.url.includes('example')) {
          message += `
‡∏•‡∏¥‡∏á‡∏Å‡πå: ${newsItem.url}`;
        }
      });
    }

    message += `

‚è∞ ‡πÄ‡∏ß‡∏•‡∏≤: ${new Date().toLocaleString('th-TH', { timeZone: 'Asia/Bangkok' })}`;

    return message;
  }

  formatOpportunityMessage(stock) {
    const opportunity = stock.opportunityAnalysis;
    const emoji = this.getOpportunityEmoji(opportunity.opportunityLevel);
    
    let message = `üî• [‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏Ç‡∏∂‡πâ‡∏ô] ${stock.symbol}

${emoji} ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡πÇ‡∏≠‡∏Å‡∏≤‡∏™: ${this.translateOpportunityLevel(opportunity.opportunityLevel)}

üì∞ ‡∏Ç‡πà‡∏≤‡∏ß: "${opportunity.keyNews || '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πà‡∏≤‡∏ß‡πÄ‡∏â‡∏û‡∏≤‡∏∞'}"

üìù ‡∏™‡∏£‡∏∏‡∏õ: ${opportunity.summary}

üìä ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏ñ‡∏∑‡∏≠: ${opportunity.confidenceScore.toFixed(2)}

üìà ‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°: üî∫ ‡∏´‡∏∏‡πâ‡∏ô‡∏°‡∏µ‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏Ç‡∏∂‡πâ‡∏ô

‚è±Ô∏è ‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå: ${opportunity.timeframe}`;

    if (opportunity.priceTarget) {
      message += `
üéØ ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏£‡∏≤‡∏Ñ‡∏≤: ${opportunity.priceTarget}`;
    }

    // ‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢‡∏ö‡∏ß‡∏Å‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
    if (opportunity.positiveFactors && opportunity.positiveFactors.length > 0) {
      message += `

‚úÖ ‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢‡∏ö‡∏ß‡∏Å:`;
      opportunity.positiveFactors.slice(0, 3).forEach((factor, index) => {
        message += `
${index + 1}. ${factor}`;
      });
    }

    // ‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏´‡∏•‡πà‡∏á‡∏Ç‡πà‡∏≤‡∏ß‡∏´‡∏•‡∏≤‡∏¢‡∏≠‡∏±‡∏ô
    if (stock.news && stock.news.length > 0) {
      message += `

üì∞ ‡πÅ‡∏´‡∏•‡πà‡∏á‡∏Ç‡πà‡∏≤‡∏ß‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á:`;
      
      stock.news.slice(0, 3).forEach((newsItem, index) => {
        message += `

üîó ‡∏Ç‡πà‡∏≤‡∏ß‡∏ó‡∏µ‡πà ${index + 1}: ${newsItem.source}`;
        if (newsItem.title) {
          message += `
‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠: ${newsItem.title.substring(0, 80)}${newsItem.title.length > 80 ? '...' : ''}`;
        }
        if (newsItem.url && newsItem.url !== 'undefined' && !newsItem.url.includes('mock') && !newsItem.url.includes('example')) {
          message += `
‡∏•‡∏¥‡∏á‡∏Å‡πå: ${newsItem.url}`;
        }
      });
    }

    message += `

‚è∞ ‡πÄ‡∏ß‡∏•‡∏≤: ${new Date().toLocaleString('th-TH', { timeZone: 'Asia/Bangkok' })}`;

    return message;
  }

  async sendPushMessage(message) {
    if (!this.userId || this.userId === 'your-line-user-id-here') {
      throw new Error('LINE User ID not configured');
    }

    if (!this.channelAccessToken || this.channelAccessToken === 'your-line-channel-access-token-here') {
      throw new Error('LINE Channel Access Token not configured');
    }

    return await this.withRetry(async () => {
      const response = await axios.post(`${this.messagingApiUrl}/message/push`, {
        to: this.userId,
        messages: [{
          type: 'text',
          text: message
        }]
      }, {
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${this.channelAccessToken}`
        },
        timeout: this.timeout
      });
      
      if (response.status !== 200) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }
      
      logger.info(`‚úÖ LINE message sent successfully`);
      return response.data;
    }, 'LINE push message');
  }

  async replyToUser(replyToken, message) {
    return await this.withRetry(async () => {
      const response = await axios.post(`${this.messagingApiUrl}/message/reply`, {
        replyToken: replyToken,
        messages: [{
          type: 'text',
          text: message
        }]
      }, {
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${this.channelAccessToken}`
        },
        timeout: this.timeout
      });
      
      if (response.status !== 200) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }
      
      logger.info(`‚úÖ Reply sent successfully`);
      return response.data;
    }, 'LINE reply message');
  }

  getRiskEmoji(riskLevel) {
    switch (riskLevel) {
      case 'critical': return 'üíÄ';
      case 'high': return 'üö®';
      case 'medium': return '‚ö†Ô∏è';
      case 'low': return '‚ö°';
      default: return '‚ùì';
    }
  }

  getOpportunityEmoji(opportunityLevel) {
    switch (opportunityLevel) {
      case 'excellent': return 'üöÄ';
      case 'high': return 'üî•';
      case 'medium': return 'üìà';
      case 'low': return 'üí°';
      default: return '‚ùì';
    }
  }

  translateRiskLevel(level) {
    switch (level) {
      case 'critical': return '‡∏ß‡∏¥‡∏Å‡∏§‡∏ï';
      case 'high': return '‡∏™‡∏π‡∏á';
      case 'medium': return '‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á';
      case 'low': return '‡∏ï‡πà‡∏≥';
      default: return '‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö';
    }
  }

  translateOpportunityLevel(level) {
    switch (level) {
      case 'excellent': return '‡∏î‡∏µ‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°';
      case 'high': return '‡∏™‡∏π‡∏á';
      case 'medium': return '‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á';
      case 'low': return '‡∏ï‡πà‡∏≥';
      default: return '‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö';
    }
  }

  async sendAllNewsAlert(allNewsData) {
    logger.info(`üì∞ Sending comprehensive news alert for ${allNewsData.length} stocks with news`);
    
    try {
      // ‡∏™‡πà‡∏á‡∏Ç‡πà‡∏≤‡∏ß‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡πà‡∏≠‡∏ô
      const totalNewsCount = allNewsData.reduce((sum, stockData) => sum + stockData.totalNews, 0);
      const summaryMessage = `üì∞ [‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πà‡∏≤‡∏ß‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô] ${new Date().toLocaleDateString('th-TH', { timeZone: 'Asia/Bangkok' })}

üîç ‡∏£‡∏ß‡∏ö‡∏£‡∏ß‡∏°‡∏Ç‡πà‡∏≤‡∏ß‡∏à‡∏≤‡∏Å ${allNewsData.length} ‡∏´‡∏•‡∏±‡∏Å‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå
üìä ‡∏û‡∏ö‡∏Ç‡πà‡∏≤‡∏ß‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ${totalNewsCount} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£

‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ç‡πà‡∏≤‡∏ß‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏´‡∏•‡∏±‡∏Å‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå‡∏à‡∏∞‡∏™‡πà‡∏á‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏ó‡∏µ‡∏•‡∏∞‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£...`;

      await this.sendPushMessage(summaryMessage);
      await this.delay(5000); // ‡πÄ‡∏û‡∏¥‡πà‡∏° delay ‡πÄ‡∏õ‡πá‡∏ô 5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
      
      // ‡∏™‡πà‡∏á‡∏Ç‡πà‡∏≤‡∏ß‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏´‡∏∏‡πâ‡∏ô‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡∏£‡∏∏‡∏õ‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢
      for (let i = 0; i < allNewsData.length; i++) {
        const stockData = allNewsData[i];
        
        try {
          const messages = await this.formatComprehensiveNewsMessage(stockData);
          
          // ‡∏™‡πà‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
          for (let j = 0; j < messages.length; j++) {
            const message = messages[j];
            await this.sendPushMessage(message);
            
            // ‡πÄ‡∏û‡∏¥‡πà‡∏° delay ‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
            if (j < messages.length - 1) {
              await this.delay(3000); // 3 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
            }
          }
          
          // ‡πÄ‡∏û‡∏¥‡πà‡∏° delay ‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏´‡∏∏‡πâ‡∏ô
          if (i < allNewsData.length - 1) {
            await this.delay(5000); // 5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏´‡∏∏‡πâ‡∏ô
          }
          
        } catch (error) {
          logger.error(`‚ùå Failed to send news for ${stockData.stock.symbol}: ${error.message}`);
        }
      }
      
      // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏¥‡∏î‡∏ó‡πâ‡∏≤‡∏¢
      const closingMessage = `‚úÖ [‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô] ‡∏™‡πà‡∏á‡∏Ç‡πà‡∏≤‡∏ß‡∏Ñ‡∏£‡∏ö‡∏ó‡∏±‡πâ‡∏á ${allNewsData.length} ‡∏´‡∏•‡∏±‡∏Å‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå‡πÅ‡∏•‡πâ‡∏ß

‚è∞ ‡πÄ‡∏ß‡∏•‡∏≤: ${new Date().toLocaleString('th-TH', { timeZone: 'Asia/Bangkok' })}

üì± ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πà‡∏≤‡∏ß‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏ï‡∏≤‡∏°‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Å‡∏≤‡∏£`;

      await this.delay(3000);
      await this.sendPushMessage(closingMessage);
      
    } catch (error) {
      logger.error(`‚ùå Failed to send comprehensive news alert: ${error.message}`);
      throw error;
    }
  }

  async formatComprehensiveNewsMessage(stockData) {
    const { stock, news, isGlobalNews } = stockData;
    const messages = [];
    
    try {
      // ‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πà‡∏≤‡∏ß‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á 1 ‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå
      const oneWeekAgo = new Date();
      oneWeekAgo.setDate(oneWeekAgo.getDate() - 7);
      
      const recentNews = news.combined?.filter(newsItem => {
        if (!newsItem.publishedAt) return false;
        const newsDate = new Date(newsItem.publishedAt);
        return newsDate >= oneWeekAgo;
      }) || [];
      
      if (recentNews.length === 0) {
        const noNewsMessage = isGlobalNews ? 
          `üåç [${stock.displayName}]

‚ÑπÔ∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πà‡∏≤‡∏ß‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á 7 ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏°‡∏≤

‚è∞ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏°‡∏∑‡πà‡∏≠: ${new Date().toLocaleString('th-TH', { timeZone: 'Asia/Bangkok' })}` :
          `üì∞ [${stock.symbol}] ${stock.type}

‚ÑπÔ∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πà‡∏≤‡∏ß‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á 7 ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏°‡∏≤

‚è∞ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏°‡∏∑‡πà‡∏≠: ${new Date().toLocaleString('th-TH', { timeZone: 'Asia/Bangkok' })}`;
        
        messages.push(noNewsMessage);
        return messages;
      }
      
      // ‡πÅ‡∏ö‡πà‡∏á‡∏Ç‡πà‡∏≤‡∏ß‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏•‡∏∏‡∏° (‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 3 ‡∏Ç‡πà‡∏≤‡∏ß‡∏ï‡πà‡∏≠‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°)
      const newsChunks = [];
      for (let i = 0; i < recentNews.length; i += 3) {
        newsChunks.push(recentNews.slice(i, i + 3));
      }
      
      for (let chunkIndex = 0; chunkIndex < newsChunks.length; chunkIndex++) {
        const newsChunk = newsChunks[chunkIndex];
        let message = `üì∞ [${stock.symbol}] ${stock.type} (${chunkIndex + 1}/${newsChunks.length})

üíº ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏•‡∏á‡∏ó‡∏∏‡∏ô: ${stock.amount} ${stock.unit}
üìÖ ‡∏Ç‡πà‡∏≤‡∏ß‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á 7 ‡∏ß‡∏±‡∏ô: ${recentNews.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£\n\n`;

        // ‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πà‡∏≤‡∏ß‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏î‡πâ‡∏ß‡∏¢ AI
        for (let newsIndex = 0; newsIndex < newsChunk.length; newsIndex++) {
          const newsItem = newsChunk[newsIndex];
          const newsNumber = (chunkIndex * 3) + newsIndex + 1;
          
          try {
            // ‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πà‡∏≤‡∏ß‡∏î‡πâ‡∏ß‡∏¢ AI
            const summary = await this.summarizeNewsWithAI(newsItem, stock);
            
            // ‡∏•‡∏ö HTML tags ‡∏à‡∏≤‡∏Å‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤
            const cleanContent = this.removeHtmlTags(summary.contentThai);
            
            message += `üì∞ ‡∏Ç‡πà‡∏≤‡∏ß‡∏ó‡∏µ‡πà ${newsNumber}: ${summary.titleThai}

üìù ‡∏™‡∏£‡∏∏‡∏õ: ${cleanContent}

üí° ‡∏ú‡∏•‡∏Å‡∏£‡∏∞‡∏ó‡∏ö‡∏ï‡πà‡∏≠ ${stock.symbol}: ${summary.impact}

üí∞ ‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤: ${this.formatPriceDirection(summary.priceDirection)} ${this.formatPercentageWithSign(summary.priceChangePercent || '0.5')} (${this.getRiskDescription(summary.riskLevel || '5')})
‚è±Ô∏è ‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤: ${summary.timeframe || '1 ‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå'}
üéØ ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏∏‡πâ‡∏ô‡∏Ç‡∏∂‡πâ‡∏ô‡∏•‡∏á: ${this.formatConfidenceScore(summary.confidence || '‡∏ï‡πà‡∏≥')}/10
üìä ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏ñ‡∏∑‡∏≠‡∏Ç‡∏≠‡∏á‡∏Ç‡πà‡∏≤‡∏ß: ${summary.sourceReliability || '5'}/10

üìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: ${new Date(newsItem.publishedAt).toLocaleDateString('th-TH', { timeZone: 'Asia/Bangkok' })}
üè¢ ‡πÅ‡∏´‡∏•‡πà‡∏á‡∏Ç‡πà‡∏≤‡∏ß: ${newsItem.source || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}`;

            // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏•‡∏¥‡∏á‡∏Ñ‡πå‡∏ñ‡πâ‡∏≤‡∏°‡∏µ ‡πÅ‡∏•‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô URL ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
            if (newsItem.url && 
                newsItem.url !== 'undefined' && 
                !newsItem.url.includes('mock') && 
                newsItem.url.startsWith('http')) {
              message += `\nüîó ‡∏≠‡πà‡∏≤‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°: ${newsItem.url}`;
            }
            
            message += '\n\n';
            
          } catch (aiError) {
            logger.warn(`‚ö†Ô∏è AI summary failed for news ${newsNumber}: ${aiError.message}`);
            
            // Fallback ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ AI
            const cleanFallbackContent = this.removeHtmlTags((newsItem.description || newsItem.content || '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î').substring(0, 150));
            
            message += `üì∞ ‡∏Ç‡πà‡∏≤‡∏ß‡∏ó‡∏µ‡πà ${newsNumber}: ${newsItem.title || '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠'}

üìù ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î: ${cleanFallbackContent}...

üí∞ ‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤: üìäüü° ‡∏Ñ‡∏á‡∏ó‡∏µ‡πà ¬±0.5% (‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á)
‚è±Ô∏è ‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤: 1 ‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå
üéØ ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏∏‡πâ‡∏ô‡∏Ç‡∏∂‡πâ‡∏ô‡∏•‡∏á: 3/10
üìä ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏ñ‡∏∑‡∏≠‡∏Ç‡∏≠‡∏á‡∏Ç‡πà‡∏≤‡∏ß: 5/10

üìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: ${new Date(newsItem.publishedAt).toLocaleDateString('th-TH', { timeZone: 'Asia/Bangkok' })}
üè¢ ‡πÅ‡∏´‡∏•‡πà‡∏á‡∏Ç‡πà‡∏≤‡∏ß: ${newsItem.source || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}`;

            if (newsItem.url && 
                newsItem.url !== 'undefined' && 
                !newsItem.url.includes('mock') && 
                newsItem.url.startsWith('http')) {
              message += `\nüîó ‡∏≠‡πà‡∏≤‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°: ${newsItem.url}`;
            }
            
            message += '\n\n';
          }
        }
        
        message += `‚è∞ ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó: ${new Date().toLocaleString('th-TH', { timeZone: 'Asia/Bangkok' })}`;
        messages.push(message);
      }
      
      return messages;
      
    } catch (error) {
      logger.error(`‚ùå Error formatting comprehensive news for ${stock.symbol}: ${error.message}`);
      
      // Fallback message
      const fallbackMessage = `üì∞ [${stock.symbol}] ${stock.type}

‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ç‡πà‡∏≤‡∏ß: ${error.message}

‚è∞ ‡πÄ‡∏ß‡∏•‡∏≤: ${new Date().toLocaleString('th-TH', { timeZone: 'Asia/Bangkok' })}`;
      
      return [fallbackMessage];
    }
  }

  async summarizeNewsWithAI(newsItem, stock, isGlobalNews = false) {
    try {
      // ‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡πà‡∏≤‡∏ß‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏£‡∏∏‡∏õ
      const newsText = `${newsItem.title || ''} ${newsItem.description || newsItem.content || ''}`;
      
      if (!newsText.trim()) {
        throw new Error('No news content to summarize');
      }
      
      // ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏ñ‡∏∑‡∏≠‡∏Ç‡∏≠‡∏á‡πÅ‡∏´‡∏•‡πà‡∏á‡∏Ç‡πà‡∏≤‡∏ß
      const sourceCredibility = this.evaluateSourceCredibility(newsItem.source);
      
      const prompt = `‡πÅ‡∏õ‡∏•‡πÅ‡∏•‡∏∞‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πà‡∏≤‡∏ß‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡πÉ‡∏´‡πâ‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô ‡πÅ‡∏•‡∏∞‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏á‡πà‡∏≤‡∏¢:

‡∏´‡∏∏‡πâ‡∏ô/‡∏™‡∏¥‡∏ô‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå: ${stock.symbol} (${stock.type})
‡πÅ‡∏´‡∏•‡πà‡∏á‡∏Ç‡πà‡∏≤‡∏ß: ${newsItem.source || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'} (‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏ñ‡∏∑‡∏≠: ${sourceCredibility}/10)

‡∏Ç‡πà‡∏≤‡∏ß‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö (‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©): ${newsText}

‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏≠‡∏ö‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö JSON ‡πÇ‡∏î‡∏¢‡πÅ‡∏õ‡∏•‡∏ó‡∏∏‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢ 100% ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô ‡∏´‡πâ‡∏≤‡∏°‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©:
{
  "titleThai": "‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏Ç‡πà‡∏≤‡∏ß‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏á‡πà‡∏≤‡∏¢ ‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç (70-90 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£)",
  "contentThai": "‡∏™‡∏£‡∏∏‡∏õ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏Ç‡πà‡∏≤‡∏ß‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡πÅ‡∏ö‡∏ö‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô ‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏ ‡∏ú‡∏•‡∏Å‡∏£‡∏∞‡∏ó‡∏ö ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏Ç‡∏≠‡∏á‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡πÉ‡∏´‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡πÑ‡∏î‡πâ‡∏á‡πà‡∏≤‡∏¢ (180-250 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£)",
  "impact": "‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ú‡∏•‡∏Å‡∏£‡∏∞‡∏ó‡∏ö‡∏ï‡πà‡∏≠‡∏´‡∏∏‡πâ‡∏ô ${stock.symbol} ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î ‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏ß‡πà‡∏≤‡∏ó‡∏≥‡πÑ‡∏°‡∏Ç‡πà‡∏≤‡∏ß‡∏ô‡∏µ‡πâ‡∏™‡πà‡∏á‡∏ú‡∏•‡∏î‡∏µ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏î‡∏µ ‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏ú‡∏•‡∏£‡∏∞‡∏¢‡∏∞‡∏™‡∏±‡πâ‡∏ô‡πÅ‡∏•‡∏∞‡∏£‡∏∞‡∏¢‡∏∞‡∏¢‡∏≤‡∏ß ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á (150-200 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£)",
  "priceDirection": "‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏µ‡πà‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå: ‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏∂‡πâ‡∏ô/‡∏õ‡∏£‡∏±‡∏ö‡∏•‡∏á/‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß‡πÉ‡∏ô‡πÅ‡∏ô‡∏ß‡∏ô‡∏≠‡∏ô/‡∏ú‡∏±‡∏ô‡∏ú‡∏ß‡∏ô‡∏™‡∏π‡∏á",
  "priceChangePercent": "‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏ó‡∏µ‡πà‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå (‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô ‡πÄ‡∏ä‡πà‡∏ô 5.2)",
  "timeframe": "‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏Ñ‡∏≤‡∏î‡∏ß‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏´‡πá‡∏ô‡∏ú‡∏•‡∏Å‡∏£‡∏∞‡∏ó‡∏ö ‡πÄ‡∏ä‡πà‡∏ô 1 ‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå, 2 ‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå, 1 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô, 3 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô",
  "sourceReliability": "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏ñ‡∏∑‡∏≠‡∏Ç‡∏≠‡∏á‡πÅ‡∏´‡∏•‡πà‡∏á‡∏Ç‡πà‡∏≤‡∏ß 1-10 (‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô)",
  "riskLevel": "‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏Ç‡∏≠‡∏á‡∏´‡∏∏‡πâ‡∏ô‡∏ô‡∏µ‡πâ 1-10 ‡∏à‡∏≤‡∏Å‡∏Ç‡πà‡∏≤‡∏ß‡∏ô‡∏µ‡πâ (‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô)",
  "explanation": "‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡πÅ‡∏•‡∏∞‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡πÅ‡∏ö‡∏ö‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç ‡πÄ‡∏ä‡πà‡∏ô ‡∏ú‡∏•‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏Å‡∏≤‡∏£ ‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô ‡∏ô‡πÇ‡∏¢‡∏ö‡∏≤‡∏¢‡∏£‡∏±‡∏ê‡∏ö‡∏≤‡∏• ‡∏™‡∏†‡∏≤‡∏û‡∏ï‡∏•‡∏≤‡∏î (200-280 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£)",
  "confidence": "‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå: ‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à‡∏™‡∏π‡∏á/‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á/‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à‡∏ï‡πà‡∏≥"
}

‡∏Ç‡πâ‡∏≠‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥:
- ‡πÅ‡∏õ‡∏•‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢ 100% ‡∏´‡πâ‡∏≤‡∏°‡∏õ‡∏ô‡∏Ñ‡∏≥‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©‡πÄ‡∏î‡πá‡∏î‡∏Ç‡∏≤‡∏î
- ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏®‡∏±‡∏û‡∏ó‡πå‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∏‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
- ‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡πÉ‡∏´‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏á‡πà‡∏≤‡∏¢ ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏£‡∏Å‡∏±‡∏ö‡∏ô‡∏±‡∏Å‡∏•‡∏á‡∏ó‡∏∏‡∏ô‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ
- ‡∏£‡∏∞‡∏ö‡∏∏‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏´‡∏ï‡∏∏‡πÄ‡∏õ‡πá‡∏ô‡∏ú‡∏•
- ‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡∏®‡∏±‡∏û‡∏ó‡πå‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ‡∏ó‡∏µ‡πà‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏á‡πà‡∏≤‡∏¢‡πÜ ‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡πÑ‡∏î‡πâ
- ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡πÑ‡∏ó‡∏¢‡πÅ‡∏ó‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á ‡πÅ‡∏•‡∏∞‡∏®‡∏±‡∏û‡∏ó‡πå‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á
- ‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏‡πÅ‡∏•‡∏∞‡∏ú‡∏•‡∏ó‡∏µ‡πà‡∏ï‡∏≤‡∏°‡∏°‡∏≤‡πÉ‡∏´‡πâ‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á‡∏Å‡∏±‡∏ô‡πÑ‡∏î‡πâ
- ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ú‡∏•‡∏Å‡∏£‡∏∞‡∏ó‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏£‡∏∞‡∏¢‡∏∞‡∏™‡∏±‡πâ‡∏ô‡πÅ‡∏•‡∏∞‡∏£‡∏∞‡∏¢‡∏∞‡∏¢‡∏≤‡∏ß
- ‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå ‡∏°‡∏µ‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏• ‡πÅ‡∏•‡∏∞‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ô‡∏≥‡πÑ‡∏õ‡πÉ‡∏ä‡πâ‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡πÑ‡∏î‡πâ
- ‡πÉ‡∏ä‡πâ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÅ‡∏•‡∏∞‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô`;

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ñ‡∏ß‡∏£‡πÉ‡∏ä‡πâ AI ‡πÑ‡∏´‡∏ô
      const shouldUseChatGPT = process.env.OPENAI_API_KEY && 
                              process.env.OPENAI_API_KEY !== 'disabled' && 
                              process.env.OPENAI_API_KEY !== 'sk-your-openai-api-key-here';

      if (!shouldUseChatGPT) {
        // ‡πÉ‡∏ä‡πâ Gemini ‡∏ü‡∏£‡∏µ
        const GeminiAnalysisService = require('./geminiAnalysisService');
        const geminiService = new GeminiAnalysisService();
        
        const geminiResponse = await geminiService.callGeminiAPI(prompt, 0, 400);
        const cleanedResponse = geminiResponse.replace(/```json\s*/g, '').replace(/```/g, '').trim();
        
        try {
          const parsed = JSON.parse(cleanedResponse);
          // ‡πÄ‡∏û‡∏¥‡πà‡∏° URL ‡πÅ‡∏•‡∏∞ source ‡∏à‡∏≤‡∏Å‡∏Ç‡πà‡∏≤‡∏ß‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö
          return {
            ...parsed,
            url: newsItem.url || newsItem.link || null,
            source: newsItem.source || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'
          };
        } catch (parseError) {
          // Fallback parsing
          return this.parseAIResponseFallback(geminiResponse, newsItem, stock);
        }
      }

      // ‡∏•‡∏≠‡∏á ChatGPT ‡∏Å‡πà‡∏≠‡∏ô
      try {
        const axios = require('axios');
        const response = await axios.post('https://api.openai.com/v1/chat/completions', {
          model: process.env.OPENAI_MODEL || "gpt-3.5-turbo",
          messages: [{ role: "user", content: prompt }],
          max_tokens: 500,
          temperature: 0.3
        }, {
          headers: {
            'Authorization': `Bearer ${process.env.OPENAI_API_KEY}`,
            'Content-Type': 'application/json'
          },
          timeout: this.timeout
        });

        const content = response.data.choices[0].message.content;
        try {
          const parsed = JSON.parse(content);
          // ‡πÄ‡∏û‡∏¥‡πà‡∏° URL ‡πÅ‡∏•‡∏∞ source ‡∏à‡∏≤‡∏Å‡∏Ç‡πà‡∏≤‡∏ß‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö
          return {
            ...parsed,
            url: newsItem.url || newsItem.link || null,
            source: newsItem.source || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'
          };
        } catch (parseError) {
          return this.parseAIResponseFallback(content, newsItem, stock);
        }
        
      } catch (chatgptError) {
        // ‡∏™‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÉ‡∏ä‡πâ Gemini
        const GeminiAnalysisService = require('./geminiAnalysisService');
        const geminiService = new GeminiAnalysisService();
        
        const geminiResponse = await geminiService.callGeminiAPI(prompt, 0, 400);
        const cleanedResponse = geminiResponse.replace(/```json\s*/g, '').replace(/```/g, '').trim();
        
        try {
          const parsed = JSON.parse(cleanedResponse);
          // ‡πÄ‡∏û‡∏¥‡πà‡∏° URL ‡πÅ‡∏•‡∏∞ source ‡∏à‡∏≤‡∏Å‡∏Ç‡πà‡∏≤‡∏ß‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö
          return {
            ...parsed,
            url: newsItem.url || newsItem.link || null,
            source: newsItem.source || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'
          };
        } catch (parseError) {
          return this.parseAIResponseFallback(geminiResponse, newsItem, stock);
        }
      }
      
    } catch (error) {
      logger.warn(`‚ö†Ô∏è AI summarization failed: ${error.message}`);
      
      // Manual fallback
      return {
        titleThai: this.translateToThai(newsItem.title || '‡∏Ç‡πà‡∏≤‡∏ß‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠'),
        contentThai: this.translateToThai((newsItem.description || newsItem.content || '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î').substring(0, 120)),
        impact: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏ú‡∏•‡∏Å‡∏£‡∏∞‡∏ó‡∏ö‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ',
        priceDirection: '‡πÑ‡∏°‡πà‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á',
        priceChangePercent: '0%',
        timeframe: '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏',
        confidence: '‡∏ï‡πà‡∏≥'
      };
    }
  }

  parseAIResponseFallback(response, newsItem, stock) {
    // ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å response ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà JSON ‡πÅ‡∏•‡πâ‡∏ß‡πÅ‡∏õ‡∏•‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏ó‡∏¢‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
    const lines = response.split('\n').filter(line => line.trim());
    
    let titleThai = newsItem.title || '‡∏Ç‡πà‡∏≤‡∏ß‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠';
    let contentThai = (newsItem.description || newsItem.content || '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î');
    let impact = '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏ú‡∏•‡∏Å‡∏£‡∏∞‡∏ó‡∏ö‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠';
    
    // ‡πÅ‡∏õ‡∏•‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡πÅ‡∏•‡∏∞‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏ó‡∏¢‡πÅ‡∏ö‡∏ö‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
    titleThai = this.translateToThai(titleThai);
    contentThai = this.translateToThai(contentThai);
    
    // ‡∏•‡∏ö HTML tags ‡πÅ‡∏•‡∏∞ CDATA ‡∏à‡∏≤‡∏Å‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤
    contentThai = this.removeHtmlTags(contentThai);
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏™‡∏£‡∏∏‡∏õ‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ (180-250 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£)
    if (contentThai.length < 180) {
      contentThai += ' ‡∏Ç‡πà‡∏≤‡∏ß‡∏ô‡∏µ‡πâ‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö‡∏´‡∏∏‡πâ‡∏ô ' + stock.symbol + ' ‡∏ã‡∏∂‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô' + stock.type + ' ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏ï‡πà‡∏≠‡∏ï‡∏•‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô ‡∏ô‡∏±‡∏Å‡∏•‡∏á‡∏ó‡∏∏‡∏ô‡∏Ñ‡∏ß‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÉ‡∏Å‡∏•‡πâ‡∏ä‡∏¥‡∏î';
      
      // ‡∏´‡∏≤‡∏Å‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏û‡∏≠ ‡πÉ‡∏´‡πâ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ
      if (contentThai.length < 180) {
        contentThai += ' ‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏ô‡∏µ‡πâ‡∏≠‡∏≤‡∏à‡∏™‡πà‡∏á‡∏ú‡∏•‡∏Å‡∏£‡∏∞‡∏ó‡∏ö‡∏ï‡πà‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤‡∏´‡∏∏‡πâ‡∏ô‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏£‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡∏•‡∏á‡∏ó‡∏∏‡∏ô';
      }
    }
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏•‡∏Å‡∏£‡∏∞‡∏ó‡∏ö‡∏ó‡∏µ‡πà‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô (150-200 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£)
    impact = `‡∏Ç‡πà‡∏≤‡∏ß‡∏ô‡∏µ‡πâ‡∏≠‡∏≤‡∏à‡∏°‡∏µ‡∏ú‡∏•‡∏Å‡∏£‡∏∞‡∏ó‡∏ö‡∏ï‡πà‡∏≠‡∏´‡∏∏‡πâ‡∏ô ${stock.symbol} ‡πÅ‡∏ï‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏° ‡πÇ‡∏î‡∏¢‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡πÄ‡∏ä‡πà‡∏ô ‡∏ú‡∏•‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏Å‡∏≤‡∏£ ‡∏™‡∏†‡∏≤‡∏û‡∏ï‡∏•‡∏≤‡∏î ‡πÅ‡∏•‡∏∞‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡πÄ‡∏®‡∏£‡∏©‡∏ê‡∏Å‡∏¥‡∏à ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏ú‡∏•‡∏Å‡∏£‡∏∞‡∏ó‡∏ö‡∏ó‡∏µ‡πà‡πÅ‡∏ó‡πâ‡∏à‡∏£‡∏¥‡∏á`;

    return {
      titleThai: titleThai.substring(0, 80), // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å 60 ‡πÄ‡∏õ‡πá‡∏ô 80 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£
      contentThai: contentThai.substring(0, 250), // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å 120 ‡πÄ‡∏õ‡πá‡∏ô 250 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£
      impact: impact.substring(0, 200), // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å 80 ‡πÄ‡∏õ‡πá‡∏ô 200 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£
      priceDirection: '‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß‡πÉ‡∏ô‡πÅ‡∏ô‡∏ß‡∏ô‡∏≠‡∏ô',
      priceChangePercent: '0.5',
      timeframe: '1 ‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå',
      sourceReliability: '5',
      riskLevel: '5',
      explanation: `‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ${stock.symbol} ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏´‡πâ‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏Å‡πà‡∏≠‡∏ô‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡∏•‡∏á‡∏ó‡∏∏‡∏ô ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏ï‡∏•‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏±‡∏ô‡∏ú‡∏ß‡∏ô‡πÅ‡∏•‡∏∞‡∏°‡∏µ‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢‡∏´‡∏•‡∏≤‡∏¢‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏ú‡∏•`,
      confidence: '‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à‡∏ï‡πà‡∏≥',
      url: newsItem.url || newsItem.link || null,
      source: newsItem.source || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'
    };
  }

  formatPriceDirection(direction) {
    switch (direction?.toLowerCase()) {
      case '‡∏Ç‡∏∂‡πâ‡∏ô':
      case '‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏∂‡πâ‡∏ô':
      case '‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏∂‡πâ‡∏ô':
      case 'up':
        return 'üìàüü¢ ‡∏Ç‡∏∂‡πâ‡∏ô';
      case '‡∏•‡∏á':
      case '‡∏•‡∏î‡∏•‡∏á':
      case '‡∏õ‡∏£‡∏±‡∏ö‡∏•‡∏á':
      case 'down':
        return 'üìâüî¥ ‡∏•‡∏á';
      case '‡∏Ñ‡∏á‡∏ó‡∏µ‡πà':
      case '‡πÑ‡∏°‡πà‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á':
      case '‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß‡πÉ‡∏ô‡πÅ‡∏ô‡∏ß‡∏ô‡∏≠‡∏ô':
      case 'stable':
      case 'no change':
        return 'üìäüü° ‡∏Ñ‡∏á‡∏ó‡∏µ‡πà';
      case '‡∏ú‡∏±‡∏ô‡∏ú‡∏ß‡∏ô':
      case '‡∏ú‡∏±‡∏ô‡∏ú‡∏ß‡∏ô‡∏™‡∏π‡∏á':
      case 'volatile':
        return 'üìäüü† ‡∏ú‡∏±‡∏ô‡∏ú‡∏ß‡∏ô';
      default:
        return 'üìäüü° ‡∏Ñ‡∏á‡∏ó‡∏µ‡πà';
    }
  }

  formatPercentageWithSign(percentage) {
    const num = parseFloat(percentage.toString().replace('%', ''));
    if (num > 0) {
      return `+${num}%`;
    } else if (num < 0) {
      return `${num}%`;
    } else {
      return `¬±${Math.abs(num)}%`;
    }
  }

  formatConfidenceScore(confidence) {
    if (typeof confidence === 'string') {
      switch (confidence.toLowerCase()) {
        case '‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à‡∏™‡∏π‡∏á':
        case '‡∏™‡∏π‡∏á':
          return '8';
        case '‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á':
        case '‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á':
          return '5';
        case '‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à‡∏ï‡πà‡∏≥':
        case '‡∏ï‡πà‡∏≥':
        default:
          return '3';
      }
    }
    return confidence.toString();
  }

  getRiskDescription(riskLevel) {
    const risk = parseInt(riskLevel);
    if (risk >= 8) return '‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏™‡∏π‡∏á';
    if (risk >= 6) return '‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á';
    if (risk >= 4) return '‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á';
    return '‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏ï‡πà‡∏≥';
  }

  removeHtmlTags(text) {
    if (!text) return '';
    
    return text
      // ‡∏•‡∏ö CDATA
      .replace(/<<!\[CDATA\[/g, '')
      .replace(/\]\]>/g, '')
      // ‡∏•‡∏ö HTML tags ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
      .replace(/<[^>]*>/g, '')
      // ‡∏•‡∏ö HTML entities
      .replace(/&nbsp;/g, ' ')
      .replace(/&amp;/g, '&')
      .replace(/&lt;/g, '<')
      .replace(/&gt;/g, '>')
      .replace(/&quot;/g, '"')
      .replace(/&#39;/g, "'")
      // ‡∏•‡∏ö‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏Å‡∏¥‡∏ô
      .replace(/\s+/g, ' ')
      .trim();
  }

  translateToThai(englishText) {
    // ‡πÅ‡∏õ‡∏•‡∏Ñ‡∏≥‡∏®‡∏±‡∏û‡∏ó‡πå‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏ó‡∏¢‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏•‡∏∏‡∏°
    if (!englishText) return '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•';
    
    let translated = englishText;
    
    // ‡πÅ‡∏õ‡∏•‡∏Ñ‡∏≥‡∏®‡∏±‡∏û‡∏ó‡πå‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∏‡∏ô‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô
    const financialTranslations = {
      // ‡∏Ñ‡∏≥‡∏®‡∏±‡∏û‡∏ó‡πå‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
      'stock': '‡∏´‡∏∏‡πâ‡∏ô', 'stocks': '‡∏´‡∏∏‡πâ‡∏ô', 'shares': '‡∏´‡∏∏‡πâ‡∏ô', 'equity': '‡∏´‡∏∏‡πâ‡∏ô',
      'market': '‡∏ï‡∏•‡∏≤‡∏î', 'markets': '‡∏ï‡∏•‡∏≤‡∏î', 'trading': '‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠‡∏Ç‡∏≤‡∏¢',
      'price': '‡∏£‡∏≤‡∏Ñ‡∏≤', 'prices': '‡∏£‡∏≤‡∏Ñ‡∏≤', 'pricing': '‡∏Å‡∏≤‡∏£‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏£‡∏≤‡∏Ñ‡∏≤',
      'earnings': '‡∏Å‡∏≥‡πÑ‡∏£', 'profit': '‡∏Å‡∏≥‡πÑ‡∏£', 'profits': '‡∏Å‡∏≥‡πÑ‡∏£', 'revenue': '‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ',
      'loss': '‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô', 'losses': '‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô', 'deficit': '‡∏Ç‡∏≤‡∏î‡∏î‡∏∏‡∏•',
      
      // ‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡πÄ‡∏à‡∏≤‡∏∞‡∏à‡∏á‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô
      'futures': '‡∏ü‡∏¥‡∏ß‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏™', 'future': '‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï', 'gained': '‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏∂‡πâ‡∏ô', 'gain': '‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö',
      'optimism': '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏≠‡∏á‡πÉ‡∏ô‡πÅ‡∏á‡πà‡∏î‡∏µ', 'ahead': '‡∏Ç‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤', 'meeting': '‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°',
      'negotiators': '‡∏ú‡∏π‡πâ‡πÄ‡∏à‡∏£‡∏à‡∏≤', 'top': '‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏™‡∏π‡∏á', 'expressed': '‡πÅ‡∏™‡∏î‡∏á‡∏≠‡∏≠‡∏Å',
      'reach': '‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á', 'key': '‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç', 'later': '‡∏ï‡πà‡∏≠‡∏°‡∏≤', 'between': '‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á',
      'could': '‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ', 'play': '‡πÄ‡∏•‡πà‡∏ô', 'like': '‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô', 'pro': '‡∏°‡∏∑‡∏≠‡∏≠‡∏≤‡∏ä‡∏µ‡∏û',
      'surveyed': '‡∏™‡∏≥‡∏£‡∏ß‡∏à', 'favored': '‡∏ó‡∏µ‡πà‡∏ä‡∏∑‡πà‡∏ô‡∏ä‡∏≠‡∏ö', 'picks': '‡πÄ‡∏•‡∏∑‡∏≠‡∏Å', 'heading': '‡∏°‡∏∏‡πà‡∏á‡∏´‡∏ô‡πâ‡∏≤',
      'into': '‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà', 'identified': '‡∏£‡∏∞‡∏ö‡∏∏', 'across': '‡∏ó‡∏±‡πà‡∏ß‡∏ó‡∏±‡πâ‡∏á', 'sector': '‡∏†‡∏≤‡∏Ñ‡∏™‡πà‡∏ß‡∏ô',
      'faces': '‡πÄ‡∏ú‡∏ä‡∏¥‡∏ç', 'midweek': '‡∏Å‡∏•‡∏≤‡∏á‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå', 'double': '‡∏™‡∏≠‡∏á', 'whammy': '‡πÄ‡∏´‡∏ï‡∏∏‡∏£‡πâ‡∏≤‡∏¢',
      'decision': '‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à', 'collides': '‡∏Ç‡∏±‡∏î‡πÅ‡∏¢‡πâ‡∏á', 'with': '‡∏Å‡∏±‡∏ö', 'flood': '‡∏Å‡∏£‡∏∞‡πÅ‡∏™',
      'megacap': '‡∏´‡∏∏‡πâ‡∏ô‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏´‡∏ç‡πà', 'record-setting': '‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÉ‡∏´‡∏°‡πà', 'rally': '‡∏Å‡∏≤‡∏£‡∏Ç‡∏∂‡πâ‡∏ô',
      'pivotal': '‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç', 'interest-rate': '‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏î‡∏≠‡∏Å‡πÄ‡∏ö‡∏µ‡πâ‡∏¢',
      
      // ‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏•‡∏∞‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤
      'quarter': '‡πÑ‡∏ï‡∏£‡∏°‡∏≤‡∏™', 'quarterly': '‡∏£‡∏≤‡∏¢‡πÑ‡∏ï‡∏£‡∏°‡∏≤‡∏™', 'Q1': '‡πÑ‡∏ï‡∏£‡∏°‡∏≤‡∏™ 1', 'Q2': '‡πÑ‡∏ï‡∏£‡∏°‡∏≤‡∏™ 2', 'Q3': '‡πÑ‡∏ï‡∏£‡∏°‡∏≤‡∏™ 3', 'Q4': '‡πÑ‡∏ï‡∏£‡∏°‡∏≤‡∏™ 4',
      'annual': '‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏õ‡∏µ', 'annually': '‡∏ó‡∏∏‡∏Å‡∏õ‡∏µ', 'year': '‡∏õ‡∏µ', 'yearly': '‡∏£‡∏≤‡∏¢‡∏õ‡∏µ',
      'month': '‡πÄ‡∏î‡∏∑‡∏≠‡∏ô', 'monthly': '‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô', 'week': '‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå', 'weekly': '‡∏£‡∏≤‡∏¢‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå',
      'day': '‡∏ß‡∏±‡∏ô', 'daily': '‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô', 'sunday': '‡∏ß‡∏±‡∏ô‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå', 'monday': '‡∏ß‡∏±‡∏ô‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå',
      'tuesday': '‡∏ß‡∏±‡∏ô‡∏≠‡∏±‡∏á‡∏Ñ‡∏≤‡∏£', 'wednesday': '‡∏ß‡∏±‡∏ô‡∏û‡∏∏‡∏ò', 'thursday': '‡∏ß‡∏±‡∏ô‡∏û‡∏§‡∏´‡∏±‡∏™‡∏ö‡∏î‡∏µ',
      'friday': '‡∏ß‡∏±‡∏ô‡∏®‡∏∏‡∏Å‡∏£‡πå', 'saturday': '‡∏ß‡∏±‡∏ô‡πÄ‡∏™‡∏≤‡∏£‡πå',
      
      // ‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏£‡πÅ‡∏•‡∏∞‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó
      'company': '‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó', 'companies': '‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó', 'corporation': '‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó',
      'business': '‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à', 'businesses': '‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à', 'firm': '‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó', 'firms': '‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó',
      'enterprise': '‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏£', 'startup': '‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô', 'organization': '‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏£',
      
      // ‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∏‡∏ô‡πÅ‡∏•‡∏∞‡∏ô‡∏±‡∏Å‡∏•‡∏á‡∏ó‡∏∏‡∏ô
      'investment': '‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∏‡∏ô', 'investments': '‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∏‡∏ô', 'investor': '‡∏ô‡∏±‡∏Å‡∏•‡∏á‡∏ó‡∏∏‡∏ô', 'investors': '‡∏ô‡∏±‡∏Å‡∏•‡∏á‡∏ó‡∏∏‡∏ô',
      'portfolio': '‡∏û‡∏≠‡∏£‡πå‡∏ï‡πÇ‡∏ü‡∏•‡∏¥‡πÇ‡∏≠', 'fund': '‡∏Å‡∏≠‡∏á‡∏ó‡∏∏‡∏ô', 'funds': '‡∏Å‡∏≠‡∏á‡∏ó‡∏∏‡∏ô',
      'asset': '‡∏™‡∏¥‡∏ô‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå', 'assets': '‡∏™‡∏¥‡∏ô‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå', 'liability': '‡∏´‡∏ô‡∏µ‡πâ‡∏™‡∏¥‡∏ô', 'liabilities': '‡∏´‡∏ô‡∏µ‡πâ‡∏™‡∏¥‡∏ô',
      
      // ‡πÄ‡∏®‡∏£‡∏©‡∏ê‡∏Å‡∏¥‡∏à‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô
      'financial': '‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô', 'finance': '‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô', 'economy': '‡πÄ‡∏®‡∏£‡∏©‡∏ê‡∏Å‡∏¥‡∏à', 'economic': '‡∏ó‡∏≤‡∏á‡πÄ‡∏®‡∏£‡∏©‡∏ê‡∏Å‡∏¥‡∏à',
      'inflation': '‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏ü‡πâ‡∏≠', 'deflation': '‡πÄ‡∏á‡∏¥‡∏ô‡∏ù‡∏∑‡∏î', 'recession': '‡πÄ‡∏®‡∏£‡∏©‡∏ê‡∏Å‡∏¥‡∏à‡∏ñ‡∏î‡∏ñ‡∏≠‡∏¢',
      'gdp': '‡∏ú‡∏•‡∏¥‡∏ï‡∏†‡∏±‡∏ì‡∏ë‡πå‡∏°‡∏ß‡∏•‡∏£‡∏ß‡∏°‡πÉ‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®', 'interest rate': '‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏î‡∏≠‡∏Å‡πÄ‡∏ö‡∏µ‡πâ‡∏¢', 'interest rates': '‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏î‡∏≠‡∏Å‡πÄ‡∏ö‡∏µ‡πâ‡∏¢',
      
      // ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á
      'growth': '‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏¥‡∏ö‡πÇ‡∏ï', 'growing': '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ï‡∏¥‡∏ö‡πÇ‡∏ï', 'decline': '‡∏•‡∏î‡∏•‡∏á', 'declining': '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏•‡∏î‡∏•‡∏á',
      'increase': '‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏∂‡πâ‡∏ô', 'increasing': '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏∂‡πâ‡∏ô', 'decrease': '‡∏•‡∏î‡∏•‡∏á', 'decreasing': '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏•‡∏î‡∏•‡∏á',
      'rise': '‡∏Ç‡∏∂‡πâ‡∏ô', 'rising': '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ç‡∏∂‡πâ‡∏ô', 'fall': '‡∏•‡∏á', 'falling': '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏•‡∏á', 'drop': '‡∏ï‡∏Å', 'dropping': '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏Å',
      'surge': '‡∏û‡∏∏‡πà‡∏á‡∏Ç‡∏∂‡πâ‡∏ô', 'surging': '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏û‡∏∏‡πà‡∏á‡∏Ç‡∏∂‡πâ‡∏ô', 'plunge': '‡∏î‡∏¥‡πà‡∏á‡∏•‡∏á', 'plunging': '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏¥‡πà‡∏á‡∏•‡∏á',
      'soar': '‡∏ó‡∏∞‡∏¢‡∏≤‡∏ô', 'soaring': '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏∞‡∏¢‡∏≤‡∏ô', 'crash': '‡∏•‡πà‡∏°‡∏™‡∏•‡∏≤‡∏¢', 'crashing': '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏•‡πà‡∏°‡∏™‡∏•‡∏≤‡∏¢',
      'boom': '‡∏ö‡∏π‡∏°', 'bust': '‡∏ñ‡∏î‡∏ñ‡∏≠‡∏¢', 'bubble': '‡∏ü‡∏≠‡∏á‡∏™‡∏ö‡∏π‡πà', 'volatile': '‡∏ú‡∏±‡∏ô‡∏ú‡∏ß‡∏ô', 'volatility': '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏±‡∏ô‡∏ú‡∏ß‡∏ô',
      
      // ‡∏Ñ‡∏≥‡∏Å‡∏£‡∏¥‡∏¢‡∏≤‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≥‡∏Ñ‡∏∏‡∏ì‡∏®‡∏±‡∏û‡∏ó‡πå‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ
      'over': '‡πÄ‡∏´‡∏ô‡∏∑‡∏≠', 'under': '‡πÉ‡∏ï‡πâ', 'after': '‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å', 'before': '‡∏Å‡πà‡∏≠‡∏ô',
      'during': '‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á', 'while': '‡∏Ç‡∏ì‡∏∞‡∏ó‡∏µ‡πà', 'when': '‡πÄ‡∏°‡∏∑‡πà‡∏≠', 'where': '‡∏ó‡∏µ‡πà‡πÑ‡∏´‡∏ô',
      'what': '‡∏≠‡∏∞‡πÑ‡∏£', 'why': '‡∏ó‡∏≥‡πÑ‡∏°', 'how': '‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏£', 'who': '‡πÉ‡∏Ñ‡∏£‡∏ö‡πâ‡∏≤‡∏á',
      'new': '‡πÉ‡∏´‡∏°‡πà', 'old': '‡πÄ‡∏Å‡πà‡∏≤', 'high': '‡∏™‡∏π‡∏á', 'low': '‡∏ï‡πà‡∏≥', 'big': '‡πÉ‡∏´‡∏ç‡πà', 'small': '‡πÄ‡∏•‡πá‡∏Å',
      'good': '‡∏î‡∏µ', 'bad': '‡πÅ‡∏¢‡πà', 'better': '‡∏î‡∏µ‡∏Å‡∏ß‡πà‡∏≤', 'worse': '‡πÅ‡∏¢‡πà‡∏Å‡∏ß‡πà‡∏≤', 'best': '‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î', 'worst': '‡πÅ‡∏¢‡πà‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î',
      'more': '‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤', 'less': '‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤', 'most': '‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î', 'least': '‡∏ô‡πâ‡∏≠‡∏¢‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î',
      'up': '‡∏Ç‡∏∂‡πâ‡∏ô', 'down': '‡∏•‡∏á', 'in': '‡πÉ‡∏ô', 'out': '‡∏≠‡∏≠‡∏Å', 'on': '‡∏ö‡∏ô', 'off': '‡∏õ‡∏¥‡∏î',
      'this': '‡∏ô‡∏µ‡πâ', 'that': '‡∏ô‡∏±‡πâ‡∏ô', 'these': '‡πÄ‡∏´‡∏•‡πà‡∏≤‡∏ô‡∏µ‡πâ', 'those': '‡πÄ‡∏´‡∏•‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô',
      'and': '‡πÅ‡∏•‡∏∞', 'or': '‡∏´‡∏£‡∏∑‡∏≠', 'but': '‡πÅ‡∏ï‡πà', 'so': '‡∏î‡∏±‡∏á‡∏ô‡∏±‡πâ‡∏ô', 'because': '‡πÄ‡∏û‡∏£‡∏≤‡∏∞',
      'if': '‡∏´‡∏≤‡∏Å', 'then': '‡πÅ‡∏•‡πâ‡∏ß', 'now': '‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ', 'soon': '‡πÄ‡∏£‡πá‡∏ß‡πÜ ‡∏ô‡∏µ‡πâ', 'never': '‡πÑ‡∏°‡πà‡πÄ‡∏Ñ‡∏¢',
      'always': '‡πÄ‡∏™‡∏°‡∏≠', 'sometimes': '‡∏ö‡∏≤‡∏á‡∏Ñ‡∏£‡∏±‡πâ‡∏á', 'often': '‡∏ö‡πà‡∏≠‡∏¢‡∏Ñ‡∏£‡∏±‡πâ‡∏á', 'usually': '‡πÇ‡∏î‡∏¢‡∏õ‡∏Å‡∏ï‡∏¥',
      
      // ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£
      'report': '‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô', 'reports': '‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô', 'announcement': '‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®', 'announcements': '‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®',
      'statement': '‡∏Ñ‡∏≥‡πÅ‡∏ñ‡∏•‡∏á', 'statements': '‡∏Ñ‡∏≥‡πÅ‡∏ñ‡∏•‡∏á', 'news': '‡∏Ç‡πà‡∏≤‡∏ß', 'update': '‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï', 'updates': '‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï',
      'forecast': '‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå', 'forecasts': '‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå', 'outlook': '‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°', 'prediction': '‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢',
      
      // ‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à
      'acquisition': '‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠‡∏Å‡∏¥‡∏à‡∏Å‡∏≤‡∏£', 'acquisitions': '‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠‡∏Å‡∏¥‡∏à‡∏Å‡∏≤‡∏£',
      'merger': '‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ß‡∏ö‡∏£‡∏ß‡∏°‡∏Å‡∏¥‡∏à‡∏Å‡∏≤‡∏£', 'mergers': '‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ß‡∏ö‡∏£‡∏ß‡∏°‡∏Å‡∏¥‡∏à‡∏Å‡∏≤‡∏£',
      'partnership': '‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡πá‡∏ô‡∏û‡∏±‡∏ô‡∏ò‡∏°‡∏¥‡∏ï‡∏£', 'partnerships': '‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡πá‡∏ô‡∏û‡∏±‡∏ô‡∏ò‡∏°‡∏¥‡∏ï‡∏£',
      'agreement': '‡∏Ç‡πâ‡∏≠‡∏ï‡∏Å‡∏•‡∏á', 'agreements': '‡∏Ç‡πâ‡∏≠‡∏ï‡∏Å‡∏•‡∏á', 'contract': '‡∏™‡∏±‡∏ç‡∏ç‡∏≤', 'contracts': '‡∏™‡∏±‡∏ç‡∏ç‡∏≤',
      'deal': '‡∏Ç‡πâ‡∏≠‡∏ï‡∏Å‡∏•‡∏á', 'deals': '‡∏Ç‡πâ‡∏≠‡∏ï‡∏Å‡∏•‡∏á', 'transaction': '‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°', 'transactions': '‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°',
      
      // ‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ
      'technology': '‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ', 'tech': '‡πÄ‡∏ó‡∏Ñ', 'digital': '‡∏î‡∏¥‡∏à‡∏¥‡∏ó‡∏±‡∏•', 'AI': '‡∏õ‡∏±‡∏ç‡∏ç‡∏≤‡∏õ‡∏£‡∏∞‡∏î‡∏¥‡∏©‡∏ê‡πå',
      'artificial intelligence': '‡∏õ‡∏±‡∏ç‡∏ç‡∏≤‡∏õ‡∏£‡∏∞‡∏î‡∏¥‡∏©‡∏ê‡πå', 'software': '‡∏ã‡∏≠‡∏ü‡∏ï‡πå‡πÅ‡∏ß‡∏£‡πå', 'hardware': '‡∏Æ‡∏≤‡∏£‡πå‡∏î‡πÅ‡∏ß‡∏£‡πå',
      'internet': '‡∏≠‡∏¥‡∏ô‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÄ‡∏ô‡πá‡∏ï', 'online': '‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå', 'platform': '‡πÅ‡∏û‡∏•‡∏ï‡∏ü‡∏≠‡∏£‡πå‡∏°', 'platforms': '‡πÅ‡∏û‡∏•‡∏ï‡∏ü‡∏≠‡∏£‡πå‡∏°',
      
      // ‡∏ú‡∏π‡πâ‡∏Ñ‡∏ô‡πÅ‡∏•‡∏∞‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á
      'CEO': '‡∏ú‡∏π‡πâ‡∏≠‡∏≥‡∏ô‡∏ß‡∏¢‡∏Å‡∏≤‡∏£‡∏ö‡∏£‡∏¥‡∏´‡∏≤‡∏£', 'CFO': '‡∏ú‡∏π‡πâ‡∏≠‡∏≥‡∏ô‡∏ß‡∏¢‡∏Å‡∏≤‡∏£‡∏ù‡πà‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô', 'CTO': '‡∏ú‡∏π‡πâ‡∏≠‡∏≥‡∏ô‡∏ß‡∏¢‡∏Å‡∏≤‡∏£‡∏ù‡πà‡∏≤‡∏¢‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ',
      'president': '‡∏õ‡∏£‡∏∞‡∏ò‡∏≤‡∏ô', 'executive': '‡∏ú‡∏π‡πâ‡∏ö‡∏£‡∏¥‡∏´‡∏≤‡∏£', 'executives': '‡∏ú‡∏π‡πâ‡∏ö‡∏£‡∏¥‡∏´‡∏≤‡∏£',
      'analyst': '‡∏ô‡∏±‡∏Å‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå', 'analysts': '‡∏ô‡∏±‡∏Å‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå', 'expert': '‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç', 'experts': '‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç',
      'director': '‡∏Å‡∏£‡∏£‡∏°‡∏Å‡∏≤‡∏£', 'board': '‡∏Ñ‡∏ì‡∏∞‡∏Å‡∏£‡∏£‡∏°‡∏Å‡∏≤‡∏£', 'chairman': '‡∏õ‡∏£‡∏∞‡∏ò‡∏≤‡∏ô‡∏Å‡∏£‡∏£‡∏°‡∏Å‡∏≤‡∏£',
      
      // ‡∏ï‡∏•‡∏≤‡∏î‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏≤
      'trading': '‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠‡∏Ç‡∏≤‡∏¢', 'trade': '‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏≤', 'trader': '‡∏ô‡∏±‡∏Å‡∏ã‡∏∑‡πâ‡∏≠‡∏Ç‡∏≤‡∏¢', 'traders': '‡∏ô‡∏±‡∏Å‡∏ã‡∏∑‡πâ‡∏≠‡∏Ç‡∏≤‡∏¢',
      'exchange': '‡∏ï‡∏•‡∏≤‡∏î‡∏´‡∏•‡∏±‡∏Å‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå', 'nasdaq': '‡∏ô‡∏≤‡∏™‡πÅ‡∏î‡∏Å', 'nyse': '‡∏ô‡∏¥‡∏ß‡∏¢‡∏≠‡∏£‡πå‡∏Å‡∏™‡∏ï‡πá‡∏≠‡∏Å‡πÄ‡∏≠‡πá‡∏Å‡∏ã‡πå‡πÄ‡∏ä‡∏ô‡∏à‡πå',
      'dow jones': '‡∏î‡∏≤‡∏ß‡πÇ‡∏à‡∏ô‡∏™‡πå', 's&p 500': '‡πÄ‡∏≠‡∏™ ‡πÅ‡∏≠‡∏ô‡∏î‡πå ‡∏û‡∏µ 500',
      
      // ‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®
      'U.S.': '‡∏™‡∏´‡∏£‡∏±‡∏ê‡∏≠‡πÄ‡∏°‡∏£‡∏¥‡∏Å‡∏≤', 'US': '‡∏™‡∏´‡∏£‡∏±‡∏ê‡∏≠‡πÄ‡∏°‡∏£‡∏¥‡∏Å‡∏≤', 'United States': '‡∏™‡∏´‡∏£‡∏±‡∏ê‡∏≠‡πÄ‡∏°‡∏£‡∏¥‡∏Å‡∏≤', 'America': '‡∏≠‡πÄ‡∏°‡∏£‡∏¥‡∏Å‡∏≤',
      'China': '‡∏à‡∏µ‡∏ô', 'Japan': '‡∏ç‡∏µ‡πà‡∏õ‡∏∏‡πà‡∏ô', 'Europe': '‡∏¢‡∏∏‡πÇ‡∏£‡∏õ', 'Asia': '‡πÄ‡∏≠‡πÄ‡∏ä‡∏µ‡∏¢',
      'Wall Street': '‡∏ß‡∏≠‡∏•‡∏•‡πå‡∏™‡∏ï‡∏£‡∏µ‡∏ó', 'Silicon Valley': '‡∏ã‡∏¥‡∏•‡∏¥‡∏Ñ‡∏≠‡∏ô‡πÅ‡∏ß‡∏•‡∏•‡∏µ‡∏¢‡πå',
      
      // ‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
      'Trump': '‡∏ó‡∏£‡∏±‡∏°‡∏õ‡πå', 'Donald Trump': '‡πÇ‡∏î‡∏ô‡∏±‡∏•‡∏î‡πå ‡∏ó‡∏£‡∏±‡∏°‡∏õ‡πå', 'Xi Jinping': '‡∏™‡∏µ ‡∏à‡∏¥‡πâ‡∏ô‡∏ú‡∏¥‡∏á',
      
      // ‡∏ß‡∏•‡∏µ‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏Ñ‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ
      'trade deal': '‡∏Ç‡πâ‡∏≠‡∏ï‡∏Å‡∏•‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏≤', 'trade war': '‡∏™‡∏á‡∏Ñ‡∏£‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏≤',
      'Federal Reserve': '‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡∏Å‡∏•‡∏≤‡∏á‡∏™‡∏´‡∏£‡∏±‡∏ê', 'Fed': '‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡∏Å‡∏•‡∏≤‡∏á‡∏™‡∏´‡∏£‡∏±‡∏ê',
      'earnings season': '‡∏ä‡πà‡∏ß‡∏á‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏á‡∏≤‡∏ô', 'season': '‡∏ä‡πà‡∏ß‡∏á',
      'market cap': '‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡∏ï‡∏≤‡∏°‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡∏•‡∏≤‡∏î', 'market capitalization': '‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡∏ï‡∏≤‡∏°‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡∏•‡∏≤‡∏î',
      'share price': '‡∏£‡∏≤‡∏Ñ‡∏≤‡∏´‡∏∏‡πâ‡∏ô', 'stock price': '‡∏£‡∏≤‡∏Ñ‡∏≤‡∏´‡∏∏‡πâ‡∏ô',
      'dividend': '‡πÄ‡∏á‡∏¥‡∏ô‡∏õ‡∏±‡∏ô‡∏ú‡∏•', 'dividends': '‡πÄ‡∏á‡∏¥‡∏ô‡∏õ‡∏±‡∏ô‡∏ú‡∏•',
      'we': '‡πÄ‡∏£‡∏≤', 'they': '‡∏û‡∏ß‡∏Å‡πÄ‡∏Ç‡∏≤', 'their': '‡∏Ç‡∏≠‡∏á‡∏û‡∏ß‡∏Å‡πÄ‡∏Ç‡∏≤', 'our': '‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤',
      'you': '‡∏Ñ‡∏∏‡∏ì', 'your': '‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì', 'it': '‡∏°‡∏±‡∏ô', 'its': '‡∏Ç‡∏≠‡∏á‡∏°‡∏±‡∏ô',
      'he': '‡πÄ‡∏Ç‡∏≤', 'she': '‡πÄ‡∏ò‡∏≠', 'his': '‡∏Ç‡∏≠‡∏á‡πÄ‡∏Ç‡∏≤', 'her': '‡∏Ç‡∏≠‡∏á‡πÄ‡∏ò‡∏≠',
      'the': '', 'a': '', 'an': '', // ‡∏•‡∏ö‡∏Ñ‡∏≥‡∏ô‡∏≥‡∏´‡∏ô‡πâ‡∏≤‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©
      'to': '‡πÑ‡∏õ‡∏¢‡∏±‡∏á', 'for': '‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö', 'of': '‡∏Ç‡∏≠‡∏á', 'at': '‡∏ó‡∏µ‡πà', 'by': '‡πÇ‡∏î‡∏¢',
      'from': '‡∏à‡∏≤‡∏Å', 'as': '‡πÄ‡∏õ‡πá‡∏ô', 'is': '‡πÄ‡∏õ‡πá‡∏ô', 'are': '‡πÄ‡∏õ‡πá‡∏ô', 'was': '‡πÄ‡∏õ‡πá‡∏ô', 'were': '‡πÄ‡∏õ‡πá‡∏ô'
    };
    
    // ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏ß‡∏•‡∏µ‡∏¢‡∏≤‡∏ß‡∏Å‡πà‡∏≠‡∏ô (‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏ä‡∏ô‡∏Å‡∏±‡∏ö‡∏Ñ‡∏≥‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß)
    const longPhrases = {
      'better than expected': '‡∏î‡∏µ‡∏Å‡∏ß‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏Ñ‡∏≤‡∏î‡πÑ‡∏ß‡πâ',
      'worse than expected': '‡πÅ‡∏¢‡πà‡∏Å‡∏ß‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏Ñ‡∏≤‡∏î‡πÑ‡∏ß‡πâ',
      'as expected': '‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏Ñ‡∏≤‡∏î‡πÑ‡∏ß‡πâ',
      'beat expectations': '‡πÄ‡∏Å‡∏¥‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏≤‡∏î‡∏´‡∏°‡∏≤‡∏¢',
      'missed expectations': '‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏≤‡∏î‡∏´‡∏°‡∏≤‡∏¢',
      'market share': '‡∏™‡πà‡∏ß‡∏ô‡πÅ‡∏ö‡πà‡∏á‡∏ï‡∏•‡∏≤‡∏î',
      'supply chain': '‡∏´‡πà‡∏ß‡∏á‡πÇ‡∏ã‡πà‡∏≠‡∏∏‡∏õ‡∏ó‡∏≤‡∏ô',
      'cash flow': '‡∏Å‡∏£‡∏∞‡πÅ‡∏™‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏î',
      'balance sheet': '‡∏á‡∏ö‡∏î‡∏∏‡∏•',
      'income statement': '‡∏á‡∏ö‡∏Å‡∏≥‡πÑ‡∏£‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô',
      'trade deal': '‡∏Ç‡πâ‡∏≠‡∏ï‡∏Å‡∏•‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏≤',
      'trade war': '‡∏™‡∏á‡∏Ñ‡∏£‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏≤',
      'Federal Reserve': '‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡∏Å‡∏•‡∏≤‡∏á‡∏™‡∏´‡∏£‡∏±‡∏ê',
      'earnings season': '‡∏ä‡πà‡∏ß‡∏á‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏á‡∏≤‡∏ô',
      'market cap': '‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡∏ï‡∏≤‡∏°‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡∏•‡∏≤‡∏î',
      'market capitalization': '‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡∏ï‡∏≤‡∏°‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡∏•‡∏≤‡∏î',
      'share price': '‡∏£‡∏≤‡∏Ñ‡∏≤‡∏´‡∏∏‡πâ‡∏ô',
      'stock price': '‡∏£‡∏≤‡∏Ñ‡∏≤‡∏´‡∏∏‡πâ‡∏ô',
      'interest rate': '‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏î‡∏≠‡∏Å‡πÄ‡∏ö‡∏µ‡πâ‡∏¢',
      'interest rates': '‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏î‡∏≠‡∏Å‡πÄ‡∏ö‡∏µ‡πâ‡∏¢',
      'artificial intelligence': '‡∏õ‡∏±‡∏ç‡∏ç‡∏≤‡∏õ‡∏£‡∏∞‡∏î‡∏¥‡∏©‡∏ê‡πå',
      'United States': '‡∏™‡∏´‡∏£‡∏±‡∏ê‡∏≠‡πÄ‡∏°‡∏£‡∏¥‡∏Å‡∏≤',
      'Donald Trump': '‡πÇ‡∏î‡∏ô‡∏±‡∏•‡∏î‡πå ‡∏ó‡∏£‡∏±‡∏°‡∏õ‡πå',
      'Xi Jinping': '‡∏™‡∏µ ‡∏à‡∏¥‡πâ‡∏ô‡∏ú‡∏¥‡∏á',
      'Wall Street': '‡∏ß‡∏≠‡∏•‡∏•‡πå‡∏™‡∏ï‡∏£‡∏µ‡∏ó',
      'Silicon Valley': '‡∏ã‡∏¥‡∏•‡∏¥‡∏Ñ‡∏≠‡∏ô‡πÅ‡∏ß‡∏•‡∏•‡∏µ‡∏¢‡πå',
      'dow jones': '‡∏î‡∏≤‡∏ß‡πÇ‡∏à‡∏ô‡∏™‡πå',
      's&p 500': '‡πÄ‡∏≠‡∏™ ‡πÅ‡∏≠‡∏ô‡∏î‡πå ‡∏û‡∏µ 500',
      'double whammy': '‡πÄ‡∏´‡∏ï‡∏∏‡∏£‡πâ‡∏≤‡∏¢‡∏™‡∏≠‡∏á‡πÄ‡∏ó‡πà‡∏≤',
      'record-setting rally': '‡∏Å‡∏≤‡∏£‡∏Ç‡∏∂‡πâ‡∏ô‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÉ‡∏´‡∏°‡πà',
      'midweek double whammy': '‡πÄ‡∏´‡∏ï‡∏∏‡∏£‡πâ‡∏≤‡∏¢‡∏™‡∏≠‡∏á‡πÄ‡∏ó‡πà‡∏≤‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏Å‡∏•‡∏≤‡∏á‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå',
      'stock market': '‡∏ï‡∏•‡∏≤‡∏î‡∏´‡∏∏‡πâ‡∏ô',
      'stock futures': '‡∏ü‡∏¥‡∏ß‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏™‡∏´‡∏∏‡πâ‡∏ô',
      'tech stocks': '‡∏´‡∏∏‡πâ‡∏ô‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ',
      'tech earnings': '‡∏ú‡∏•‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏Ñ',
      'top negotiators': '‡∏ú‡∏π‡πâ‡πÄ‡∏à‡∏£‡∏à‡∏≤‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏™‡∏π‡∏á',
      'key meeting': '‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç',
      'new trade': '‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà',
      'is in reach': '‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏Å‡∏•‡πâ‡πÅ‡∏Ñ‡πà‡πÄ‡∏≠‡∏∑‡πâ‡∏≠‡∏°',
      'that a new': '‡∏ß‡πà‡∏≤‡πÉ‡∏´‡∏°‡πà',
      'ahead of': '‡∏Å‡πà‡∏≠‡∏ô',
      'later this': '‡πÉ‡∏ô‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå‡∏ô‡∏µ‡πâ',
      'expressed optimism': '‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏≠‡∏á‡πÉ‡∏ô‡πÅ‡∏á‡πà‡∏î‡∏µ',
      'could let you': '‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏´‡πâ‡∏Ñ‡∏∏‡∏ì',
      'like a pro': '‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏°‡∏∑‡∏≠‡∏≠‡∏≤‡∏ä‡∏µ‡∏û',
      'we surveyed': '‡πÄ‡∏£‡∏≤‡∏™‡∏≥‡∏£‡∏ß‡∏à',
      'on their favored': '‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏ó‡∏µ‡πà‡∏û‡∏ß‡∏Å‡πÄ‡∏Ç‡∏≤‡∏ä‡∏∑‡πà‡∏ô‡∏ä‡∏≠‡∏ö',
      'heading into': '‡∏°‡∏∏‡πà‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏™‡∏π‡πà',
      'and identified': '‡πÅ‡∏•‡∏∞‡∏£‡∏∞‡∏ö‡∏∏',
      'across the': '‡∏ó‡∏±‡πà‡∏ß‡∏ó‡∏±‡πâ‡∏á',
      'faces a': '‡πÄ‡∏ú‡∏ä‡∏¥‡∏ç‡∏Å‡∏±‡∏ö',
      'as a pivotal': '‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç',
      'collides with': '‡∏Ç‡∏±‡∏î‡πÅ‡∏¢‡πâ‡∏á‡∏Å‡∏±‡∏ö',
      'a flood of': '‡∏Å‡∏£‡∏∞‡πÅ‡∏™‡∏Ç‡∏≠‡∏á',
      'here\'s what to watch': '‡∏ô‡∏µ‡πà‡∏Ñ‡∏∑‡∏≠‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡∏Ñ‡∏ß‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°'
    };
    
    Object.entries(longPhrases).forEach(([eng, thai]) => {
      const regex = new RegExp(eng, 'gi');
      translated = translated.replace(regex, thai);
    });
    
    // ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡∏≥‡∏ï‡πà‡∏≠‡∏Ñ‡∏≥ (‡∏£‡∏±‡∏Å‡∏©‡∏≤ case-insensitive)
    Object.entries(financialTranslations).forEach(([eng, thai]) => {
      const regex = new RegExp(`\\b${eng}\\b`, 'gi');
      translated = translated.replace(regex, thai);
    });
    
    // ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠
    translated = translated
      .replace(/\s+/g, ' ') // ‡∏•‡∏î‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡∏ã‡πâ‡∏≠‡∏ô‡∏Å‡∏±‡∏ô
      .replace(/\s*-\s*/g, '-') // ‡∏õ‡∏£‡∏±‡∏ö‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢‡∏Ç‡∏µ‡∏î
      .replace(/\'\s+s/g, '\'s') // ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç possessive
      .trim();
    
    return translated;
  }

  evaluateSourceCredibility(source) {
    if (!source) return 3; // ‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡πÅ‡∏´‡∏•‡πà‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏≤
    
    const sourceLower = source.toLowerCase();
    
    // ‡πÅ‡∏´‡∏•‡πà‡∏á‡∏Ç‡πà‡∏≤‡∏ß‡∏ó‡∏µ‡πà‡∏ô‡πà‡∏≤‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏ñ‡∏∑‡∏≠‡∏™‡∏π‡∏á (8-10)
    const highCredibility = [
      'reuters', 'bloomberg', 'cnbc', 'marketwatch', 'wsj', 'wall street journal',
      'financial times', 'ft.com', 'yahoo finance', 'ap news', 'associated press',
      'bbc', 'cnn business', 'nasdaq', 'investopedia'
    ];
    
    // ‡πÅ‡∏´‡∏•‡πà‡∏á‡∏Ç‡πà‡∏≤‡∏ß‡∏ó‡∏µ‡πà‡∏ô‡πà‡∏≤‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏ñ‡∏∑‡∏≠‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á (5-7)
    const mediumCredibility = [
      'yahoo', 'google news', 'msn', 'cnn', 'fox business', 'seeking alpha',
      'the motley fool', 'zacks', 'morningstar', 'barrons', 'forbes',
      'business insider', 'techcrunch', 'venture beat'
    ];
    
    // ‡πÅ‡∏´‡∏•‡πà‡∏á‡∏Ç‡πà‡∏≤‡∏ß‡∏ó‡∏µ‡πà‡∏ô‡πà‡∏≤‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏ñ‡∏∑‡∏≠‡∏ï‡πà‡∏≥ (1-4)
    const lowCredibility = [
      'reddit', 'twitter', 'facebook', 'telegram', 'blog', 'unknown',
      'rss feed', 'social media', 'forum'
    ];
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏´‡∏•‡πà‡∏á‡∏Ç‡πà‡∏≤‡∏ß‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏™‡∏π‡∏á
    for (const cred of highCredibility) {
      if (sourceLower.includes(cred)) {
        if (cred === 'reuters' || cred === 'bloomberg') return 10;
        if (cred === 'wsj' || cred === 'wall street journal') return 9;
        return 8;
      }
    }
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏´‡∏•‡πà‡∏á‡∏Ç‡πà‡∏≤‡∏ß‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Å‡∏•‡∏≤‡∏á
    for (const cred of mediumCredibility) {
      if (sourceLower.includes(cred)) {
        if (cred === 'yahoo finance' || cred === 'nasdaq') return 7;
        if (cred === 'forbes' || cred === 'barrons') return 6;
        return 5;
      }
    }
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏´‡∏•‡πà‡∏á‡∏Ç‡πà‡∏≤‡∏ß‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ï‡πà‡∏≥
    for (const cred of lowCredibility) {
      if (sourceLower.includes(cred)) {
        return Math.max(1, 4 - lowCredibility.indexOf(cred));
      }
    }
    
    // ‡πÅ‡∏´‡∏•‡πà‡∏á‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å
    return 4;
  }
  
  getCredibilityDisplay(credibility) {
    const stars = '‚≠ê'.repeat(Math.ceil(credibility / 2));
    let description = '';
    
    if (credibility >= 8) description = '(‡∏ô‡πà‡∏≤‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏ñ‡∏∑‡∏≠‡∏™‡∏π‡∏á)';
    else if (credibility >= 6) description = '(‡∏ô‡πà‡∏≤‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏ñ‡∏∑‡∏≠‡∏î‡∏µ)';
    else if (credibility >= 4) description = '(‡∏ô‡πà‡∏≤‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏ñ‡∏∑‡∏≠‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á)';
    else description = '(‡∏ô‡πà‡∏≤‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏ñ‡∏∑‡∏≠‡∏ï‡πà‡∏≥)';
    
    return `${stars} ${credibility}/10 ${description}`;
  }
  
  getRiskDisplay(riskLevel) {
    const risk = parseInt(riskLevel) || 5;
    let riskEmoji = '';
    let riskText = '';
    
    if (risk >= 8) {
      riskEmoji = 'üî¥üî¥üî¥';
      riskText = '‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏™‡∏π‡∏á‡∏°‡∏≤‡∏Å';
    } else if (risk >= 6) {
      riskEmoji = 'üü†üü†';
      riskText = '‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏™‡∏π‡∏á';
    } else if (risk >= 4) {
      riskEmoji = 'üü°';
      riskText = '‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á';
    } else {
      riskEmoji = 'üü¢';
      riskText = '‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏ï‡πà‡∏≥';
    }
    
    return `${riskEmoji} ${risk}/10 (${riskText})`;
  }
  
  formatPriceDirection(direction, changePercent) {
    let emoji = '';
    let directionText = '';
    
    if (direction === '‡∏Ç‡∏∂‡πâ‡∏ô') {
      emoji = 'üìàüü¢';
      directionText = '‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏Ç‡∏∂‡πâ‡∏ô';
    } else if (direction === '‡∏•‡∏á') {
      emoji = 'üìâüî¥';
      directionText = '‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏•‡∏á';
    } else {
      emoji = 'üìäüü°';
      directionText = '‡∏Ñ‡∏á‡∏ó‡∏µ‡πà';
    }
    
    return `üí∞ ‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤: ${emoji} ${directionText} ${changePercent || ''}`;
  }

  delay(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
  }

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° ‡∏û‡∏£‡πâ‡∏≠‡∏° fallback ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
  async sendMessage(data) {
    try {
      logger.info(`üì§ Attempting to send message via LINE Official Account...`);
      
      // ‡∏•‡∏≠‡∏á‡∏™‡πà‡∏á‡∏ú‡πà‡∏≤‡∏ô LINE Official Account ‡∏Å‡πà‡∏≠‡∏ô
      await this.sendPushMessage(data);
      logger.info(`‚úÖ Message sent successfully via LINE Official Account`);
      
      return { success: true, method: 'LINE_OFFICIAL_ACCOUNT' };
      
    } catch (lineError) {
      logger.warn(`‚ö†Ô∏è LINE Official Account failed: ${lineError.message}`);
      logger.info(`üíæ Switching to file fallback...`);
      
      try {
        // ‡∏ñ‡πâ‡∏≤ LINE ‡πÉ‡∏ä‡πâ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ ‡πÉ‡∏´‡πâ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏ó‡∏ô
        await this.saveToFallbackFile(data);
        logger.info(`‚úÖ Message saved to fallback file successfully`);
        
        return { success: true, method: 'FILE_FALLBACK', error: lineError.message };
        
      } catch (fallbackError) {
        logger.error(`‚ùå Both LINE and file fallback failed: ${fallbackError.message}`);
        throw new Error(`Failed to send message: LINE (${lineError.message}), File (${fallbackError.message})`);
      }
    }
  }

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏°‡∏∑‡πà‡∏≠ LINE ‡πÉ‡∏ä‡πâ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ
  async saveToFallbackFile(data) {
    const fs = require('fs').promises;
    const path = require('path');
    
    try {
      const fallbackFile = path.join(process.cwd(), 'data', 'output-summary.txt');
      
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå data ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏°‡∏µ
      const dataDir = path.dirname(fallbackFile);
      await fs.mkdir(dataDir, { recursive: true });
      
      // ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
      const timestamp = new Date().toLocaleString('th-TH', { timeZone: 'Asia/Bangkok' });
      const formattedData = `
üö® [LINE FALLBACK] ${timestamp}
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

${data}

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üí° ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏û‡∏£‡∏≤‡∏∞ LINE Official Account ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡πÑ‡∏î‡πâ
‚è∞ ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡∏•‡∏≠‡∏á‡∏™‡πà‡∏á‡∏ú‡πà‡∏≤‡∏ô LINE ‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠ LINE ‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ

`;
      
      // ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏ï‡πà‡∏≠‡∏ó‡πâ‡∏≤‡∏¢‡πÑ‡∏ü‡∏•‡πå (append)
      await fs.appendFile(fallbackFile, formattedData, 'utf8');
      
      logger.info(`üíæ Message appended to ${fallbackFile}`);
      
    } catch (error) {
      logger.error(`‚ùå Failed to save to fallback file: ${error.message}`);
      throw error;
    }
  }

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ LINE Official Account
  async checkLineStatus() {
    try {
      await this.testConnection();
      return { isAvailable: true, error: null };
    } catch (error) {
      return { isAvailable: false, error: error.message };
    }
  }

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏™‡πà‡∏á‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå fallback ‡πÄ‡∏°‡∏∑‡πà‡∏≠ LINE ‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ
  async processPendingMessages() {
    const fs = require('fs').promises;
    const path = require('path');
    
    try {
      const fallbackFile = path.join(process.cwd(), 'data', 'output-summary.txt');
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      try {
        await fs.access(fallbackFile);
      } catch (error) {
        logger.info(`üìÑ No pending messages found in fallback file`);
        return { processed: 0, errors: 0 };
      }
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ LINE ‡∏Å‡πà‡∏≠‡∏ô
      const lineStatus = await this.checkLineStatus();
      if (!lineStatus.isAvailable) {
        logger.warn(`‚ö†Ô∏è LINE still not available: ${lineStatus.error}`);
        return { processed: 0, errors: 0, reason: 'LINE_UNAVAILABLE' };
      }
      
      // ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏•‡∏∞‡πÅ‡∏¢‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏™‡πà‡∏á
      const content = await fs.readFile(fallbackFile, 'utf8');
      const messages = this.extractPendingMessages(content);
      
      if (messages.length === 0) {
        logger.info(`üìÑ No pending messages to process`);
        return { processed: 0, errors: 0 };
      }
      
      logger.info(`üì§ Processing ${messages.length} pending messages...`);
      
      let processed = 0;
      let errors = 0;
      
      // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
      for (const message of messages) {
        try {
          await this.sendPushMessage(message.content);
          processed++;
          await this.delay(2000); // ‡∏´‡∏ô‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á
        } catch (error) {
          logger.error(`‚ùå Failed to send pending message: ${error.message}`);
          errors++;
        }
      }
      
      // ‡∏•‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ
      if (errors === 0) {
        // ‡∏™‡πà‡∏á‡∏´‡∏°‡∏î‡πÅ‡∏•‡πâ‡∏ß ‡∏•‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå
        await fs.writeFile(fallbackFile, '', 'utf8');
        logger.info(`üóëÔ∏è Cleared fallback file after processing all messages`);
      }
      
      logger.info(`‚úÖ Processed ${processed} messages, ${errors} errors`);
      return { processed, errors };
      
    } catch (error) {
      logger.error(`‚ùå Error processing pending messages: ${error.message}`);
      throw error;
    }
  }

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏¢‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏™‡πà‡∏á‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå
  extractPendingMessages(fileContent) {
    const messages = [];
    const sections = fileContent.split('üö® [LINE FALLBACK]');
    
    for (let i = 1; i < sections.length; i++) {
      const section = sections[i];
      const lines = section.split('\n');
      const timestamp = lines[0]?.trim();
      
      let content = '';
      let foundStart = false;
      let foundEnd = false;
      
      for (const line of lines) {
        if (line.includes('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ') && !foundStart) {
          foundStart = true;
          continue;
        }
        
        if (foundStart && line.includes('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ')) {
          foundEnd = true;
          break;
        }
        
        if (foundStart && !foundEnd) {
          content += line + '\n';
        }
      }
      
      if (content.trim()) {
        messages.push({
          timestamp,
          content: content.trim()
        });
      }
    }
    
    return messages;
  }

  evaluateSourceCredibility(source) {
    if (!source) return 3; // ‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡πÅ‡∏´‡∏•‡πà‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏≤
    
    const sourceLower = source.toLowerCase();
    
    // ‡πÅ‡∏´‡∏•‡πà‡∏á‡∏Ç‡πà‡∏≤‡∏ß‡∏ó‡∏µ‡πà‡∏ô‡πà‡∏≤‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏ñ‡∏∑‡∏≠‡∏™‡∏π‡∏á (8-10)
    const highCredibility = [
      'reuters', 'bloomberg', 'cnbc', 'marketwatch', 'wsj', 'wall street journal',
      'financial times', 'ft.com', 'yahoo finance', 'ap news', 'associated press',
      'bbc', 'cnn business', 'nasdaq', 'investopedia'
    ];
    
    // ‡πÅ‡∏´‡∏•‡πà‡∏á‡∏Ç‡πà‡∏≤‡∏ß‡∏ó‡∏µ‡πà‡∏ô‡πà‡∏≤‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏ñ‡∏∑‡∏≠‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á (5-7)
    const mediumCredibility = [
      'yahoo', 'google news', 'msn', 'cnn', 'fox business', 'seeking alpha',
      'the motley fool', 'zacks', 'morningstar', 'barrons', 'forbes',
      'business insider', 'techcrunch', 'venture beat'
    ];
    
    // ‡πÅ‡∏´‡∏•‡πà‡∏á‡∏Ç‡πà‡∏≤‡∏ß‡∏ó‡∏µ‡πà‡∏ô‡πà‡∏≤‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏ñ‡∏∑‡∏≠‡∏ï‡πà‡∏≥ (1-4)
    const lowCredibility = [
      'reddit', 'twitter', 'facebook', 'telegram', 'blog', 'unknown',
      'rss feed', 'social media', 'forum'
    ];
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏´‡∏•‡πà‡∏á‡∏Ç‡πà‡∏≤‡∏ß‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏™‡∏π‡∏á
    for (const cred of highCredibility) {
      if (sourceLower.includes(cred)) {
        if (cred === 'reuters' || cred === 'bloomberg') return 10;
        if (cred === 'wsj' || cred === 'wall street journal') return 9;
        return 8;
      }
    }
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏´‡∏•‡πà‡∏á‡∏Ç‡πà‡∏≤‡∏ß‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Å‡∏•‡∏≤‡∏á
    for (const cred of mediumCredibility) {
      if (sourceLower.includes(cred)) {
        if (cred === 'yahoo finance' || cred === 'nasdaq') return 7;
        if (cred === 'forbes' || cred === 'barrons') return 6;
        return 5;
      }
    }
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏´‡∏•‡πà‡∏á‡∏Ç‡πà‡∏≤‡∏ß‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ï‡πà‡∏≥
    for (const cred of lowCredibility) {
      if (sourceLower.includes(cred)) {
        return Math.max(1, 4 - lowCredibility.indexOf(cred));
      }
    }
    
    // ‡πÅ‡∏´‡∏•‡πà‡∏á‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å
    return 4;
  }
  
  getCredibilityDisplay(credibility) {
    const stars = '‚≠ê'.repeat(Math.ceil(credibility / 2));
    let description = '';
    
    if (credibility >= 8) description = '(‡∏ô‡πà‡∏≤‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏ñ‡∏∑‡∏≠‡∏™‡∏π‡∏á)';
    else if (credibility >= 6) description = '(‡∏ô‡πà‡∏≤‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏ñ‡∏∑‡∏≠‡∏î‡∏µ)';
    else if (credibility >= 4) description = '(‡∏ô‡πà‡∏≤‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏ñ‡∏∑‡∏≠‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á)';
    else description = '(‡∏ô‡πà‡∏≤‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏ñ‡∏∑‡∏≠‡∏ï‡πà‡∏≥)';
    
    return `${stars} ${credibility}/10 ${description}`;
  }
  
  getRiskDisplay(riskLevel) {
    const risk = parseInt(riskLevel) || 5;
    let riskEmoji = '';
    let riskText = '';
    
    if (risk >= 8) {
      riskEmoji = 'üî¥üî¥üî¥';
      riskText = '‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏™‡∏π‡∏á‡∏°‡∏≤‡∏Å';
    } else if (risk >= 6) {
      riskEmoji = 'üü†üü†';
      riskText = '‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏™‡∏π‡∏á';
    } else if (risk >= 4) {
      riskEmoji = 'üü°';
      riskText = '‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á';
    } else {
      riskEmoji = 'üü¢';
      riskText = '‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏ï‡πà‡∏≥';
    }
    
    return `${riskEmoji} ${risk}/10 (${riskText})`;
  }
  
  formatPriceDirection(direction, changePercent) {
    let emoji = '';
    let directionText = '';
    
    if (direction === '‡∏Ç‡∏∂‡πâ‡∏ô') {
      emoji = 'üìàüü¢';
      directionText = '‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏Ç‡∏∂‡πâ‡∏ô';
    } else if (direction === '‡∏•‡∏á') {
      emoji = 'üìâüî¥';
      directionText = '‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏•‡∏á';
    } else {
      emoji = 'üìäüü°';
      directionText = '‡∏Ñ‡∏á‡∏ó‡∏µ‡πà';
    }
    
    return `üí∞ ‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤: ${emoji} ${directionText} ${changePercent || ''}`;
  }
}

module.exports = LineOfficialAccountService;