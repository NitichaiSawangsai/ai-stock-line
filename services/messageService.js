const axios = require('axios');
const fs = require('fs').promises;
const path = require('path');
const logger = require('./logger');

class LineService {
    constructor(channelAccessToken, channelSecret, userId) {
        this.channelAccessToken = channelAccessToken;
        this.channelSecret = channelSecret;
        this.userId = userId;
        this.baseUrl = 'https://api.line.me/v2/bot';
        this.maxMessageLength = 5000; // LINE message limit
    }

    async sendMessage(message) {
        try {
            logger.api('‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏õ‡∏¢‡∏±‡∏á LINE...');
            
            const response = await axios.post(
                `${this.baseUrl}/message/push`,
                {
                    to: this.userId,
                    messages: [{
                        type: 'text',
                        text: message
                    }]
                },
                {
                    headers: {
                        'Authorization': `Bearer ${this.channelAccessToken}`,
                        'Content-Type': 'application/json'
                    },
                    timeout: 30000
                }
            );

            logger.success('‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° LINE ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
            return true;

        } catch (error) {
            const errorData = error.response?.data;
            const statusCode = error.response?.status;
            
            if (statusCode === 429 || (errorData && errorData.message && errorData.message.includes('limit'))) {
                logger.warn('‚ö†Ô∏è LINE API: ‡πÄ‡∏Å‡∏¥‡∏ô Rate Limit ‡∏´‡∏£‡∏∑‡∏≠ Monthly Limit - ‡∏Ç‡πâ‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á LINE');
                return false; // Return false ‡πÅ‡∏ó‡∏ô throw error
            } else if (statusCode === 401) {
                logger.error('‚ùå LINE API: Token ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á');
                return false;
            } else if (statusCode === 403) {
                logger.error('‚ùå LINE API: ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á');
                return false;
            } else {
                logger.error('‚ùå LINE API Error:', errorData || error.message);
                return false;
            }
        }
    }

    splitMessage(message) {
        // Split long message into chunks
        const chunks = [];
        let currentChunk = '';
        const lines = message.split('\n');

        for (const line of lines) {
            // Check if adding this line would exceed the limit
            if ((currentChunk + '\n' + line).length > this.maxMessageLength && currentChunk) {
                chunks.push(currentChunk.trim());
                currentChunk = line;
            } else {
                currentChunk += (currentChunk ? '\n' : '') + line;
            }
        }

        if (currentChunk) {
            chunks.push(currentChunk.trim());
        }

        return chunks.length > 0 ? chunks : [message];
    }

    async sendLongMessage(message) {
        try {
            const chunks = this.splitMessage(message);
            logger.process(`‡πÅ‡∏ö‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô ${chunks.length} ‡∏™‡πà‡∏ß‡∏ô`);

            let successCount = 0;
            for (let i = 0; i < chunks.length; i++) {
                logger.process(`‡∏™‡πà‡∏á‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà ${i + 1}/${chunks.length}...`);
                
                // Add part indicator for multi-part messages
                let messageToSend = chunks[i];
                if (chunks.length > 1) {
                    messageToSend = `üìÑ ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà ${i + 1}/${chunks.length}\n\n${chunks[i]}`;
                }

                const success = await this.sendMessage(messageToSend);
                if (success) {
                    successCount++;
                } else {
                    logger.warn(`‚ö†Ô∏è ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà ${i + 1} ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à - ‡∏Ç‡πâ‡∏≤‡∏°`);
                    break; // ‡∏´‡∏¢‡∏∏‡∏î‡∏™‡πà‡∏á‡∏™‡πà‡∏ß‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
                }
                
                // Delay between messages to avoid rate limiting
                if (i < chunks.length - 1) {
                    logger.info('‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á Rate Limit...');
                    await new Promise(resolve => setTimeout(resolve, 2000));
                }
            }

            if (successCount > 0) {
                logger.success(`‚úÖ ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ${successCount}/${chunks.length} ‡∏™‡πà‡∏ß‡∏ô`);
                return true;
            } else {
                logger.warn('‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏î‡πÜ ‡πÑ‡∏î‡πâ - ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏ó‡∏ô');
                return false;
            }

        } catch (error) {
            logger.error('‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß', error.message);
            return false; // Return false ‡πÅ‡∏ó‡∏ô throw error
        }
    }
}

class FileBackupService {
    constructor() {
        this.dataDir = path.join(__dirname, '../data');
        this.backupFile = path.join(this.dataDir, 'text-sum.txt');
    }

    async saveToFile(content, isAppend = false) {
        try {
            logger.process('‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå...');
            
            // Ensure data directory exists
            await fs.mkdir(this.dataDir, { recursive: true });

            const timestamp = new Date().toLocaleString('th-TH');
            const header = `\n${'='.repeat(80)}\nüìÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏°‡∏∑‡πà‡∏≠: ${timestamp}\n${'='.repeat(80)}\n\n`;
            
            const contentToSave = isAppend ? header + content : content;
            
            if (isAppend) {
                await fs.appendFile(this.backupFile, contentToSave, 'utf8');
            } else {
                await fs.writeFile(this.backupFile, contentToSave, 'utf8');
            }

            logger.file(`‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${this.backupFile}`);
            return true;

        } catch (error) {
            logger.error('‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå', error.message);
            throw error;
        }
    }

    async clearFile() {
        try {
            await fs.writeFile(this.backupFile, '', 'utf8');
            logger.file('‡∏•‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå backup ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢');
        } catch (error) {
            logger.warn('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå backup', error.message);
        }
    }

    async getLastBackup() {
        try {
            const content = await fs.readFile(this.backupFile, 'utf8');
            return content;
        } catch (error) {
            console.log('üìÑ ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå backup ‡πÄ‡∏Å‡πà‡∏≤');
            return null;
        }
    }
}

class MessageService {
    constructor(lineConfig) {
        this.lineService = new LineService(
            lineConfig.channelAccessToken,
            lineConfig.channelSecret,
            lineConfig.userId
        );
        this.fileBackupService = new FileBackupService();
    }

    async sendAnalysisResult(analysisContent) {
        let success = false;
        let error = null;

        try {
            // Try sending to LINE first
            success = await this.lineService.sendLongMessage(analysisContent);
            if (success) {
                logger.success('‚úÖ ‡∏™‡πà‡∏á‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÑ‡∏õ‡∏¢‡∏±‡∏á LINE ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
            } else {
                logger.warn('‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á LINE ‡πÑ‡∏î‡πâ - ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏ó‡∏ô');
            }

        } catch (err) {
            logger.warn(`‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á LINE ‡πÑ‡∏î‡πâ ${err.message}`);
            success = false;
            error = err;
        }

        // Always save to file as backup
        try {
            await this.fileBackupService.saveToFile(analysisContent);
            logger.file(`‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${this.fileBackupService.backupFile}`);
        } catch (fileError) {
            logger.error(`‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå: ${fileError.message}`);
        }

        return success;
    }

    async sendCostSummary(costSummary) {
        let success = false;
        let error = null;

        try {
            // Try sending to LINE first
            success = await this.lineService.sendMessage(costSummary);
            if (success) {
                logger.success('‚úÖ ‡∏™‡πà‡∏á‡∏™‡∏£‡∏∏‡∏õ‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢‡πÑ‡∏õ‡∏¢‡∏±‡∏á LINE ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
            } else {
                logger.warn('‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡∏™‡∏£‡∏∏‡∏õ‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢‡πÑ‡∏õ‡∏¢‡∏±‡∏á LINE ‡πÑ‡∏î‡πâ - ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏ó‡∏ô');
            }

        } catch (err) {
            logger.warn(`‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡∏™‡∏£‡∏∏‡∏õ‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢‡πÑ‡∏õ‡∏¢‡∏±‡∏á LINE ‡πÑ‡∏î‡πâ ${err.message}`);
            success = false;
            error = err;
        }

        // Always save to file as backup
        try {
            await this.fileBackupService.saveToFile(costSummary, true);
            logger.file(`‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${this.fileBackupService.backupFile}`);
        } catch (fileError) {
            logger.error(`‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå: ${fileError.message}`);
        }

        return success;
    }

    async clearPreviousResults() {
        try {
            await this.fileBackupService.clearFile();
        } catch (error) {
            logger.warn('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡πâ‡∏≤‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÄ‡∏Å‡πà‡∏≤‡πÑ‡∏î‡πâ', error.message);
        }
    }
}

module.exports = { LineService, FileBackupService, MessageService };